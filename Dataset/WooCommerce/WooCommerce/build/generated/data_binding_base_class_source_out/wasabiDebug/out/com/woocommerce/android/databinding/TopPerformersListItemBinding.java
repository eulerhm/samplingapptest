// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TopPerformersListItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final FrameLayout frameProduct;

  @NonNull
  public final ImageView imageProduct;

  @NonNull
  public final MaterialTextView itemsSoldTextView;

  @NonNull
  public final MaterialTextView netSalesTextView;

  @NonNull
  public final LinearLayout productContainer;

  @NonNull
  public final MaterialTextView textProductName;

  private TopPerformersListItemBinding(@NonNull RelativeLayout rootView, @NonNull View divider,
      @NonNull FrameLayout frameProduct, @NonNull ImageView imageProduct,
      @NonNull MaterialTextView itemsSoldTextView, @NonNull MaterialTextView netSalesTextView,
      @NonNull LinearLayout productContainer, @NonNull MaterialTextView textProductName) {
    this.rootView = rootView;
    this.divider = divider;
    this.frameProduct = frameProduct;
    this.imageProduct = imageProduct;
    this.itemsSoldTextView = itemsSoldTextView;
    this.netSalesTextView = netSalesTextView;
    this.productContainer = productContainer;
    this.textProductName = textProductName;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TopPerformersListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TopPerformersListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.top_performers_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TopPerformersListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.frame_product;
      FrameLayout frameProduct = ViewBindings.findChildViewById(rootView, id);
      if (frameProduct == null) {
        break missingId;
      }

      id = R.id.image_product;
      ImageView imageProduct = ViewBindings.findChildViewById(rootView, id);
      if (imageProduct == null) {
        break missingId;
      }

      id = R.id.itemsSoldTextView;
      MaterialTextView itemsSoldTextView = ViewBindings.findChildViewById(rootView, id);
      if (itemsSoldTextView == null) {
        break missingId;
      }

      id = R.id.netSalesTextView;
      MaterialTextView netSalesTextView = ViewBindings.findChildViewById(rootView, id);
      if (netSalesTextView == null) {
        break missingId;
      }

      id = R.id.product_container;
      LinearLayout productContainer = ViewBindings.findChildViewById(rootView, id);
      if (productContainer == null) {
        break missingId;
      }

      id = R.id.text_ProductName;
      MaterialTextView textProductName = ViewBindings.findChildViewById(rootView, id);
      if (textProductName == null) {
        break missingId;
      }

      return new TopPerformersListItemBinding((RelativeLayout) rootView, divider, frameProduct,
          imageProduct, itemsSoldTextView, netSalesTextView, productContainer, textProductName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
