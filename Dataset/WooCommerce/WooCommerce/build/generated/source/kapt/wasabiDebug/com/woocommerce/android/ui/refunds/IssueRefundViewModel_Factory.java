// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.refunds;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.analytics.AnalyticsTrackerWrapper;
import com.woocommerce.android.model.OrderMapper;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.cardreader.InPersonPaymentsCanadaFeatureFlag;
import com.woocommerce.android.ui.orders.details.OrderDetailRepository;
import com.woocommerce.android.util.CoroutineDispatchers;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.store.WCGatewayStore;
import org.wordpress.android.fluxc.store.WCOrderStore;
import org.wordpress.android.fluxc.store.WCRefundStore;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class IssueRefundViewModel_Factory implements Factory<IssueRefundViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<WCOrderStore> orderStoreProvider;

  private final Provider<WooCommerceStore> wooStoreProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<OrderDetailRepository> orderDetailRepositoryProvider;

  private final Provider<WCGatewayStore> gatewayStoreProvider;

  private final Provider<WCRefundStore> refundStoreProvider;

  private final Provider<PaymentChargeRepository> paymentChargeRepositoryProvider;

  private final Provider<OrderMapper> orderMapperProvider;

  private final Provider<InPersonPaymentsCanadaFeatureFlag> inPersonPaymentsCanadaFeatureFlagProvider;

  private final Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider;

  public IssueRefundViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<WCOrderStore> orderStoreProvider, Provider<WooCommerceStore> wooStoreProvider,
      Provider<SelectedSite> selectedSiteProvider, Provider<NetworkStatus> networkStatusProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<OrderDetailRepository> orderDetailRepositoryProvider,
      Provider<WCGatewayStore> gatewayStoreProvider, Provider<WCRefundStore> refundStoreProvider,
      Provider<PaymentChargeRepository> paymentChargeRepositoryProvider,
      Provider<OrderMapper> orderMapperProvider,
      Provider<InPersonPaymentsCanadaFeatureFlag> inPersonPaymentsCanadaFeatureFlagProvider,
      Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider) {
    this.savedStateProvider = savedStateProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.orderStoreProvider = orderStoreProvider;
    this.wooStoreProvider = wooStoreProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.networkStatusProvider = networkStatusProvider;
    this.resourceProvider = resourceProvider;
    this.orderDetailRepositoryProvider = orderDetailRepositoryProvider;
    this.gatewayStoreProvider = gatewayStoreProvider;
    this.refundStoreProvider = refundStoreProvider;
    this.paymentChargeRepositoryProvider = paymentChargeRepositoryProvider;
    this.orderMapperProvider = orderMapperProvider;
    this.inPersonPaymentsCanadaFeatureFlagProvider = inPersonPaymentsCanadaFeatureFlagProvider;
    this.analyticsTrackerWrapperProvider = analyticsTrackerWrapperProvider;
  }

  @Override
  public IssueRefundViewModel get() {
    return newInstance(savedStateProvider.get(), dispatchersProvider.get(), currencyFormatterProvider.get(), orderStoreProvider.get(), wooStoreProvider.get(), selectedSiteProvider.get(), networkStatusProvider.get(), resourceProvider.get(), orderDetailRepositoryProvider.get(), gatewayStoreProvider.get(), refundStoreProvider.get(), paymentChargeRepositoryProvider.get(), orderMapperProvider.get(), inPersonPaymentsCanadaFeatureFlagProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  public static IssueRefundViewModel_Factory create(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<WCOrderStore> orderStoreProvider, Provider<WooCommerceStore> wooStoreProvider,
      Provider<SelectedSite> selectedSiteProvider, Provider<NetworkStatus> networkStatusProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<OrderDetailRepository> orderDetailRepositoryProvider,
      Provider<WCGatewayStore> gatewayStoreProvider, Provider<WCRefundStore> refundStoreProvider,
      Provider<PaymentChargeRepository> paymentChargeRepositoryProvider,
      Provider<OrderMapper> orderMapperProvider,
      Provider<InPersonPaymentsCanadaFeatureFlag> inPersonPaymentsCanadaFeatureFlagProvider,
      Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider) {
    return new IssueRefundViewModel_Factory(savedStateProvider, dispatchersProvider, currencyFormatterProvider, orderStoreProvider, wooStoreProvider, selectedSiteProvider, networkStatusProvider, resourceProvider, orderDetailRepositoryProvider, gatewayStoreProvider, refundStoreProvider, paymentChargeRepositoryProvider, orderMapperProvider, inPersonPaymentsCanadaFeatureFlagProvider, analyticsTrackerWrapperProvider);
  }

  public static IssueRefundViewModel newInstance(SavedStateHandle savedState,
      CoroutineDispatchers dispatchers, CurrencyFormatter currencyFormatter,
      WCOrderStore orderStore, WooCommerceStore wooStore, SelectedSite selectedSite,
      NetworkStatus networkStatus, ResourceProvider resourceProvider,
      OrderDetailRepository orderDetailRepository, WCGatewayStore gatewayStore,
      WCRefundStore refundStore, PaymentChargeRepository paymentChargeRepository,
      OrderMapper orderMapper, InPersonPaymentsCanadaFeatureFlag inPersonPaymentsCanadaFeatureFlag,
      AnalyticsTrackerWrapper analyticsTrackerWrapper) {
    return new IssueRefundViewModel(savedState, dispatchers, currencyFormatter, orderStore, wooStore, selectedSite, networkStatus, resourceProvider, orderDetailRepository, gatewayStore, refundStore, paymentChargeRepository, orderMapper, inPersonPaymentsCanadaFeatureFlag, analyticsTrackerWrapper);
  }
}
