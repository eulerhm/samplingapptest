// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.ui.editsubmission;

import com.google.android.gnd.repository.UserMediaRepository;
import com.google.android.gnd.rx.Schedulers;
import com.google.android.gnd.ui.common.AbstractFragment_MembersInjector;
import com.google.android.gnd.ui.common.EphemeralPopups;
import com.google.android.gnd.ui.common.Navigator;
import com.google.android.gnd.ui.common.ViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class EditSubmissionFragment_MembersInjector implements MembersInjector<EditSubmissionFragment> {
  private final Provider<ViewModelFactory> viewModelFactoryProvider;

  private final Provider<Navigator> navigatorProvider;

  private final Provider<FieldViewFactory> fieldViewFactoryProvider;

  private final Provider<EphemeralPopups> popupsProvider;

  private final Provider<Schedulers> schedulersProvider;

  private final Provider<UserMediaRepository> userMediaRepositoryProvider;

  public EditSubmissionFragment_MembersInjector(Provider<ViewModelFactory> viewModelFactoryProvider,
      Provider<Navigator> navigatorProvider, Provider<FieldViewFactory> fieldViewFactoryProvider,
      Provider<EphemeralPopups> popupsProvider, Provider<Schedulers> schedulersProvider,
      Provider<UserMediaRepository> userMediaRepositoryProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.navigatorProvider = navigatorProvider;
    this.fieldViewFactoryProvider = fieldViewFactoryProvider;
    this.popupsProvider = popupsProvider;
    this.schedulersProvider = schedulersProvider;
    this.userMediaRepositoryProvider = userMediaRepositoryProvider;
  }

  public static MembersInjector<EditSubmissionFragment> create(
      Provider<ViewModelFactory> viewModelFactoryProvider, Provider<Navigator> navigatorProvider,
      Provider<FieldViewFactory> fieldViewFactoryProvider, Provider<EphemeralPopups> popupsProvider,
      Provider<Schedulers> schedulersProvider,
      Provider<UserMediaRepository> userMediaRepositoryProvider) {
    return new EditSubmissionFragment_MembersInjector(viewModelFactoryProvider, navigatorProvider, fieldViewFactoryProvider, popupsProvider, schedulersProvider, userMediaRepositoryProvider);
  }

  @Override
  public void injectMembers(EditSubmissionFragment instance) {
    AbstractFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectNavigator(instance, navigatorProvider.get());
    injectFieldViewFactory(instance, fieldViewFactoryProvider.get());
    injectPopups(instance, popupsProvider.get());
    injectSchedulers(instance, schedulersProvider.get());
    injectUserMediaRepository(instance, userMediaRepositoryProvider.get());
  }

  @InjectedFieldSignature("com.google.android.gnd.ui.editsubmission.EditSubmissionFragment.navigator")
  public static void injectNavigator(EditSubmissionFragment instance, Navigator navigator) {
    instance.navigator = navigator;
  }

  @InjectedFieldSignature("com.google.android.gnd.ui.editsubmission.EditSubmissionFragment.fieldViewFactory")
  public static void injectFieldViewFactory(EditSubmissionFragment instance,
      FieldViewFactory fieldViewFactory) {
    instance.fieldViewFactory = fieldViewFactory;
  }

  @InjectedFieldSignature("com.google.android.gnd.ui.editsubmission.EditSubmissionFragment.popups")
  public static void injectPopups(EditSubmissionFragment instance, EphemeralPopups popups) {
    instance.popups = popups;
  }

  @InjectedFieldSignature("com.google.android.gnd.ui.editsubmission.EditSubmissionFragment.schedulers")
  public static void injectSchedulers(EditSubmissionFragment instance, Schedulers schedulers) {
    instance.schedulers = schedulers;
  }

  @InjectedFieldSignature("com.google.android.gnd.ui.editsubmission.EditSubmissionFragment.userMediaRepository")
  public static void injectUserMediaRepository(EditSubmissionFragment instance,
      UserMediaRepository userMediaRepository) {
    instance.userMediaRepository = userMediaRepository;
  }
}
