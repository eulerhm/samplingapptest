// Generated by data binding compiler. Do not edit!
package org.owntracks.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import java.lang.Deprecated;
import java.lang.Object;
import org.owntracks.android.R;
import org.owntracks.android.ui.preferences.load.LoadMvvm;

public abstract class UiPreferencesLoadBinding extends ViewDataBinding {
  @NonNull
  public final TextView effectiveConfiguration;

  @NonNull
  public final CoordinatorLayout frame;

  @NonNull
  public final RelativeLayout spinner;

  @NonNull
  public final Toolbar toolbar;

  @Bindable
  protected LoadMvvm.ViewModel mVm;

  protected UiPreferencesLoadBinding(Object _bindingComponent, View _root, int _localFieldCount,
      TextView effectiveConfiguration, CoordinatorLayout frame, RelativeLayout spinner,
      Toolbar toolbar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.effectiveConfiguration = effectiveConfiguration;
    this.frame = frame;
    this.spinner = spinner;
    this.toolbar = toolbar;
  }

  public abstract void setVm(@Nullable LoadMvvm.ViewModel vm);

  @Nullable
  public LoadMvvm.ViewModel getVm() {
    return mVm;
  }

  @NonNull
  public static UiPreferencesLoadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.ui_preferences_load, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static UiPreferencesLoadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<UiPreferencesLoadBinding>inflateInternal(inflater, R.layout.ui_preferences_load, root, attachToRoot, component);
  }

  @NonNull
  public static UiPreferencesLoadBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.ui_preferences_load, null, false, component)
   */
  @NonNull
  @Deprecated
  public static UiPreferencesLoadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<UiPreferencesLoadBinding>inflateInternal(inflater, R.layout.ui_preferences_load, null, false, component);
  }

  public static UiPreferencesLoadBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static UiPreferencesLoadBinding bind(@NonNull View view, @Nullable Object component) {
    return (UiPreferencesLoadBinding)bind(component, view, R.layout.ui_preferences_load);
  }
}
