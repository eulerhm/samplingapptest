// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SkeletonProductDetailBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final View divider1;

  @NonNull
  public final View divider2;

  @NonNull
  public final View divider3;

  @NonNull
  public final View divider4;

  @NonNull
  public final View viewDescription;

  @NonNull
  public final View viewDescriptionLabel;

  @NonNull
  public final View viewImage1;

  @NonNull
  public final View viewImage2;

  @NonNull
  public final View viewOrdersLabel;

  @NonNull
  public final View viewOrdersTotal;

  @NonNull
  public final View viewProductExtIcon;

  @NonNull
  public final View viewProductExternal;

  @NonNull
  public final View viewReviewsCount;

  @NonNull
  public final View viewReviewsLabel;

  @NonNull
  public final View viewTitle;

  private SkeletonProductDetailBinding(@NonNull LinearLayout rootView, @NonNull View divider,
      @NonNull View divider1, @NonNull View divider2, @NonNull View divider3,
      @NonNull View divider4, @NonNull View viewDescription, @NonNull View viewDescriptionLabel,
      @NonNull View viewImage1, @NonNull View viewImage2, @NonNull View viewOrdersLabel,
      @NonNull View viewOrdersTotal, @NonNull View viewProductExtIcon,
      @NonNull View viewProductExternal, @NonNull View viewReviewsCount,
      @NonNull View viewReviewsLabel, @NonNull View viewTitle) {
    this.rootView = rootView;
    this.divider = divider;
    this.divider1 = divider1;
    this.divider2 = divider2;
    this.divider3 = divider3;
    this.divider4 = divider4;
    this.viewDescription = viewDescription;
    this.viewDescriptionLabel = viewDescriptionLabel;
    this.viewImage1 = viewImage1;
    this.viewImage2 = viewImage2;
    this.viewOrdersLabel = viewOrdersLabel;
    this.viewOrdersTotal = viewOrdersTotal;
    this.viewProductExtIcon = viewProductExtIcon;
    this.viewProductExternal = viewProductExternal;
    this.viewReviewsCount = viewReviewsCount;
    this.viewReviewsLabel = viewReviewsLabel;
    this.viewTitle = viewTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SkeletonProductDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SkeletonProductDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.skeleton_product_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SkeletonProductDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.divider1;
      View divider1 = ViewBindings.findChildViewById(rootView, id);
      if (divider1 == null) {
        break missingId;
      }

      id = R.id.divider2;
      View divider2 = ViewBindings.findChildViewById(rootView, id);
      if (divider2 == null) {
        break missingId;
      }

      id = R.id.divider3;
      View divider3 = ViewBindings.findChildViewById(rootView, id);
      if (divider3 == null) {
        break missingId;
      }

      id = R.id.divider4;
      View divider4 = ViewBindings.findChildViewById(rootView, id);
      if (divider4 == null) {
        break missingId;
      }

      id = R.id.view_description;
      View viewDescription = ViewBindings.findChildViewById(rootView, id);
      if (viewDescription == null) {
        break missingId;
      }

      id = R.id.view_description_label;
      View viewDescriptionLabel = ViewBindings.findChildViewById(rootView, id);
      if (viewDescriptionLabel == null) {
        break missingId;
      }

      id = R.id.view_image_1;
      View viewImage1 = ViewBindings.findChildViewById(rootView, id);
      if (viewImage1 == null) {
        break missingId;
      }

      id = R.id.view_image_2;
      View viewImage2 = ViewBindings.findChildViewById(rootView, id);
      if (viewImage2 == null) {
        break missingId;
      }

      id = R.id.view_orders_label;
      View viewOrdersLabel = ViewBindings.findChildViewById(rootView, id);
      if (viewOrdersLabel == null) {
        break missingId;
      }

      id = R.id.view_orders_total;
      View viewOrdersTotal = ViewBindings.findChildViewById(rootView, id);
      if (viewOrdersTotal == null) {
        break missingId;
      }

      id = R.id.view_product_ext_icon;
      View viewProductExtIcon = ViewBindings.findChildViewById(rootView, id);
      if (viewProductExtIcon == null) {
        break missingId;
      }

      id = R.id.view_product_external;
      View viewProductExternal = ViewBindings.findChildViewById(rootView, id);
      if (viewProductExternal == null) {
        break missingId;
      }

      id = R.id.view_reviews_count;
      View viewReviewsCount = ViewBindings.findChildViewById(rootView, id);
      if (viewReviewsCount == null) {
        break missingId;
      }

      id = R.id.view_reviews_label;
      View viewReviewsLabel = ViewBindings.findChildViewById(rootView, id);
      if (viewReviewsLabel == null) {
        break missingId;
      }

      id = R.id.view_title;
      View viewTitle = ViewBindings.findChildViewById(rootView, id);
      if (viewTitle == null) {
        break missingId;
      }

      return new SkeletonProductDetailBinding((LinearLayout) rootView, divider, divider1, divider2,
          divider3, divider4, viewDescription, viewDescriptionLabel, viewImage1, viewImage2,
          viewOrdersLabel, viewOrdersTotal, viewProductExtIcon, viewProductExternal,
          viewReviewsCount, viewReviewsLabel, viewTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
