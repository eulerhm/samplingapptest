// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProductPropertyLinkViewLayoutBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final ImageView iconExternal;

  @NonNull
  public final MaterialTextView textLink;

  private ProductPropertyLinkViewLayoutBinding(@NonNull View rootView, @NonNull View divider,
      @NonNull ImageView iconExternal, @NonNull MaterialTextView textLink) {
    this.rootView = rootView;
    this.divider = divider;
    this.iconExternal = iconExternal;
    this.textLink = textLink;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static ProductPropertyLinkViewLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.product_property_link_view_layout, parent);
    return bind(parent);
  }

  @NonNull
  public static ProductPropertyLinkViewLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.iconExternal;
      ImageView iconExternal = ViewBindings.findChildViewById(rootView, id);
      if (iconExternal == null) {
        break missingId;
      }

      id = R.id.textLink;
      MaterialTextView textLink = ViewBindings.findChildViewById(rootView, id);
      if (textLink == null) {
        break missingId;
      }

      return new ProductPropertyLinkViewLayoutBinding(rootView, divider, iconExternal, textLink);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
