// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;
import org.wordpress.android.widgets.WPTextView;

public final class ThemeGridItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final LinearLayout themeActionController;

  @NonNull
  public final MaterialCardView themeGridCard;

  @NonNull
  public final RelativeLayout themeGridCardView;

  @NonNull
  public final WPTextView themeGridItemActive;

  @NonNull
  public final RelativeLayout themeGridItemDetails;

  @NonNull
  public final ImageView themeGridItemImage;

  @NonNull
  public final ImageButton themeGridItemImageButton;

  @NonNull
  public final FrameLayout themeGridItemImageLayout;

  @NonNull
  public final WPTextView themeGridItemName;

  @NonNull
  public final WPTextView themeGridItemPrice;

  @NonNull
  public final LinearLayout themeMetadata;

  private ThemeGridItemBinding(@NonNull RelativeLayout rootView, @NonNull View divider,
      @NonNull LinearLayout themeActionController, @NonNull MaterialCardView themeGridCard,
      @NonNull RelativeLayout themeGridCardView, @NonNull WPTextView themeGridItemActive,
      @NonNull RelativeLayout themeGridItemDetails, @NonNull ImageView themeGridItemImage,
      @NonNull ImageButton themeGridItemImageButton, @NonNull FrameLayout themeGridItemImageLayout,
      @NonNull WPTextView themeGridItemName, @NonNull WPTextView themeGridItemPrice,
      @NonNull LinearLayout themeMetadata) {
    this.rootView = rootView;
    this.divider = divider;
    this.themeActionController = themeActionController;
    this.themeGridCard = themeGridCard;
    this.themeGridCardView = themeGridCardView;
    this.themeGridItemActive = themeGridItemActive;
    this.themeGridItemDetails = themeGridItemDetails;
    this.themeGridItemImage = themeGridItemImage;
    this.themeGridItemImageButton = themeGridItemImageButton;
    this.themeGridItemImageLayout = themeGridItemImageLayout;
    this.themeGridItemName = themeGridItemName;
    this.themeGridItemPrice = themeGridItemPrice;
    this.themeMetadata = themeMetadata;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ThemeGridItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ThemeGridItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.theme_grid_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ThemeGridItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.theme_action_controller;
      LinearLayout themeActionController = ViewBindings.findChildViewById(rootView, id);
      if (themeActionController == null) {
        break missingId;
      }

      id = R.id.theme_grid_card;
      MaterialCardView themeGridCard = ViewBindings.findChildViewById(rootView, id);
      if (themeGridCard == null) {
        break missingId;
      }

      RelativeLayout themeGridCardView = (RelativeLayout) rootView;

      id = R.id.theme_grid_item_active;
      WPTextView themeGridItemActive = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemActive == null) {
        break missingId;
      }

      id = R.id.theme_grid_item_details;
      RelativeLayout themeGridItemDetails = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemDetails == null) {
        break missingId;
      }

      id = R.id.theme_grid_item_image;
      ImageView themeGridItemImage = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemImage == null) {
        break missingId;
      }

      id = R.id.theme_grid_item_image_button;
      ImageButton themeGridItemImageButton = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemImageButton == null) {
        break missingId;
      }

      id = R.id.theme_grid_item_image_layout;
      FrameLayout themeGridItemImageLayout = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemImageLayout == null) {
        break missingId;
      }

      id = R.id.theme_grid_item_name;
      WPTextView themeGridItemName = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemName == null) {
        break missingId;
      }

      id = R.id.theme_grid_item_price;
      WPTextView themeGridItemPrice = ViewBindings.findChildViewById(rootView, id);
      if (themeGridItemPrice == null) {
        break missingId;
      }

      id = R.id.theme_metadata;
      LinearLayout themeMetadata = ViewBindings.findChildViewById(rootView, id);
      if (themeMetadata == null) {
        break missingId;
      }

      return new ThemeGridItemBinding((RelativeLayout) rootView, divider, themeActionController,
          themeGridCard, themeGridCardView, themeGridItemActive, themeGridItemDetails,
          themeGridItemImage, themeGridItemImageButton, themeGridItemImageLayout, themeGridItemName,
          themeGridItemPrice, themeMetadata);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
