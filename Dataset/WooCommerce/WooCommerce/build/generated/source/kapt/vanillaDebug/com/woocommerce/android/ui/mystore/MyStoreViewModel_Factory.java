// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.mystore;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.mystore.domain.GetStats;
import com.woocommerce.android.ui.mystore.domain.GetTopPerformers;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyStoreViewModel_Factory implements Factory<MyStoreViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<WooCommerceStore> wooCommerceStoreProvider;

  private final Provider<GetStats> getStatsProvider;

  private final Provider<GetTopPerformers> getTopPerformersProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  private final Provider<MyStoreStatsUsageTracksEventEmitter> usageTracksEventEmitterProvider;

  public MyStoreViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<NetworkStatus> networkStatusProvider, Provider<ResourceProvider> resourceProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider, Provider<GetStats> getStatsProvider,
      Provider<GetTopPerformers> getTopPerformersProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<MyStoreStatsUsageTracksEventEmitter> usageTracksEventEmitterProvider) {
    this.savedStateProvider = savedStateProvider;
    this.networkStatusProvider = networkStatusProvider;
    this.resourceProvider = resourceProvider;
    this.wooCommerceStoreProvider = wooCommerceStoreProvider;
    this.getStatsProvider = getStatsProvider;
    this.getTopPerformersProvider = getTopPerformersProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.appPrefsWrapperProvider = appPrefsWrapperProvider;
    this.usageTracksEventEmitterProvider = usageTracksEventEmitterProvider;
  }

  @Override
  public MyStoreViewModel get() {
    return newInstance(savedStateProvider.get(), networkStatusProvider.get(), resourceProvider.get(), wooCommerceStoreProvider.get(), getStatsProvider.get(), getTopPerformersProvider.get(), currencyFormatterProvider.get(), selectedSiteProvider.get(), appPrefsWrapperProvider.get(), usageTracksEventEmitterProvider.get());
  }

  public static MyStoreViewModel_Factory create(Provider<SavedStateHandle> savedStateProvider,
      Provider<NetworkStatus> networkStatusProvider, Provider<ResourceProvider> resourceProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider, Provider<GetStats> getStatsProvider,
      Provider<GetTopPerformers> getTopPerformersProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<MyStoreStatsUsageTracksEventEmitter> usageTracksEventEmitterProvider) {
    return new MyStoreViewModel_Factory(savedStateProvider, networkStatusProvider, resourceProvider, wooCommerceStoreProvider, getStatsProvider, getTopPerformersProvider, currencyFormatterProvider, selectedSiteProvider, appPrefsWrapperProvider, usageTracksEventEmitterProvider);
  }

  public static MyStoreViewModel newInstance(SavedStateHandle savedState,
      NetworkStatus networkStatus, ResourceProvider resourceProvider,
      WooCommerceStore wooCommerceStore, GetStats getStats, GetTopPerformers getTopPerformers,
      CurrencyFormatter currencyFormatter, SelectedSite selectedSite,
      AppPrefsWrapper appPrefsWrapper,
      MyStoreStatsUsageTracksEventEmitter usageTracksEventEmitter) {
    return new MyStoreViewModel(savedState, networkStatus, resourceProvider, wooCommerceStore, getStats, getTopPerformers, currencyFormatter, selectedSite, appPrefsWrapper, usageTracksEventEmitter);
  }
}
