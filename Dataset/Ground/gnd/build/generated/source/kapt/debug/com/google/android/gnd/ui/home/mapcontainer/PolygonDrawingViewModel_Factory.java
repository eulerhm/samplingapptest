// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.ui.home.mapcontainer;

import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;
import com.google.android.gnd.system.LocationManager;
import com.google.android.gnd.system.auth.AuthenticationManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PolygonDrawingViewModel_Factory implements Factory<PolygonDrawingViewModel> {
  private final Provider<LocationManager> locationManagerProvider;

  private final Provider<AuthenticationManager> authManagerProvider;

  private final Provider<OfflineUuidGenerator> uuidGeneratorProvider;

  public PolygonDrawingViewModel_Factory(Provider<LocationManager> locationManagerProvider,
      Provider<AuthenticationManager> authManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider) {
    this.locationManagerProvider = locationManagerProvider;
    this.authManagerProvider = authManagerProvider;
    this.uuidGeneratorProvider = uuidGeneratorProvider;
  }

  @Override
  public PolygonDrawingViewModel get() {
    return newInstance(locationManagerProvider.get(), authManagerProvider.get(), uuidGeneratorProvider.get());
  }

  public static PolygonDrawingViewModel_Factory create(
      Provider<LocationManager> locationManagerProvider,
      Provider<AuthenticationManager> authManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider) {
    return new PolygonDrawingViewModel_Factory(locationManagerProvider, authManagerProvider, uuidGeneratorProvider);
  }

  public static PolygonDrawingViewModel newInstance(LocationManager locationManager,
      AuthenticationManager authManager, OfflineUuidGenerator uuidGenerator) {
    return new PolygonDrawingViewModel(locationManager, authManager, uuidGenerator);
  }
}
