// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProductItemViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final ConstraintLayout linearLayout;

  @NonNull
  public final ImageButton productBtnDelete;

  @NonNull
  public final ImageView productImage;

  @NonNull
  public final FrameLayout productImageFrame;

  @NonNull
  public final LinearLayout productInfoContainer;

  @NonNull
  public final MaterialTextView productName;

  @NonNull
  public final MaterialTextView productSku;

  @NonNull
  public final MaterialTextView productStockAndStatus;

  private ProductItemViewBinding(@NonNull ConstraintLayout rootView, @NonNull View divider,
      @NonNull ConstraintLayout linearLayout, @NonNull ImageButton productBtnDelete,
      @NonNull ImageView productImage, @NonNull FrameLayout productImageFrame,
      @NonNull LinearLayout productInfoContainer, @NonNull MaterialTextView productName,
      @NonNull MaterialTextView productSku, @NonNull MaterialTextView productStockAndStatus) {
    this.rootView = rootView;
    this.divider = divider;
    this.linearLayout = linearLayout;
    this.productBtnDelete = productBtnDelete;
    this.productImage = productImage;
    this.productImageFrame = productImageFrame;
    this.productInfoContainer = productInfoContainer;
    this.productName = productName;
    this.productSku = productSku;
    this.productStockAndStatus = productStockAndStatus;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProductItemViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProductItemViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.product_item_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProductItemViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      ConstraintLayout linearLayout = (ConstraintLayout) rootView;

      id = R.id.product_btnDelete;
      ImageButton productBtnDelete = ViewBindings.findChildViewById(rootView, id);
      if (productBtnDelete == null) {
        break missingId;
      }

      id = R.id.productImage;
      ImageView productImage = ViewBindings.findChildViewById(rootView, id);
      if (productImage == null) {
        break missingId;
      }

      id = R.id.productImageFrame;
      FrameLayout productImageFrame = ViewBindings.findChildViewById(rootView, id);
      if (productImageFrame == null) {
        break missingId;
      }

      id = R.id.productInfoContainer;
      LinearLayout productInfoContainer = ViewBindings.findChildViewById(rootView, id);
      if (productInfoContainer == null) {
        break missingId;
      }

      id = R.id.productName;
      MaterialTextView productName = ViewBindings.findChildViewById(rootView, id);
      if (productName == null) {
        break missingId;
      }

      id = R.id.productSku;
      MaterialTextView productSku = ViewBindings.findChildViewById(rootView, id);
      if (productSku == null) {
        break missingId;
      }

      id = R.id.productStockAndStatus;
      MaterialTextView productStockAndStatus = ViewBindings.findChildViewById(rootView, id);
      if (productStockAndStatus == null) {
        break missingId;
      }

      return new ProductItemViewBinding((ConstraintLayout) rootView, divider, linearLayout,
          productBtnDelete, productImage, productImageFrame, productInfoContainer, productName,
          productSku, productStockAndStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
