// Generated by Dagger (https://dagger.dev).
package com.haroldadmin.moonshot.features.search;

import com.haroldadmin.moonshotRepository.search.SearchLaunchesUseCase;
import com.haroldadmin.moonshotRepository.search.SearchLaunchpadsUseCase;
import com.haroldadmin.moonshotRepository.search.SearchRocketsUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchViewModel_AssistedFactory_Factory implements Factory<SearchViewModel_AssistedFactory> {
  private final Provider<SearchLaunchesUseCase> searchLaunchesUseCaseProvider;

  private final Provider<SearchRocketsUseCase> searchRocketsUseCaseProvider;

  private final Provider<SearchLaunchpadsUseCase> searchLaunchpadsUseCaseProvider;

  public SearchViewModel_AssistedFactory_Factory(
      Provider<SearchLaunchesUseCase> searchLaunchesUseCaseProvider,
      Provider<SearchRocketsUseCase> searchRocketsUseCaseProvider,
      Provider<SearchLaunchpadsUseCase> searchLaunchpadsUseCaseProvider) {
    this.searchLaunchesUseCaseProvider = searchLaunchesUseCaseProvider;
    this.searchRocketsUseCaseProvider = searchRocketsUseCaseProvider;
    this.searchLaunchpadsUseCaseProvider = searchLaunchpadsUseCaseProvider;
  }

  @Override
  public SearchViewModel_AssistedFactory get() {
    return newInstance(searchLaunchesUseCaseProvider, searchRocketsUseCaseProvider, searchLaunchpadsUseCaseProvider);
  }

  public static SearchViewModel_AssistedFactory_Factory create(
      Provider<SearchLaunchesUseCase> searchLaunchesUseCaseProvider,
      Provider<SearchRocketsUseCase> searchRocketsUseCaseProvider,
      Provider<SearchLaunchpadsUseCase> searchLaunchpadsUseCaseProvider) {
    return new SearchViewModel_AssistedFactory_Factory(searchLaunchesUseCaseProvider, searchRocketsUseCaseProvider, searchLaunchpadsUseCaseProvider);
  }

  public static SearchViewModel_AssistedFactory newInstance(
      Provider<SearchLaunchesUseCase> searchLaunchesUseCase,
      Provider<SearchRocketsUseCase> searchRocketsUseCase,
      Provider<SearchLaunchpadsUseCase> searchLaunchpadsUseCase) {
    return new SearchViewModel_AssistedFactory(searchLaunchesUseCase, searchRocketsUseCase, searchLaunchpadsUseCase);
  }
}
