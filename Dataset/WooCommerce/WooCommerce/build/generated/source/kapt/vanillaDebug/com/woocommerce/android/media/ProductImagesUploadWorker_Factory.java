// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.media;

import com.woocommerce.android.ui.products.ProductDetailRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductImagesUploadWorker_Factory implements Factory<ProductImagesUploadWorker> {
  private final Provider<MediaFilesRepository> mediaFilesRepositoryProvider;

  private final Provider<ProductDetailRepository> productDetailRepositoryProvider;

  private final Provider<ProductImagesServiceWrapper> productImagesServiceWrapperProvider;

  private final Provider<ProductImagesNotificationHandler> notificationHandlerProvider;

  private final Provider<CoroutineScope> appCoroutineScopeProvider;

  public ProductImagesUploadWorker_Factory(
      Provider<MediaFilesRepository> mediaFilesRepositoryProvider,
      Provider<ProductDetailRepository> productDetailRepositoryProvider,
      Provider<ProductImagesServiceWrapper> productImagesServiceWrapperProvider,
      Provider<ProductImagesNotificationHandler> notificationHandlerProvider,
      Provider<CoroutineScope> appCoroutineScopeProvider) {
    this.mediaFilesRepositoryProvider = mediaFilesRepositoryProvider;
    this.productDetailRepositoryProvider = productDetailRepositoryProvider;
    this.productImagesServiceWrapperProvider = productImagesServiceWrapperProvider;
    this.notificationHandlerProvider = notificationHandlerProvider;
    this.appCoroutineScopeProvider = appCoroutineScopeProvider;
  }

  @Override
  public ProductImagesUploadWorker get() {
    return newInstance(mediaFilesRepositoryProvider.get(), productDetailRepositoryProvider.get(), productImagesServiceWrapperProvider.get(), notificationHandlerProvider.get(), appCoroutineScopeProvider.get());
  }

  public static ProductImagesUploadWorker_Factory create(
      Provider<MediaFilesRepository> mediaFilesRepositoryProvider,
      Provider<ProductDetailRepository> productDetailRepositoryProvider,
      Provider<ProductImagesServiceWrapper> productImagesServiceWrapperProvider,
      Provider<ProductImagesNotificationHandler> notificationHandlerProvider,
      Provider<CoroutineScope> appCoroutineScopeProvider) {
    return new ProductImagesUploadWorker_Factory(mediaFilesRepositoryProvider, productDetailRepositoryProvider, productImagesServiceWrapperProvider, notificationHandlerProvider, appCoroutineScopeProvider);
  }

  public static ProductImagesUploadWorker newInstance(MediaFilesRepository mediaFilesRepository,
      ProductDetailRepository productDetailRepository,
      ProductImagesServiceWrapper productImagesServiceWrapper,
      ProductImagesNotificationHandler notificationHandler, CoroutineScope appCoroutineScope) {
    return new ProductImagesUploadWorker(mediaFilesRepository, productDetailRepository, productImagesServiceWrapper, notificationHandler, appCoroutineScope);
  }
}
