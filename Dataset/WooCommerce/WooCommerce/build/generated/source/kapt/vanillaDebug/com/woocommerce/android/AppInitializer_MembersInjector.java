// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android;

import com.automattic.android.tracks.crashlogging.CrashLogging;
import com.woocommerce.android.di.AppCoroutineScope;
import com.woocommerce.android.network.ConnectionChangeReceiver;
import com.woocommerce.android.push.RegisterDevice;
import com.woocommerce.android.push.WooNotificationBuilder;
import com.woocommerce.android.support.ZendeskHelper;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.tracker.SendTelemetry;
import com.woocommerce.android.ui.common.UserEligibilityFetcher;
import com.woocommerce.android.util.WooLogWrapper;
import com.woocommerce.android.util.crashlogging.UploadEncryptedLogs;
import com.woocommerce.android.util.encryptedlogging.ObserveEncryptedLogsUploadResult;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.logging.FluxCCrashLogger;
import org.wordpress.android.fluxc.store.AccountStore;
import org.wordpress.android.fluxc.store.SiteStore;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppInitializer_MembersInjector implements MembersInjector<AppInitializer> {
  private final Provider<CrashLogging> crashLoggingProvider;

  private final Provider<FluxCCrashLogger> fluxCCrashLoggerProvider;

  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<Dispatcher> dispatcherProvider;

  private final Provider<AccountStore> accountStoreProvider;

  private final Provider<SiteStore> siteStoreProvider;

  private final Provider<WooCommerceStore> wooCommerceStoreProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<ZendeskHelper> zendeskHelperProvider;

  private final Provider<WooNotificationBuilder> wooNotificationBuilderProvider;

  private final Provider<UserEligibilityFetcher> userEligibilityFetcherProvider;

  private final Provider<UploadEncryptedLogs> uploadEncryptedLogsProvider;

  private final Provider<ObserveEncryptedLogsUploadResult> observeEncryptedLogsUploadResultsProvider;

  private final Provider<SendTelemetry> sendTelemetryProvider;

  private final Provider<SiteObserver> siteObserverProvider;

  private final Provider<WooLogWrapper> wooLogProvider;

  private final Provider<RegisterDevice> registerDeviceProvider;

  private final Provider<ConnectionChangeReceiver> connectionReceiverProvider;

  private final Provider<AppPrefs> prefsProvider;

  private final Provider<CoroutineScope> appCoroutineScopeProvider;

  public AppInitializer_MembersInjector(Provider<CrashLogging> crashLoggingProvider,
      Provider<FluxCCrashLogger> fluxCCrashLoggerProvider,
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<Dispatcher> dispatcherProvider, Provider<AccountStore> accountStoreProvider,
      Provider<SiteStore> siteStoreProvider, Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<SelectedSite> selectedSiteProvider, Provider<NetworkStatus> networkStatusProvider,
      Provider<ZendeskHelper> zendeskHelperProvider,
      Provider<WooNotificationBuilder> wooNotificationBuilderProvider,
      Provider<UserEligibilityFetcher> userEligibilityFetcherProvider,
      Provider<UploadEncryptedLogs> uploadEncryptedLogsProvider,
      Provider<ObserveEncryptedLogsUploadResult> observeEncryptedLogsUploadResultsProvider,
      Provider<SendTelemetry> sendTelemetryProvider, Provider<SiteObserver> siteObserverProvider,
      Provider<WooLogWrapper> wooLogProvider, Provider<RegisterDevice> registerDeviceProvider,
      Provider<ConnectionChangeReceiver> connectionReceiverProvider,
      Provider<AppPrefs> prefsProvider, Provider<CoroutineScope> appCoroutineScopeProvider) {
    this.crashLoggingProvider = crashLoggingProvider;
    this.fluxCCrashLoggerProvider = fluxCCrashLoggerProvider;
    this.androidInjectorProvider = androidInjectorProvider;
    this.dispatcherProvider = dispatcherProvider;
    this.accountStoreProvider = accountStoreProvider;
    this.siteStoreProvider = siteStoreProvider;
    this.wooCommerceStoreProvider = wooCommerceStoreProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.networkStatusProvider = networkStatusProvider;
    this.zendeskHelperProvider = zendeskHelperProvider;
    this.wooNotificationBuilderProvider = wooNotificationBuilderProvider;
    this.userEligibilityFetcherProvider = userEligibilityFetcherProvider;
    this.uploadEncryptedLogsProvider = uploadEncryptedLogsProvider;
    this.observeEncryptedLogsUploadResultsProvider = observeEncryptedLogsUploadResultsProvider;
    this.sendTelemetryProvider = sendTelemetryProvider;
    this.siteObserverProvider = siteObserverProvider;
    this.wooLogProvider = wooLogProvider;
    this.registerDeviceProvider = registerDeviceProvider;
    this.connectionReceiverProvider = connectionReceiverProvider;
    this.prefsProvider = prefsProvider;
    this.appCoroutineScopeProvider = appCoroutineScopeProvider;
  }

  public static MembersInjector<AppInitializer> create(Provider<CrashLogging> crashLoggingProvider,
      Provider<FluxCCrashLogger> fluxCCrashLoggerProvider,
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<Dispatcher> dispatcherProvider, Provider<AccountStore> accountStoreProvider,
      Provider<SiteStore> siteStoreProvider, Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<SelectedSite> selectedSiteProvider, Provider<NetworkStatus> networkStatusProvider,
      Provider<ZendeskHelper> zendeskHelperProvider,
      Provider<WooNotificationBuilder> wooNotificationBuilderProvider,
      Provider<UserEligibilityFetcher> userEligibilityFetcherProvider,
      Provider<UploadEncryptedLogs> uploadEncryptedLogsProvider,
      Provider<ObserveEncryptedLogsUploadResult> observeEncryptedLogsUploadResultsProvider,
      Provider<SendTelemetry> sendTelemetryProvider, Provider<SiteObserver> siteObserverProvider,
      Provider<WooLogWrapper> wooLogProvider, Provider<RegisterDevice> registerDeviceProvider,
      Provider<ConnectionChangeReceiver> connectionReceiverProvider,
      Provider<AppPrefs> prefsProvider, Provider<CoroutineScope> appCoroutineScopeProvider) {
    return new AppInitializer_MembersInjector(crashLoggingProvider, fluxCCrashLoggerProvider, androidInjectorProvider, dispatcherProvider, accountStoreProvider, siteStoreProvider, wooCommerceStoreProvider, selectedSiteProvider, networkStatusProvider, zendeskHelperProvider, wooNotificationBuilderProvider, userEligibilityFetcherProvider, uploadEncryptedLogsProvider, observeEncryptedLogsUploadResultsProvider, sendTelemetryProvider, siteObserverProvider, wooLogProvider, registerDeviceProvider, connectionReceiverProvider, prefsProvider, appCoroutineScopeProvider);
  }

  @Override
  public void injectMembers(AppInitializer instance) {
    injectCrashLogging(instance, crashLoggingProvider.get());
    injectFluxCCrashLogger(instance, fluxCCrashLoggerProvider.get());
    injectAndroidInjector(instance, androidInjectorProvider.get());
    injectDispatcher(instance, dispatcherProvider.get());
    injectAccountStore(instance, accountStoreProvider.get());
    injectSiteStore(instance, siteStoreProvider.get());
    injectWooCommerceStore(instance, wooCommerceStoreProvider.get());
    injectSelectedSite(instance, selectedSiteProvider.get());
    injectNetworkStatus(instance, networkStatusProvider.get());
    injectZendeskHelper(instance, zendeskHelperProvider.get());
    injectWooNotificationBuilder(instance, wooNotificationBuilderProvider.get());
    injectUserEligibilityFetcher(instance, userEligibilityFetcherProvider.get());
    injectUploadEncryptedLogs(instance, uploadEncryptedLogsProvider.get());
    injectObserveEncryptedLogsUploadResults(instance, observeEncryptedLogsUploadResultsProvider.get());
    injectSendTelemetry(instance, sendTelemetryProvider.get());
    injectSiteObserver(instance, siteObserverProvider.get());
    injectWooLog(instance, wooLogProvider.get());
    injectRegisterDevice(instance, registerDeviceProvider.get());
    injectConnectionReceiver(instance, connectionReceiverProvider.get());
    injectPrefs(instance, prefsProvider.get());
    injectAppCoroutineScope(instance, appCoroutineScopeProvider.get());
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.crashLogging")
  public static void injectCrashLogging(AppInitializer instance, CrashLogging crashLogging) {
    instance.crashLogging = crashLogging;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.fluxCCrashLogger")
  public static void injectFluxCCrashLogger(AppInitializer instance,
      FluxCCrashLogger fluxCCrashLogger) {
    instance.fluxCCrashLogger = fluxCCrashLogger;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.androidInjector")
  public static void injectAndroidInjector(AppInitializer instance,
      DispatchingAndroidInjector<Object> androidInjector) {
    instance.androidInjector = androidInjector;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.dispatcher")
  public static void injectDispatcher(AppInitializer instance, Dispatcher dispatcher) {
    instance.dispatcher = dispatcher;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.accountStore")
  public static void injectAccountStore(AppInitializer instance, AccountStore accountStore) {
    instance.accountStore = accountStore;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.siteStore")
  public static void injectSiteStore(AppInitializer instance, SiteStore siteStore) {
    instance.siteStore = siteStore;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.wooCommerceStore")
  public static void injectWooCommerceStore(AppInitializer instance,
      WooCommerceStore wooCommerceStore) {
    instance.wooCommerceStore = wooCommerceStore;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.selectedSite")
  public static void injectSelectedSite(AppInitializer instance, SelectedSite selectedSite) {
    instance.selectedSite = selectedSite;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.networkStatus")
  public static void injectNetworkStatus(AppInitializer instance, NetworkStatus networkStatus) {
    instance.networkStatus = networkStatus;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.zendeskHelper")
  public static void injectZendeskHelper(AppInitializer instance, ZendeskHelper zendeskHelper) {
    instance.zendeskHelper = zendeskHelper;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.wooNotificationBuilder")
  public static void injectWooNotificationBuilder(AppInitializer instance,
      WooNotificationBuilder wooNotificationBuilder) {
    instance.wooNotificationBuilder = wooNotificationBuilder;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.userEligibilityFetcher")
  public static void injectUserEligibilityFetcher(AppInitializer instance,
      UserEligibilityFetcher userEligibilityFetcher) {
    instance.userEligibilityFetcher = userEligibilityFetcher;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.uploadEncryptedLogs")
  public static void injectUploadEncryptedLogs(AppInitializer instance,
      UploadEncryptedLogs uploadEncryptedLogs) {
    instance.uploadEncryptedLogs = uploadEncryptedLogs;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.observeEncryptedLogsUploadResults")
  public static void injectObserveEncryptedLogsUploadResults(AppInitializer instance,
      ObserveEncryptedLogsUploadResult observeEncryptedLogsUploadResults) {
    instance.observeEncryptedLogsUploadResults = observeEncryptedLogsUploadResults;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.sendTelemetry")
  public static void injectSendTelemetry(AppInitializer instance, SendTelemetry sendTelemetry) {
    instance.sendTelemetry = sendTelemetry;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.siteObserver")
  public static void injectSiteObserver(AppInitializer instance, SiteObserver siteObserver) {
    instance.siteObserver = siteObserver;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.wooLog")
  public static void injectWooLog(AppInitializer instance, WooLogWrapper wooLog) {
    instance.wooLog = wooLog;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.registerDevice")
  public static void injectRegisterDevice(AppInitializer instance, RegisterDevice registerDevice) {
    instance.registerDevice = registerDevice;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.connectionReceiver")
  public static void injectConnectionReceiver(AppInitializer instance,
      ConnectionChangeReceiver connectionReceiver) {
    instance.connectionReceiver = connectionReceiver;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.prefs")
  public static void injectPrefs(AppInitializer instance, AppPrefs prefs) {
    instance.prefs = prefs;
  }

  @InjectedFieldSignature("com.woocommerce.android.AppInitializer.appCoroutineScope")
  @AppCoroutineScope
  public static void injectAppCoroutineScope(AppInitializer instance,
      CoroutineScope appCoroutineScope) {
    instance.appCoroutineScope = appCoroutineScope;
  }
}
