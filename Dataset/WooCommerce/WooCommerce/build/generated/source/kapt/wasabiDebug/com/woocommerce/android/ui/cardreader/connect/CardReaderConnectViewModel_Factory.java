// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.cardreader.connect;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.cardreader.CardReaderManager;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.cardreader.CardReaderTracker;
import com.woocommerce.android.ui.cardreader.CardReaderTrackingInfoKeeper;
import com.woocommerce.android.util.CoroutineDispatchers;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CardReaderConnectViewModel_Factory implements Factory<CardReaderConnectViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<CardReaderTracker> trackerProvider;

  private final Provider<AppPrefsWrapper> appPrefsProvider;

  private final Provider<CardReaderLocationRepository> locationRepositoryProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<CardReaderManager> cardReaderManagerProvider;

  private final Provider<CardReaderTrackingInfoKeeper> cardReaderTrackingInfoKeeperProvider;

  public CardReaderConnectViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<CardReaderTracker> trackerProvider, Provider<AppPrefsWrapper> appPrefsProvider,
      Provider<CardReaderLocationRepository> locationRepositoryProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<CardReaderManager> cardReaderManagerProvider,
      Provider<CardReaderTrackingInfoKeeper> cardReaderTrackingInfoKeeperProvider) {
    this.savedStateProvider = savedStateProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.trackerProvider = trackerProvider;
    this.appPrefsProvider = appPrefsProvider;
    this.locationRepositoryProvider = locationRepositoryProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.cardReaderManagerProvider = cardReaderManagerProvider;
    this.cardReaderTrackingInfoKeeperProvider = cardReaderTrackingInfoKeeperProvider;
  }

  @Override
  public CardReaderConnectViewModel get() {
    return newInstance(savedStateProvider.get(), dispatchersProvider.get(), trackerProvider.get(), appPrefsProvider.get(), locationRepositoryProvider.get(), selectedSiteProvider.get(), cardReaderManagerProvider.get(), cardReaderTrackingInfoKeeperProvider.get());
  }

  public static CardReaderConnectViewModel_Factory create(
      Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<CardReaderTracker> trackerProvider, Provider<AppPrefsWrapper> appPrefsProvider,
      Provider<CardReaderLocationRepository> locationRepositoryProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<CardReaderManager> cardReaderManagerProvider,
      Provider<CardReaderTrackingInfoKeeper> cardReaderTrackingInfoKeeperProvider) {
    return new CardReaderConnectViewModel_Factory(savedStateProvider, dispatchersProvider, trackerProvider, appPrefsProvider, locationRepositoryProvider, selectedSiteProvider, cardReaderManagerProvider, cardReaderTrackingInfoKeeperProvider);
  }

  public static CardReaderConnectViewModel newInstance(SavedStateHandle savedState,
      CoroutineDispatchers dispatchers, CardReaderTracker tracker, AppPrefsWrapper appPrefs,
      CardReaderLocationRepository locationRepository, SelectedSite selectedSite,
      CardReaderManager cardReaderManager,
      CardReaderTrackingInfoKeeper cardReaderTrackingInfoKeeper) {
    return new CardReaderConnectViewModel(savedState, dispatchers, tracker, appPrefs, locationRepository, selectedSite, cardReaderManager, cardReaderTrackingInfoKeeper);
  }
}
