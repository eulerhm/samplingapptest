// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.media;

import android.content.Context;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.util.CoroutineDispatchers;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.store.MediaStore;
import org.wordpress.android.mediapicker.MediaPickerUtils;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MediaFilesRepository_Factory implements Factory<MediaFilesRepository> {
  private final Provider<Dispatcher> dispatcherProvider;

  private final Provider<Context> contextProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<MediaStore> mediaStoreProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<MediaPickerUtils> mediaPickerUtilsProvider;

  public MediaFilesRepository_Factory(Provider<Dispatcher> dispatcherProvider,
      Provider<Context> contextProvider, Provider<SelectedSite> selectedSiteProvider,
      Provider<MediaStore> mediaStoreProvider, Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<MediaPickerUtils> mediaPickerUtilsProvider) {
    this.dispatcherProvider = dispatcherProvider;
    this.contextProvider = contextProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.mediaStoreProvider = mediaStoreProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.resourceProvider = resourceProvider;
    this.mediaPickerUtilsProvider = mediaPickerUtilsProvider;
  }

  @Override
  public MediaFilesRepository get() {
    return newInstance(dispatcherProvider.get(), contextProvider.get(), selectedSiteProvider.get(), mediaStoreProvider.get(), dispatchersProvider.get(), resourceProvider.get(), mediaPickerUtilsProvider.get());
  }

  public static MediaFilesRepository_Factory create(Provider<Dispatcher> dispatcherProvider,
      Provider<Context> contextProvider, Provider<SelectedSite> selectedSiteProvider,
      Provider<MediaStore> mediaStoreProvider, Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<MediaPickerUtils> mediaPickerUtilsProvider) {
    return new MediaFilesRepository_Factory(dispatcherProvider, contextProvider, selectedSiteProvider, mediaStoreProvider, dispatchersProvider, resourceProvider, mediaPickerUtilsProvider);
  }

  public static MediaFilesRepository newInstance(Dispatcher dispatcher, Context context,
      SelectedSite selectedSite, MediaStore mediaStore, CoroutineDispatchers dispatchers,
      ResourceProvider resourceProvider, MediaPickerUtils mediaPickerUtils) {
    return new MediaFilesRepository(dispatcher, context, selectedSite, mediaStore, dispatchers, resourceProvider, mediaPickerUtils);
  }
}
