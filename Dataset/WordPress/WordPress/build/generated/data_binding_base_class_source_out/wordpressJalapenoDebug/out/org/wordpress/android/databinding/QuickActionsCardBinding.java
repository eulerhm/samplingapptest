// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;
import org.wordpress.android.widgets.WPTextView;

public final class QuickActionsCardBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton quickActionMediaButton;

  @NonNull
  public final WPTextView quickActionMediaLabel;

  @NonNull
  public final FloatingActionButton quickActionPagesButton;

  @NonNull
  public final WPTextView quickActionPagesLabel;

  @NonNull
  public final FloatingActionButton quickActionPostsButton;

  @NonNull
  public final WPTextView quickActionPostsLabel;

  @NonNull
  public final FloatingActionButton quickActionStatsButton;

  @NonNull
  public final ConstraintLayout quickActionsContainer;

  @NonNull
  public final WPTextView quickActionsStatsLabel;

  private QuickActionsCardBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton quickActionMediaButton,
      @NonNull WPTextView quickActionMediaLabel,
      @NonNull FloatingActionButton quickActionPagesButton,
      @NonNull WPTextView quickActionPagesLabel,
      @NonNull FloatingActionButton quickActionPostsButton,
      @NonNull WPTextView quickActionPostsLabel,
      @NonNull FloatingActionButton quickActionStatsButton,
      @NonNull ConstraintLayout quickActionsContainer, @NonNull WPTextView quickActionsStatsLabel) {
    this.rootView = rootView;
    this.quickActionMediaButton = quickActionMediaButton;
    this.quickActionMediaLabel = quickActionMediaLabel;
    this.quickActionPagesButton = quickActionPagesButton;
    this.quickActionPagesLabel = quickActionPagesLabel;
    this.quickActionPostsButton = quickActionPostsButton;
    this.quickActionPostsLabel = quickActionPostsLabel;
    this.quickActionStatsButton = quickActionStatsButton;
    this.quickActionsContainer = quickActionsContainer;
    this.quickActionsStatsLabel = quickActionsStatsLabel;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static QuickActionsCardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static QuickActionsCardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.quick_actions_card, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static QuickActionsCardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.quick_action_media_button;
      FloatingActionButton quickActionMediaButton = ViewBindings.findChildViewById(rootView, id);
      if (quickActionMediaButton == null) {
        break missingId;
      }

      id = R.id.quick_action_media_label;
      WPTextView quickActionMediaLabel = ViewBindings.findChildViewById(rootView, id);
      if (quickActionMediaLabel == null) {
        break missingId;
      }

      id = R.id.quick_action_pages_button;
      FloatingActionButton quickActionPagesButton = ViewBindings.findChildViewById(rootView, id);
      if (quickActionPagesButton == null) {
        break missingId;
      }

      id = R.id.quick_action_pages_label;
      WPTextView quickActionPagesLabel = ViewBindings.findChildViewById(rootView, id);
      if (quickActionPagesLabel == null) {
        break missingId;
      }

      id = R.id.quick_action_posts_button;
      FloatingActionButton quickActionPostsButton = ViewBindings.findChildViewById(rootView, id);
      if (quickActionPostsButton == null) {
        break missingId;
      }

      id = R.id.quick_action_posts_label;
      WPTextView quickActionPostsLabel = ViewBindings.findChildViewById(rootView, id);
      if (quickActionPostsLabel == null) {
        break missingId;
      }

      id = R.id.quick_action_stats_button;
      FloatingActionButton quickActionStatsButton = ViewBindings.findChildViewById(rootView, id);
      if (quickActionStatsButton == null) {
        break missingId;
      }

      ConstraintLayout quickActionsContainer = (ConstraintLayout) rootView;

      id = R.id.quick_actions_stats_label;
      WPTextView quickActionsStatsLabel = ViewBindings.findChildViewById(rootView, id);
      if (quickActionsStatsLabel == null) {
        break missingId;
      }

      return new QuickActionsCardBinding((ConstraintLayout) rootView, quickActionMediaButton,
          quickActionMediaLabel, quickActionPagesButton, quickActionPagesLabel,
          quickActionPostsButton, quickActionPostsLabel, quickActionStatsButton,
          quickActionsContainer, quickActionsStatsLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
