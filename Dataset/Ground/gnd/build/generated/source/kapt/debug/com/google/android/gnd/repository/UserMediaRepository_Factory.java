// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.repository;

import android.content.Context;
import com.google.android.gnd.persistence.remote.RemoteStorageManager;
import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserMediaRepository_Factory implements Factory<UserMediaRepository> {
  private final Provider<Context> contextProvider;

  private final Provider<RemoteStorageManager> remoteStorageManagerProvider;

  private final Provider<OfflineUuidGenerator> uuidGeneratorProvider;

  public UserMediaRepository_Factory(Provider<Context> contextProvider,
      Provider<RemoteStorageManager> remoteStorageManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider) {
    this.contextProvider = contextProvider;
    this.remoteStorageManagerProvider = remoteStorageManagerProvider;
    this.uuidGeneratorProvider = uuidGeneratorProvider;
  }

  @Override
  public UserMediaRepository get() {
    return newInstance(contextProvider.get(), remoteStorageManagerProvider.get(), uuidGeneratorProvider.get());
  }

  public static UserMediaRepository_Factory create(Provider<Context> contextProvider,
      Provider<RemoteStorageManager> remoteStorageManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider) {
    return new UserMediaRepository_Factory(contextProvider, remoteStorageManagerProvider, uuidGeneratorProvider);
  }

  public static UserMediaRepository newInstance(Context context,
      RemoteStorageManager remoteStorageManager, OfflineUuidGenerator uuidGenerator) {
    return new UserMediaRepository(context, remoteStorageManager, uuidGenerator);
  }
}
