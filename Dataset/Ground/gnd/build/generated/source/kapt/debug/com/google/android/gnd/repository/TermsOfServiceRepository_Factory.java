// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.repository;

import com.google.android.gnd.persistence.local.LocalValueStore;
import com.google.android.gnd.persistence.remote.RemoteDataStore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TermsOfServiceRepository_Factory implements Factory<TermsOfServiceRepository> {
  private final Provider<RemoteDataStore> remoteDataStoreProvider;

  private final Provider<LocalValueStore> localValueStoreProvider;

  public TermsOfServiceRepository_Factory(Provider<RemoteDataStore> remoteDataStoreProvider,
      Provider<LocalValueStore> localValueStoreProvider) {
    this.remoteDataStoreProvider = remoteDataStoreProvider;
    this.localValueStoreProvider = localValueStoreProvider;
  }

  @Override
  public TermsOfServiceRepository get() {
    return newInstance(remoteDataStoreProvider.get(), localValueStoreProvider.get());
  }

  public static TermsOfServiceRepository_Factory create(
      Provider<RemoteDataStore> remoteDataStoreProvider,
      Provider<LocalValueStore> localValueStoreProvider) {
    return new TermsOfServiceRepository_Factory(remoteDataStoreProvider, localValueStoreProvider);
  }

  public static TermsOfServiceRepository newInstance(RemoteDataStore remoteDataStore,
      LocalValueStore localValueStore) {
    return new TermsOfServiceRepository(remoteDataStore, localValueStore);
  }
}
