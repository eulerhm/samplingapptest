// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.refunds;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.model.OrderMapper;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.products.addons.AddonRepository;
import com.woocommerce.android.util.CoroutineDispatchers;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.store.WCOrderStore;
import org.wordpress.android.fluxc.store.WCRefundStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RefundDetailViewModel_Factory implements Factory<RefundDetailViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<WCOrderStore> orderStoreProvider;

  private final Provider<CoroutineDispatchers> coroutineDispatchersProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<AddonRepository> addonsRepositoryProvider;

  private final Provider<WCRefundStore> refundStoreProvider;

  private final Provider<OrderMapper> orderMapperProvider;

  public RefundDetailViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<WCOrderStore> orderStoreProvider,
      Provider<CoroutineDispatchers> coroutineDispatchersProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<AddonRepository> addonsRepositoryProvider,
      Provider<WCRefundStore> refundStoreProvider, Provider<OrderMapper> orderMapperProvider) {
    this.savedStateProvider = savedStateProvider;
    this.orderStoreProvider = orderStoreProvider;
    this.coroutineDispatchersProvider = coroutineDispatchersProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.resourceProvider = resourceProvider;
    this.addonsRepositoryProvider = addonsRepositoryProvider;
    this.refundStoreProvider = refundStoreProvider;
    this.orderMapperProvider = orderMapperProvider;
  }

  @Override
  public RefundDetailViewModel get() {
    return newInstance(savedStateProvider.get(), orderStoreProvider.get(), coroutineDispatchersProvider.get(), selectedSiteProvider.get(), currencyFormatterProvider.get(), resourceProvider.get(), addonsRepositoryProvider.get(), refundStoreProvider.get(), orderMapperProvider.get());
  }

  public static RefundDetailViewModel_Factory create(Provider<SavedStateHandle> savedStateProvider,
      Provider<WCOrderStore> orderStoreProvider,
      Provider<CoroutineDispatchers> coroutineDispatchersProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<AddonRepository> addonsRepositoryProvider,
      Provider<WCRefundStore> refundStoreProvider, Provider<OrderMapper> orderMapperProvider) {
    return new RefundDetailViewModel_Factory(savedStateProvider, orderStoreProvider, coroutineDispatchersProvider, selectedSiteProvider, currencyFormatterProvider, resourceProvider, addonsRepositoryProvider, refundStoreProvider, orderMapperProvider);
  }

  public static RefundDetailViewModel newInstance(SavedStateHandle savedState,
      WCOrderStore orderStore, CoroutineDispatchers coroutineDispatchers, SelectedSite selectedSite,
      CurrencyFormatter currencyFormatter, ResourceProvider resourceProvider,
      AddonRepository addonsRepository, WCRefundStore refundStore, OrderMapper orderMapper) {
    return new RefundDetailViewModel(savedState, orderStore, coroutineDispatchers, selectedSite, currencyFormatter, resourceProvider, addonsRepository, refundStore, orderMapper);
  }
}
