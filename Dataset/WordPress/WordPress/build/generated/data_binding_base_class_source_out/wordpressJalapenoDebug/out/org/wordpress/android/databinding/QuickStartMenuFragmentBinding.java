// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class QuickStartMenuFragmentBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout hideAction;

  @NonNull
  public final LinearLayout pinAction;

  @NonNull
  public final TextView quickStartPinText;

  @NonNull
  public final LinearLayout removeAction;

  private QuickStartMenuFragmentBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout hideAction, @NonNull LinearLayout pinAction,
      @NonNull TextView quickStartPinText, @NonNull LinearLayout removeAction) {
    this.rootView = rootView;
    this.hideAction = hideAction;
    this.pinAction = pinAction;
    this.quickStartPinText = quickStartPinText;
    this.removeAction = removeAction;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static QuickStartMenuFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static QuickStartMenuFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.quick_start_menu_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static QuickStartMenuFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.hide_action;
      LinearLayout hideAction = ViewBindings.findChildViewById(rootView, id);
      if (hideAction == null) {
        break missingId;
      }

      id = R.id.pin_action;
      LinearLayout pinAction = ViewBindings.findChildViewById(rootView, id);
      if (pinAction == null) {
        break missingId;
      }

      id = R.id.quick_start_pin_text;
      TextView quickStartPinText = ViewBindings.findChildViewById(rootView, id);
      if (quickStartPinText == null) {
        break missingId;
      }

      id = R.id.remove_action;
      LinearLayout removeAction = ViewBindings.findChildViewById(rootView, id);
      if (removeAction == null) {
        break missingId;
      }

      return new QuickStartMenuFragmentBinding((LinearLayout) rootView, hideAction, pinAction,
          quickStartPinText, removeAction);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
