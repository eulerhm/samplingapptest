// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import com.woocommerce.android.ui.sitepicker.views.LoginNoStoresView;
import com.woocommerce.android.ui.sitepicker.views.LoginUserInfoView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSitePickerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageButton buttonHelp;

  @NonNull
  public final ViewLoginEpilogueButtonBarBinding loginEpilogueButtonBar;

  @NonNull
  public final LoginUserInfoView loginUserInfo;

  @NonNull
  public final LoginNoStoresView noStoresView;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final MaterialTextView siteListLabel;

  @NonNull
  public final ConstraintLayout sitePickerRoot;

  @NonNull
  public final RecyclerView sitesRecycler;

  private FragmentSitePickerBinding(@NonNull LinearLayout rootView, @NonNull ImageButton buttonHelp,
      @NonNull ViewLoginEpilogueButtonBarBinding loginEpilogueButtonBar,
      @NonNull LoginUserInfoView loginUserInfo, @NonNull LoginNoStoresView noStoresView,
      @NonNull ProgressBar progressBar, @NonNull MaterialTextView siteListLabel,
      @NonNull ConstraintLayout sitePickerRoot, @NonNull RecyclerView sitesRecycler) {
    this.rootView = rootView;
    this.buttonHelp = buttonHelp;
    this.loginEpilogueButtonBar = loginEpilogueButtonBar;
    this.loginUserInfo = loginUserInfo;
    this.noStoresView = noStoresView;
    this.progressBar = progressBar;
    this.siteListLabel = siteListLabel;
    this.sitePickerRoot = sitePickerRoot;
    this.sitesRecycler = sitesRecycler;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSitePickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSitePickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_site_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSitePickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_help;
      ImageButton buttonHelp = ViewBindings.findChildViewById(rootView, id);
      if (buttonHelp == null) {
        break missingId;
      }

      id = R.id.login_epilogue_button_bar;
      View loginEpilogueButtonBar = ViewBindings.findChildViewById(rootView, id);
      if (loginEpilogueButtonBar == null) {
        break missingId;
      }
      ViewLoginEpilogueButtonBarBinding binding_loginEpilogueButtonBar = ViewLoginEpilogueButtonBarBinding.bind(loginEpilogueButtonBar);

      id = R.id.login_user_info;
      LoginUserInfoView loginUserInfo = ViewBindings.findChildViewById(rootView, id);
      if (loginUserInfo == null) {
        break missingId;
      }

      id = R.id.no_stores_view;
      LoginNoStoresView noStoresView = ViewBindings.findChildViewById(rootView, id);
      if (noStoresView == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.site_list_label;
      MaterialTextView siteListLabel = ViewBindings.findChildViewById(rootView, id);
      if (siteListLabel == null) {
        break missingId;
      }

      id = R.id.site_picker_root;
      ConstraintLayout sitePickerRoot = ViewBindings.findChildViewById(rootView, id);
      if (sitePickerRoot == null) {
        break missingId;
      }

      id = R.id.sites_recycler;
      RecyclerView sitesRecycler = ViewBindings.findChildViewById(rootView, id);
      if (sitesRecycler == null) {
        break missingId;
      }

      return new FragmentSitePickerBinding((LinearLayout) rootView, buttonHelp,
          binding_loginEpilogueButtonBar, loginUserInfo, noStoresView, progressBar, siteListLabel,
          sitePickerRoot, sitesRecycler);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
