// Generated by Dagger (https://dagger.dev).
package org.owntracks.android.services;

import android.content.Context;
import androidx.test.espresso.idling.CountingIdlingResource;
import dagger.Lazy;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.greenrobot.eventbus.EventBus;
import org.owntracks.android.data.repos.ContactsRepo;
import org.owntracks.android.data.repos.WaypointsRepo;
import org.owntracks.android.services.worker.Scheduler;
import org.owntracks.android.support.Parser;
import org.owntracks.android.support.Preferences;
import org.owntracks.android.support.RunThingsOnOtherThreads;
import org.owntracks.android.support.ServiceBridge;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MessageProcessor_Factory implements Factory<MessageProcessor> {
  private final Provider<Context> applicationContextProvider;

  private final Provider<EventBus> eventBusProvider;

  private final Provider<ContactsRepo> contactsRepoProvider;

  private final Provider<Preferences> preferencesProvider;

  private final Provider<WaypointsRepo> waypointsRepoProvider;

  private final Provider<Parser> parserProvider;

  private final Provider<Scheduler> schedulerProvider;

  private final Provider<ServiceBridge> serviceBridgeProvider;

  private final Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider;

  private final Provider<LocationProcessor> locationProcessorLazyProvider;

  private final Provider<CountingIdlingResource> outgoingQueueIdlingResourceProvider;

  public MessageProcessor_Factory(Provider<Context> applicationContextProvider,
      Provider<EventBus> eventBusProvider, Provider<ContactsRepo> contactsRepoProvider,
      Provider<Preferences> preferencesProvider, Provider<WaypointsRepo> waypointsRepoProvider,
      Provider<Parser> parserProvider, Provider<Scheduler> schedulerProvider,
      Provider<ServiceBridge> serviceBridgeProvider,
      Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider,
      Provider<LocationProcessor> locationProcessorLazyProvider,
      Provider<CountingIdlingResource> outgoingQueueIdlingResourceProvider) {
    this.applicationContextProvider = applicationContextProvider;
    this.eventBusProvider = eventBusProvider;
    this.contactsRepoProvider = contactsRepoProvider;
    this.preferencesProvider = preferencesProvider;
    this.waypointsRepoProvider = waypointsRepoProvider;
    this.parserProvider = parserProvider;
    this.schedulerProvider = schedulerProvider;
    this.serviceBridgeProvider = serviceBridgeProvider;
    this.runThingsOnOtherThreadsProvider = runThingsOnOtherThreadsProvider;
    this.locationProcessorLazyProvider = locationProcessorLazyProvider;
    this.outgoingQueueIdlingResourceProvider = outgoingQueueIdlingResourceProvider;
  }

  @Override
  public MessageProcessor get() {
    return newInstance(applicationContextProvider.get(), eventBusProvider.get(), contactsRepoProvider.get(), preferencesProvider.get(), waypointsRepoProvider.get(), parserProvider.get(), schedulerProvider.get(), serviceBridgeProvider.get(), runThingsOnOtherThreadsProvider.get(), DoubleCheck.lazy(locationProcessorLazyProvider), outgoingQueueIdlingResourceProvider.get());
  }

  public static MessageProcessor_Factory create(Provider<Context> applicationContextProvider,
      Provider<EventBus> eventBusProvider, Provider<ContactsRepo> contactsRepoProvider,
      Provider<Preferences> preferencesProvider, Provider<WaypointsRepo> waypointsRepoProvider,
      Provider<Parser> parserProvider, Provider<Scheduler> schedulerProvider,
      Provider<ServiceBridge> serviceBridgeProvider,
      Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider,
      Provider<LocationProcessor> locationProcessorLazyProvider,
      Provider<CountingIdlingResource> outgoingQueueIdlingResourceProvider) {
    return new MessageProcessor_Factory(applicationContextProvider, eventBusProvider, contactsRepoProvider, preferencesProvider, waypointsRepoProvider, parserProvider, schedulerProvider, serviceBridgeProvider, runThingsOnOtherThreadsProvider, locationProcessorLazyProvider, outgoingQueueIdlingResourceProvider);
  }

  public static MessageProcessor newInstance(Context applicationContext, EventBus eventBus,
      ContactsRepo contactsRepo, Preferences preferences, WaypointsRepo waypointsRepo,
      Parser parser, Scheduler scheduler, ServiceBridge serviceBridge,
      RunThingsOnOtherThreads runThingsOnOtherThreads,
      Lazy<LocationProcessor> locationProcessorLazy,
      CountingIdlingResource outgoingQueueIdlingResource) {
    return new MessageProcessor(applicationContext, eventBus, contactsRepo, preferences, waypointsRepo, parser, scheduler, serviceBridge, runThingsOnOtherThreads, locationProcessorLazy, outgoingQueueIdlingResource);
  }
}
