// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewStub;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class ReaderBlogSectionViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout authorAndSiteImageryContainer;

  @NonNull
  public final ImageView authorsAvatar;

  @NonNull
  public final MaterialTextView dotSeparator;

  @NonNull
  public final ViewStub dynamicCenterPoint;

  @NonNull
  public final ImageView imageAvatarOrBlavatar;

  @NonNull
  public final MaterialTextView textAuthorAndBlogName;

  @NonNull
  public final MaterialTextView textBlogUrl;

  @NonNull
  public final MaterialTextView textDateline;

  private ReaderBlogSectionViewBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout authorAndSiteImageryContainer, @NonNull ImageView authorsAvatar,
      @NonNull MaterialTextView dotSeparator, @NonNull ViewStub dynamicCenterPoint,
      @NonNull ImageView imageAvatarOrBlavatar, @NonNull MaterialTextView textAuthorAndBlogName,
      @NonNull MaterialTextView textBlogUrl, @NonNull MaterialTextView textDateline) {
    this.rootView = rootView;
    this.authorAndSiteImageryContainer = authorAndSiteImageryContainer;
    this.authorsAvatar = authorsAvatar;
    this.dotSeparator = dotSeparator;
    this.dynamicCenterPoint = dynamicCenterPoint;
    this.imageAvatarOrBlavatar = imageAvatarOrBlavatar;
    this.textAuthorAndBlogName = textAuthorAndBlogName;
    this.textBlogUrl = textBlogUrl;
    this.textDateline = textDateline;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ReaderBlogSectionViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ReaderBlogSectionViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.reader_blog_section_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ReaderBlogSectionViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.author_and_site_imagery_container;
      ConstraintLayout authorAndSiteImageryContainer = ViewBindings.findChildViewById(rootView, id);
      if (authorAndSiteImageryContainer == null) {
        break missingId;
      }

      id = R.id.authors_avatar;
      ImageView authorsAvatar = ViewBindings.findChildViewById(rootView, id);
      if (authorsAvatar == null) {
        break missingId;
      }

      id = R.id.dot_separator;
      MaterialTextView dotSeparator = ViewBindings.findChildViewById(rootView, id);
      if (dotSeparator == null) {
        break missingId;
      }

      id = R.id.dynamic_center_point;
      ViewStub dynamicCenterPoint = ViewBindings.findChildViewById(rootView, id);
      if (dynamicCenterPoint == null) {
        break missingId;
      }

      id = R.id.image_avatar_or_blavatar;
      ImageView imageAvatarOrBlavatar = ViewBindings.findChildViewById(rootView, id);
      if (imageAvatarOrBlavatar == null) {
        break missingId;
      }

      id = R.id.text_author_and_blog_name;
      MaterialTextView textAuthorAndBlogName = ViewBindings.findChildViewById(rootView, id);
      if (textAuthorAndBlogName == null) {
        break missingId;
      }

      id = R.id.text_blog_url;
      MaterialTextView textBlogUrl = ViewBindings.findChildViewById(rootView, id);
      if (textBlogUrl == null) {
        break missingId;
      }

      id = R.id.text_dateline;
      MaterialTextView textDateline = ViewBindings.findChildViewById(rootView, id);
      if (textDateline == null) {
        break missingId;
      }

      return new ReaderBlogSectionViewBinding((ConstraintLayout) rootView,
          authorAndSiteImageryContainer, authorsAvatar, dotSeparator, dynamicCenterPoint,
          imageAvatarOrBlavatar, textAuthorAndBlogName, textBlogUrl, textDateline);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
