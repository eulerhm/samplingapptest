// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.ui.home.mapcontainer;

import android.content.res.Resources;
import com.google.android.gnd.repository.FeatureRepository;
import com.google.android.gnd.repository.OfflineAreaRepository;
import com.google.android.gnd.repository.SurveyRepository;
import com.google.android.gnd.system.LocationManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MapContainerViewModel_Factory implements Factory<MapContainerViewModel> {
  private final Provider<Resources> resourcesProvider;

  private final Provider<SurveyRepository> surveyRepositoryProvider;

  private final Provider<FeatureRepository> featureRepositoryProvider;

  private final Provider<LocationManager> locationManagerProvider;

  private final Provider<OfflineAreaRepository> offlineAreaRepositoryProvider;

  public MapContainerViewModel_Factory(Provider<Resources> resourcesProvider,
      Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<FeatureRepository> featureRepositoryProvider,
      Provider<LocationManager> locationManagerProvider,
      Provider<OfflineAreaRepository> offlineAreaRepositoryProvider) {
    this.resourcesProvider = resourcesProvider;
    this.surveyRepositoryProvider = surveyRepositoryProvider;
    this.featureRepositoryProvider = featureRepositoryProvider;
    this.locationManagerProvider = locationManagerProvider;
    this.offlineAreaRepositoryProvider = offlineAreaRepositoryProvider;
  }

  @Override
  public MapContainerViewModel get() {
    return newInstance(resourcesProvider.get(), surveyRepositoryProvider.get(), featureRepositoryProvider.get(), locationManagerProvider.get(), offlineAreaRepositoryProvider.get());
  }

  public static MapContainerViewModel_Factory create(Provider<Resources> resourcesProvider,
      Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<FeatureRepository> featureRepositoryProvider,
      Provider<LocationManager> locationManagerProvider,
      Provider<OfflineAreaRepository> offlineAreaRepositoryProvider) {
    return new MapContainerViewModel_Factory(resourcesProvider, surveyRepositoryProvider, featureRepositoryProvider, locationManagerProvider, offlineAreaRepositoryProvider);
  }

  public static MapContainerViewModel newInstance(Resources resources,
      SurveyRepository surveyRepository, FeatureRepository featureRepository,
      LocationManager locationManager, OfflineAreaRepository offlineAreaRepository) {
    return new MapContainerViewModel(resources, surveyRepository, featureRepository, locationManager, offlineAreaRepository);
  }
}
