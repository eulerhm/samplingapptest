// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.repository;

import com.google.android.gnd.persistence.local.LocalDataStore;
import com.google.android.gnd.persistence.local.LocalValueStore;
import com.google.android.gnd.persistence.remote.RemoteDataStore;
import com.google.android.gnd.persistence.sync.DataSyncWorkManager;
import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;
import com.google.android.gnd.system.auth.AuthenticationManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FeatureRepository_Factory implements Factory<FeatureRepository> {
  private final Provider<LocalDataStore> localDataStoreProvider;

  private final Provider<LocalValueStore> localValueStoreProvider;

  private final Provider<RemoteDataStore> remoteDataStoreProvider;

  private final Provider<SurveyRepository> surveyRepositoryProvider;

  private final Provider<DataSyncWorkManager> dataSyncWorkManagerProvider;

  private final Provider<AuthenticationManager> authManagerProvider;

  private final Provider<OfflineUuidGenerator> uuidGeneratorProvider;

  public FeatureRepository_Factory(Provider<LocalDataStore> localDataStoreProvider,
      Provider<LocalValueStore> localValueStoreProvider,
      Provider<RemoteDataStore> remoteDataStoreProvider,
      Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<DataSyncWorkManager> dataSyncWorkManagerProvider,
      Provider<AuthenticationManager> authManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider) {
    this.localDataStoreProvider = localDataStoreProvider;
    this.localValueStoreProvider = localValueStoreProvider;
    this.remoteDataStoreProvider = remoteDataStoreProvider;
    this.surveyRepositoryProvider = surveyRepositoryProvider;
    this.dataSyncWorkManagerProvider = dataSyncWorkManagerProvider;
    this.authManagerProvider = authManagerProvider;
    this.uuidGeneratorProvider = uuidGeneratorProvider;
  }

  @Override
  public FeatureRepository get() {
    return newInstance(localDataStoreProvider.get(), localValueStoreProvider.get(), remoteDataStoreProvider.get(), surveyRepositoryProvider.get(), dataSyncWorkManagerProvider.get(), authManagerProvider.get(), uuidGeneratorProvider.get());
  }

  public static FeatureRepository_Factory create(Provider<LocalDataStore> localDataStoreProvider,
      Provider<LocalValueStore> localValueStoreProvider,
      Provider<RemoteDataStore> remoteDataStoreProvider,
      Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<DataSyncWorkManager> dataSyncWorkManagerProvider,
      Provider<AuthenticationManager> authManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider) {
    return new FeatureRepository_Factory(localDataStoreProvider, localValueStoreProvider, remoteDataStoreProvider, surveyRepositoryProvider, dataSyncWorkManagerProvider, authManagerProvider, uuidGeneratorProvider);
  }

  public static FeatureRepository newInstance(LocalDataStore localDataStore,
      LocalValueStore localValueStore, RemoteDataStore remoteDataStore,
      SurveyRepository surveyRepository, DataSyncWorkManager dataSyncWorkManager,
      AuthenticationManager authManager, OfflineUuidGenerator uuidGenerator) {
    return new FeatureRepository(localDataStore, localValueStore, remoteDataStore, surveyRepository, dataSyncWorkManager, authManager, uuidGenerator);
  }
}
