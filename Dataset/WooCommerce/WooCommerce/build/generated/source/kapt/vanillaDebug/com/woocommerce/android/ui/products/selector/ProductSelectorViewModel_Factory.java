// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.products.selector;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.products.variations.selector.VariationSelectorRepository;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductSelectorViewModel_Factory implements Factory<ProductSelectorViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<WooCommerceStore> wooCommerceStoreProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<ProductListHandler> productListHandlerProvider;

  private final Provider<VariationSelectorRepository> variationSelectorRepositoryProvider;

  private final Provider<ResourceProvider> resourceProvider;

  public ProductSelectorViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<ProductListHandler> productListHandlerProvider,
      Provider<VariationSelectorRepository> variationSelectorRepositoryProvider,
      Provider<ResourceProvider> resourceProvider) {
    this.savedStateProvider = savedStateProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.wooCommerceStoreProvider = wooCommerceStoreProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.productListHandlerProvider = productListHandlerProvider;
    this.variationSelectorRepositoryProvider = variationSelectorRepositoryProvider;
    this.resourceProvider = resourceProvider;
  }

  @Override
  public ProductSelectorViewModel get() {
    return newInstance(savedStateProvider.get(), currencyFormatterProvider.get(), wooCommerceStoreProvider.get(), selectedSiteProvider.get(), productListHandlerProvider.get(), variationSelectorRepositoryProvider.get(), resourceProvider.get());
  }

  public static ProductSelectorViewModel_Factory create(
      Provider<SavedStateHandle> savedStateProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<ProductListHandler> productListHandlerProvider,
      Provider<VariationSelectorRepository> variationSelectorRepositoryProvider,
      Provider<ResourceProvider> resourceProvider) {
    return new ProductSelectorViewModel_Factory(savedStateProvider, currencyFormatterProvider, wooCommerceStoreProvider, selectedSiteProvider, productListHandlerProvider, variationSelectorRepositoryProvider, resourceProvider);
  }

  public static ProductSelectorViewModel newInstance(SavedStateHandle savedState,
      CurrencyFormatter currencyFormatter, WooCommerceStore wooCommerceStore,
      SelectedSite selectedSite, ProductListHandler productListHandler,
      VariationSelectorRepository variationSelectorRepository, ResourceProvider resourceProvider) {
    return new ProductSelectorViewModel(savedState, currencyFormatter, wooCommerceStore, selectedSite, productListHandler, variationSelectorRepository, resourceProvider);
  }
}
