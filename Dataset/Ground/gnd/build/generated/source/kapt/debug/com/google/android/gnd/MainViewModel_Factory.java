// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd;

import com.google.android.gnd.repository.FeatureRepository;
import com.google.android.gnd.repository.SurveyRepository;
import com.google.android.gnd.repository.TermsOfServiceRepository;
import com.google.android.gnd.repository.UserRepository;
import com.google.android.gnd.rx.Schedulers;
import com.google.android.gnd.system.auth.AuthenticationManager;
import com.google.android.gnd.ui.common.EphemeralPopups;
import com.google.android.gnd.ui.common.Navigator;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<SurveyRepository> surveyRepositoryProvider;

  private final Provider<FeatureRepository> featureRepositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<TermsOfServiceRepository> termsOfServiceRepositoryProvider;

  private final Provider<EphemeralPopups> popupsProvider;

  private final Provider<Navigator> navigatorProvider;

  private final Provider<AuthenticationManager> authenticationManagerProvider;

  private final Provider<Schedulers> schedulersProvider;

  public MainViewModel_Factory(Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<FeatureRepository> featureRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<TermsOfServiceRepository> termsOfServiceRepositoryProvider,
      Provider<EphemeralPopups> popupsProvider, Provider<Navigator> navigatorProvider,
      Provider<AuthenticationManager> authenticationManagerProvider,
      Provider<Schedulers> schedulersProvider) {
    this.surveyRepositoryProvider = surveyRepositoryProvider;
    this.featureRepositoryProvider = featureRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.termsOfServiceRepositoryProvider = termsOfServiceRepositoryProvider;
    this.popupsProvider = popupsProvider;
    this.navigatorProvider = navigatorProvider;
    this.authenticationManagerProvider = authenticationManagerProvider;
    this.schedulersProvider = schedulersProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(surveyRepositoryProvider.get(), featureRepositoryProvider.get(), userRepositoryProvider.get(), termsOfServiceRepositoryProvider.get(), popupsProvider.get(), navigatorProvider.get(), authenticationManagerProvider.get(), schedulersProvider.get());
  }

  public static MainViewModel_Factory create(Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<FeatureRepository> featureRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<TermsOfServiceRepository> termsOfServiceRepositoryProvider,
      Provider<EphemeralPopups> popupsProvider, Provider<Navigator> navigatorProvider,
      Provider<AuthenticationManager> authenticationManagerProvider,
      Provider<Schedulers> schedulersProvider) {
    return new MainViewModel_Factory(surveyRepositoryProvider, featureRepositoryProvider, userRepositoryProvider, termsOfServiceRepositoryProvider, popupsProvider, navigatorProvider, authenticationManagerProvider, schedulersProvider);
  }

  public static MainViewModel newInstance(SurveyRepository surveyRepository,
      FeatureRepository featureRepository, UserRepository userRepository,
      TermsOfServiceRepository termsOfServiceRepository, EphemeralPopups popups,
      Navigator navigator, AuthenticationManager authenticationManager, Schedulers schedulers) {
    return new MainViewModel(surveyRepository, featureRepository, userRepository, termsOfServiceRepository, popups, navigator, authenticationManager, schedulers);
  }
}
