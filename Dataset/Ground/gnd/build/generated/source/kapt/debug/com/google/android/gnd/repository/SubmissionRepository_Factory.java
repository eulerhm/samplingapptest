// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.repository;

import com.google.android.gnd.persistence.local.LocalDataStore;
import com.google.android.gnd.persistence.remote.RemoteDataStore;
import com.google.android.gnd.persistence.sync.DataSyncWorkManager;
import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;
import com.google.android.gnd.system.auth.AuthenticationManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SubmissionRepository_Factory implements Factory<SubmissionRepository> {
  private final Provider<LocalDataStore> localDataStoreProvider;

  private final Provider<RemoteDataStore> remoteDataStoreProvider;

  private final Provider<FeatureRepository> featureRepositoryProvider;

  private final Provider<DataSyncWorkManager> dataSyncWorkManagerProvider;

  private final Provider<OfflineUuidGenerator> uuidGeneratorProvider;

  private final Provider<AuthenticationManager> authManagerProvider;

  public SubmissionRepository_Factory(Provider<LocalDataStore> localDataStoreProvider,
      Provider<RemoteDataStore> remoteDataStoreProvider,
      Provider<FeatureRepository> featureRepositoryProvider,
      Provider<DataSyncWorkManager> dataSyncWorkManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider,
      Provider<AuthenticationManager> authManagerProvider) {
    this.localDataStoreProvider = localDataStoreProvider;
    this.remoteDataStoreProvider = remoteDataStoreProvider;
    this.featureRepositoryProvider = featureRepositoryProvider;
    this.dataSyncWorkManagerProvider = dataSyncWorkManagerProvider;
    this.uuidGeneratorProvider = uuidGeneratorProvider;
    this.authManagerProvider = authManagerProvider;
  }

  @Override
  public SubmissionRepository get() {
    return newInstance(localDataStoreProvider.get(), remoteDataStoreProvider.get(), featureRepositoryProvider.get(), dataSyncWorkManagerProvider.get(), uuidGeneratorProvider.get(), authManagerProvider.get());
  }

  public static SubmissionRepository_Factory create(Provider<LocalDataStore> localDataStoreProvider,
      Provider<RemoteDataStore> remoteDataStoreProvider,
      Provider<FeatureRepository> featureRepositoryProvider,
      Provider<DataSyncWorkManager> dataSyncWorkManagerProvider,
      Provider<OfflineUuidGenerator> uuidGeneratorProvider,
      Provider<AuthenticationManager> authManagerProvider) {
    return new SubmissionRepository_Factory(localDataStoreProvider, remoteDataStoreProvider, featureRepositoryProvider, dataSyncWorkManagerProvider, uuidGeneratorProvider, authManagerProvider);
  }

  public static SubmissionRepository newInstance(LocalDataStore localDataStore,
      RemoteDataStore remoteDataStore, FeatureRepository featureRepository,
      DataSyncWorkManager dataSyncWorkManager, OfflineUuidGenerator uuidGenerator,
      AuthenticationManager authManager) {
    return new SubmissionRepository(localDataStore, remoteDataStore, featureRepository, dataSyncWorkManager, uuidGenerator, authManager);
  }
}
