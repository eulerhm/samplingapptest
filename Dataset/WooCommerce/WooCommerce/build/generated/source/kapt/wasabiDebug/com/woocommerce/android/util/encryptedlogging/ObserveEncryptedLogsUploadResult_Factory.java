// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.util.encryptedlogging;

import com.woocommerce.android.analytics.AnalyticsTrackerWrapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.utils.AppLogWrapper;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ObserveEncryptedLogsUploadResult_Factory implements Factory<ObserveEncryptedLogsUploadResult> {
  private final Provider<Dispatcher> eventBusDispatcherProvider;

  private final Provider<AnalyticsTrackerWrapper> analyticsTrackerProvider;

  private final Provider<AppLogWrapper> loggerProvider;

  public ObserveEncryptedLogsUploadResult_Factory(Provider<Dispatcher> eventBusDispatcherProvider,
      Provider<AnalyticsTrackerWrapper> analyticsTrackerProvider,
      Provider<AppLogWrapper> loggerProvider) {
    this.eventBusDispatcherProvider = eventBusDispatcherProvider;
    this.analyticsTrackerProvider = analyticsTrackerProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public ObserveEncryptedLogsUploadResult get() {
    return newInstance(eventBusDispatcherProvider.get(), analyticsTrackerProvider.get(), loggerProvider.get());
  }

  public static ObserveEncryptedLogsUploadResult_Factory create(
      Provider<Dispatcher> eventBusDispatcherProvider,
      Provider<AnalyticsTrackerWrapper> analyticsTrackerProvider,
      Provider<AppLogWrapper> loggerProvider) {
    return new ObserveEncryptedLogsUploadResult_Factory(eventBusDispatcherProvider, analyticsTrackerProvider, loggerProvider);
  }

  public static ObserveEncryptedLogsUploadResult newInstance(Dispatcher eventBusDispatcher,
      AnalyticsTrackerWrapper analyticsTracker, AppLogWrapper logger) {
    return new ObserveEncryptedLogsUploadResult(eventBusDispatcher, analyticsTracker, logger);
  }
}
