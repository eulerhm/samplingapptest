// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.repository;

import com.google.android.gnd.persistence.local.LocalDataStore;
import com.google.android.gnd.persistence.mbtiles.MbtilesFootprintParser;
import com.google.android.gnd.persistence.sync.TileSetDownloadWorkManager;
import com.google.android.gnd.persistence.uuid.OfflineUuidGenerator;
import com.google.android.gnd.rx.Schedulers;
import com.google.android.gnd.system.GeocodingManager;
import com.google.android.gnd.ui.util.FileUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OfflineAreaRepository_Factory implements Factory<OfflineAreaRepository> {
  private final Provider<TileSetDownloadWorkManager> tileSetDownloadWorkManagerProvider;

  private final Provider<LocalDataStore> localDataStoreProvider;

  private final Provider<SurveyRepository> surveyRepositoryProvider;

  private final Provider<MbtilesFootprintParser> geoJsonParserProvider;

  private final Provider<FileUtil> fileUtilProvider;

  private final Provider<Schedulers> schedulersProvider;

  private final Provider<GeocodingManager> geocodingManagerProvider;

  private final Provider<OfflineUuidGenerator> offlineUuidGeneratorProvider;

  public OfflineAreaRepository_Factory(
      Provider<TileSetDownloadWorkManager> tileSetDownloadWorkManagerProvider,
      Provider<LocalDataStore> localDataStoreProvider,
      Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<MbtilesFootprintParser> geoJsonParserProvider, Provider<FileUtil> fileUtilProvider,
      Provider<Schedulers> schedulersProvider, Provider<GeocodingManager> geocodingManagerProvider,
      Provider<OfflineUuidGenerator> offlineUuidGeneratorProvider) {
    this.tileSetDownloadWorkManagerProvider = tileSetDownloadWorkManagerProvider;
    this.localDataStoreProvider = localDataStoreProvider;
    this.surveyRepositoryProvider = surveyRepositoryProvider;
    this.geoJsonParserProvider = geoJsonParserProvider;
    this.fileUtilProvider = fileUtilProvider;
    this.schedulersProvider = schedulersProvider;
    this.geocodingManagerProvider = geocodingManagerProvider;
    this.offlineUuidGeneratorProvider = offlineUuidGeneratorProvider;
  }

  @Override
  public OfflineAreaRepository get() {
    return newInstance(tileSetDownloadWorkManagerProvider.get(), localDataStoreProvider.get(), surveyRepositoryProvider.get(), geoJsonParserProvider.get(), fileUtilProvider.get(), schedulersProvider.get(), geocodingManagerProvider.get(), offlineUuidGeneratorProvider.get());
  }

  public static OfflineAreaRepository_Factory create(
      Provider<TileSetDownloadWorkManager> tileSetDownloadWorkManagerProvider,
      Provider<LocalDataStore> localDataStoreProvider,
      Provider<SurveyRepository> surveyRepositoryProvider,
      Provider<MbtilesFootprintParser> geoJsonParserProvider, Provider<FileUtil> fileUtilProvider,
      Provider<Schedulers> schedulersProvider, Provider<GeocodingManager> geocodingManagerProvider,
      Provider<OfflineUuidGenerator> offlineUuidGeneratorProvider) {
    return new OfflineAreaRepository_Factory(tileSetDownloadWorkManagerProvider, localDataStoreProvider, surveyRepositoryProvider, geoJsonParserProvider, fileUtilProvider, schedulersProvider, geocodingManagerProvider, offlineUuidGeneratorProvider);
  }

  public static OfflineAreaRepository newInstance(
      TileSetDownloadWorkManager tileSetDownloadWorkManager, LocalDataStore localDataStore,
      SurveyRepository surveyRepository, MbtilesFootprintParser geoJsonParser, FileUtil fileUtil,
      Schedulers schedulers, GeocodingManager geocodingManager,
      OfflineUuidGenerator offlineUuidGenerator) {
    return new OfflineAreaRepository(tileSetDownloadWorkManager, localDataStore, surveyRepository, geoJsonParser, fileUtil, schedulers, geocodingManager, offlineUuidGenerator);
  }
}
