// Generated by Dagger (https://dagger.dev).
package org.owntracks.android.services;

import dagger.internal.Factory;
import javax.inject.Provider;
import org.owntracks.android.data.repos.LocationRepo;
import org.owntracks.android.data.repos.WaypointsRepo;
import org.owntracks.android.support.DeviceMetricsProvider;
import org.owntracks.android.support.Preferences;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocationProcessor_Factory implements Factory<LocationProcessor> {
  private final Provider<MessageProcessor> messageProcessorProvider;

  private final Provider<Preferences> preferencesProvider;

  private final Provider<LocationRepo> locationRepoProvider;

  private final Provider<WaypointsRepo> waypointsRepoProvider;

  private final Provider<DeviceMetricsProvider> deviceMetricsProvider;

  public LocationProcessor_Factory(Provider<MessageProcessor> messageProcessorProvider,
      Provider<Preferences> preferencesProvider, Provider<LocationRepo> locationRepoProvider,
      Provider<WaypointsRepo> waypointsRepoProvider,
      Provider<DeviceMetricsProvider> deviceMetricsProvider) {
    this.messageProcessorProvider = messageProcessorProvider;
    this.preferencesProvider = preferencesProvider;
    this.locationRepoProvider = locationRepoProvider;
    this.waypointsRepoProvider = waypointsRepoProvider;
    this.deviceMetricsProvider = deviceMetricsProvider;
  }

  @Override
  public LocationProcessor get() {
    return newInstance(messageProcessorProvider.get(), preferencesProvider.get(), locationRepoProvider.get(), waypointsRepoProvider.get(), deviceMetricsProvider.get());
  }

  public static LocationProcessor_Factory create(
      Provider<MessageProcessor> messageProcessorProvider,
      Provider<Preferences> preferencesProvider, Provider<LocationRepo> locationRepoProvider,
      Provider<WaypointsRepo> waypointsRepoProvider,
      Provider<DeviceMetricsProvider> deviceMetricsProvider) {
    return new LocationProcessor_Factory(messageProcessorProvider, preferencesProvider, locationRepoProvider, waypointsRepoProvider, deviceMetricsProvider);
  }

  public static LocationProcessor newInstance(MessageProcessor messageProcessor,
      Preferences preferences, LocationRepo locationRepo, WaypointsRepo waypointsRepo,
      DeviceMetricsProvider deviceMetricsProvider) {
    return new LocationProcessor(messageProcessor, preferences, locationRepo, waypointsRepo, deviceMetricsProvider);
  }
}
