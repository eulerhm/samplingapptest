// Generated by Dagger (https://dagger.dev).
package org.owntracks.android.ui.map;

import androidx.test.espresso.idling.CountingIdlingResource;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.greenrobot.eventbus.EventBus;
import org.owntracks.android.data.repos.LocationRepo;
import org.owntracks.android.geocoding.GeocoderProvider;
import org.owntracks.android.support.ContactImageProvider;
import org.owntracks.android.support.DrawerProvider;
import org.owntracks.android.support.Preferences;
import org.owntracks.android.support.RequirementsChecker;
import org.owntracks.android.support.RunThingsOnOtherThreads;
import org.owntracks.android.ui.base.BaseActivity_MembersInjector;
import org.owntracks.android.ui.base.navigator.Navigator;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MapActivity_MembersInjector implements MembersInjector<MapActivity> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<MapMvvm.ViewModel<MapMvvm.View>> viewModelProvider;

  private final Provider<EventBus> eventBusProvider;

  private final Provider<DrawerProvider> drawerProvider;

  private final Provider<Preferences> preferencesProvider;

  private final Provider<LocationRepo> locationRepoProvider;

  private final Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider;

  private final Provider<ContactImageProvider> contactImageProvider;

  private final Provider<EventBus> eventBusProvider2;

  private final Provider<GeocoderProvider> geocoderProvider;

  private final Provider<CountingIdlingResource> countingIdlingResourceProvider;

  private final Provider<Navigator> navigatorProvider;

  private final Provider<RequirementsChecker> requirementsCheckerProvider;

  public MapActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<MapMvvm.ViewModel<MapMvvm.View>> viewModelProvider,
      Provider<EventBus> eventBusProvider, Provider<DrawerProvider> drawerProvider,
      Provider<Preferences> preferencesProvider, Provider<LocationRepo> locationRepoProvider,
      Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider,
      Provider<ContactImageProvider> contactImageProvider, Provider<EventBus> eventBusProvider2,
      Provider<GeocoderProvider> geocoderProvider,
      Provider<CountingIdlingResource> countingIdlingResourceProvider,
      Provider<Navigator> navigatorProvider,
      Provider<RequirementsChecker> requirementsCheckerProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.viewModelProvider = viewModelProvider;
    this.eventBusProvider = eventBusProvider;
    this.drawerProvider = drawerProvider;
    this.preferencesProvider = preferencesProvider;
    this.locationRepoProvider = locationRepoProvider;
    this.runThingsOnOtherThreadsProvider = runThingsOnOtherThreadsProvider;
    this.contactImageProvider = contactImageProvider;
    this.eventBusProvider2 = eventBusProvider2;
    this.geocoderProvider = geocoderProvider;
    this.countingIdlingResourceProvider = countingIdlingResourceProvider;
    this.navigatorProvider = navigatorProvider;
    this.requirementsCheckerProvider = requirementsCheckerProvider;
  }

  public static MembersInjector<MapActivity> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<MapMvvm.ViewModel<MapMvvm.View>> viewModelProvider,
      Provider<EventBus> eventBusProvider, Provider<DrawerProvider> drawerProvider,
      Provider<Preferences> preferencesProvider, Provider<LocationRepo> locationRepoProvider,
      Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider,
      Provider<ContactImageProvider> contactImageProvider, Provider<EventBus> eventBusProvider2,
      Provider<GeocoderProvider> geocoderProvider,
      Provider<CountingIdlingResource> countingIdlingResourceProvider,
      Provider<Navigator> navigatorProvider,
      Provider<RequirementsChecker> requirementsCheckerProvider) {
    return new MapActivity_MembersInjector(androidInjectorProvider, viewModelProvider, eventBusProvider, drawerProvider, preferencesProvider, locationRepoProvider, runThingsOnOtherThreadsProvider, contactImageProvider, eventBusProvider2, geocoderProvider, countingIdlingResourceProvider, navigatorProvider, requirementsCheckerProvider);
  }

  @Override
  public void injectMembers(MapActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    BaseActivity_MembersInjector.injectViewModel(instance, viewModelProvider.get());
    BaseActivity_MembersInjector.injectEventBus(instance, eventBusProvider.get());
    BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
    BaseActivity_MembersInjector.injectPreferences(instance, preferencesProvider.get());
    injectLocationRepo(instance, locationRepoProvider.get());
    injectRunThingsOnOtherThreads(instance, runThingsOnOtherThreadsProvider.get());
    injectContactImageProvider(instance, contactImageProvider.get());
    injectEventBus(instance, eventBusProvider2.get());
    injectGeocoderProvider(instance, geocoderProvider.get());
    injectCountingIdlingResource(instance, countingIdlingResourceProvider.get());
    injectNavigator(instance, navigatorProvider.get());
    injectRequirementsChecker(instance, requirementsCheckerProvider.get());
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.locationRepo")
  public static void injectLocationRepo(MapActivity instance, LocationRepo locationRepo) {
    instance.locationRepo = locationRepo;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.runThingsOnOtherThreads")
  public static void injectRunThingsOnOtherThreads(MapActivity instance,
      RunThingsOnOtherThreads runThingsOnOtherThreads) {
    instance.runThingsOnOtherThreads = runThingsOnOtherThreads;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.contactImageProvider")
  public static void injectContactImageProvider(MapActivity instance,
      ContactImageProvider contactImageProvider) {
    instance.contactImageProvider = contactImageProvider;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.eventBus")
  public static void injectEventBus(MapActivity instance, EventBus eventBus) {
    instance.eventBus = eventBus;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.geocoderProvider")
  public static void injectGeocoderProvider(MapActivity instance,
      GeocoderProvider geocoderProvider) {
    instance.geocoderProvider = geocoderProvider;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.countingIdlingResource")
  public static void injectCountingIdlingResource(MapActivity instance,
      CountingIdlingResource countingIdlingResource) {
    instance.countingIdlingResource = countingIdlingResource;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.navigator")
  public static void injectNavigator(MapActivity instance, Navigator navigator) {
    instance.navigator = navigator;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.map.MapActivity.requirementsChecker")
  public static void injectRequirementsChecker(MapActivity instance,
      RequirementsChecker requirementsChecker) {
    instance.requirementsChecker = requirementsChecker;
  }
}
