// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd;

import com.google.android.gnd.repository.MapsRepository;
import com.google.android.gnd.system.auth.FakeAuthenticationManager;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MapTypeDialogTest_MembersInjector implements MembersInjector<MapTypeDialogTest> {
  private final Provider<FakeAuthenticationManager> fakeAuthenticationManagerProvider;

  private final Provider<MapsRepository> mapsRepositoryProvider;

  public MapTypeDialogTest_MembersInjector(
      Provider<FakeAuthenticationManager> fakeAuthenticationManagerProvider,
      Provider<MapsRepository> mapsRepositoryProvider) {
    this.fakeAuthenticationManagerProvider = fakeAuthenticationManagerProvider;
    this.mapsRepositoryProvider = mapsRepositoryProvider;
  }

  public static MembersInjector<MapTypeDialogTest> create(
      Provider<FakeAuthenticationManager> fakeAuthenticationManagerProvider,
      Provider<MapsRepository> mapsRepositoryProvider) {
    return new MapTypeDialogTest_MembersInjector(fakeAuthenticationManagerProvider, mapsRepositoryProvider);
  }

  @Override
  public void injectMembers(MapTypeDialogTest instance) {
    injectFakeAuthenticationManager(instance, fakeAuthenticationManagerProvider.get());
    injectMapsRepository(instance, mapsRepositoryProvider.get());
  }

  @InjectedFieldSignature("com.google.android.gnd.MapTypeDialogTest.fakeAuthenticationManager")
  public static void injectFakeAuthenticationManager(MapTypeDialogTest instance,
      FakeAuthenticationManager fakeAuthenticationManager) {
    instance.fakeAuthenticationManager = fakeAuthenticationManager;
  }

  @InjectedFieldSignature("com.google.android.gnd.MapTypeDialogTest.mapsRepository")
  public static void injectMapsRepository(MapTypeDialogTest instance,
      MapsRepository mapsRepository) {
    instance.mapsRepository = mapsRepository;
  }
}
