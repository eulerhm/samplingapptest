// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.orders.details;

import com.woocommerce.android.model.OrderMapper;
import com.woocommerce.android.model.ShippingLabelMapper;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.util.CoroutineDispatchers;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.store.WCOrderStore;
import org.wordpress.android.fluxc.store.WCProductStore;
import org.wordpress.android.fluxc.store.WCRefundStore;
import org.wordpress.android.fluxc.store.WCShippingLabelStore;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrderDetailRepository_Factory implements Factory<OrderDetailRepository> {
  private final Provider<WCOrderStore> orderStoreProvider;

  private final Provider<WCProductStore> productStoreProvider;

  private final Provider<WCRefundStore> refundStoreProvider;

  private final Provider<WCShippingLabelStore> shippingLabelStoreProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<WooCommerceStore> wooCommerceStoreProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<OrderMapper> orderMapperProvider;

  private final Provider<ShippingLabelMapper> shippingLabelMapperProvider;

  public OrderDetailRepository_Factory(Provider<WCOrderStore> orderStoreProvider,
      Provider<WCProductStore> productStoreProvider, Provider<WCRefundStore> refundStoreProvider,
      Provider<WCShippingLabelStore> shippingLabelStoreProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<CoroutineDispatchers> dispatchersProvider, Provider<OrderMapper> orderMapperProvider,
      Provider<ShippingLabelMapper> shippingLabelMapperProvider) {
    this.orderStoreProvider = orderStoreProvider;
    this.productStoreProvider = productStoreProvider;
    this.refundStoreProvider = refundStoreProvider;
    this.shippingLabelStoreProvider = shippingLabelStoreProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.wooCommerceStoreProvider = wooCommerceStoreProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.orderMapperProvider = orderMapperProvider;
    this.shippingLabelMapperProvider = shippingLabelMapperProvider;
  }

  @Override
  public OrderDetailRepository get() {
    return newInstance(orderStoreProvider.get(), productStoreProvider.get(), refundStoreProvider.get(), shippingLabelStoreProvider.get(), selectedSiteProvider.get(), wooCommerceStoreProvider.get(), dispatchersProvider.get(), orderMapperProvider.get(), shippingLabelMapperProvider.get());
  }

  public static OrderDetailRepository_Factory create(Provider<WCOrderStore> orderStoreProvider,
      Provider<WCProductStore> productStoreProvider, Provider<WCRefundStore> refundStoreProvider,
      Provider<WCShippingLabelStore> shippingLabelStoreProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<CoroutineDispatchers> dispatchersProvider, Provider<OrderMapper> orderMapperProvider,
      Provider<ShippingLabelMapper> shippingLabelMapperProvider) {
    return new OrderDetailRepository_Factory(orderStoreProvider, productStoreProvider, refundStoreProvider, shippingLabelStoreProvider, selectedSiteProvider, wooCommerceStoreProvider, dispatchersProvider, orderMapperProvider, shippingLabelMapperProvider);
  }

  public static OrderDetailRepository newInstance(WCOrderStore orderStore,
      WCProductStore productStore, WCRefundStore refundStore,
      WCShippingLabelStore shippingLabelStore, SelectedSite selectedSite,
      WooCommerceStore wooCommerceStore, CoroutineDispatchers dispatchers, OrderMapper orderMapper,
      ShippingLabelMapper shippingLabelMapper) {
    return new OrderDetailRepository(orderStore, productStore, refundStore, shippingLabelStore, selectedSite, wooCommerceStore, dispatchers, orderMapper, shippingLabelMapper);
  }
}
