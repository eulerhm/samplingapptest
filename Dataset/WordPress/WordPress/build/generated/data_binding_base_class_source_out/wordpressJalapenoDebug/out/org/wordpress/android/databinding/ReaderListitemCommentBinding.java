// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;
import org.wordpress.android.ui.reader.views.ReaderIconCountView;
import org.wordpress.android.widgets.WPTextView;

public final class ReaderListitemCommentBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout actionsContainer;

  @NonNull
  public final FrameLayout authorBadge;

  @NonNull
  public final ImageView commentActionButton;

  @NonNull
  public final RelativeLayout commentActionButtonContainer;

  @NonNull
  public final LinearLayout commentBodyContainer;

  @NonNull
  public final RelativeLayout commentContainer;

  @NonNull
  public final ReaderIconCountView countLikes;

  @NonNull
  public final View divider;

  @NonNull
  public final ImageView imageCommentAvatar;

  @NonNull
  public final ConstraintLayout layoutAuthor;

  @NonNull
  public final RelativeLayout layoutContainer;

  @NonNull
  public final ProgressBar progressComment;

  @NonNull
  public final ImageView replyButtonIcon;

  @NonNull
  public final MaterialTextView replyButtonLabel;

  @NonNull
  public final LinearLayout replyContainer;

  @NonNull
  public final View selectedCommentIndicator;

  @NonNull
  public final View spacerCommentIndent;

  @NonNull
  public final MaterialTextView textCommentAuthor;

  @NonNull
  public final MaterialTextView textCommentDate;

  @NonNull
  public final WPTextView textCommentText;

  private ReaderListitemCommentBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout actionsContainer, @NonNull FrameLayout authorBadge,
      @NonNull ImageView commentActionButton, @NonNull RelativeLayout commentActionButtonContainer,
      @NonNull LinearLayout commentBodyContainer, @NonNull RelativeLayout commentContainer,
      @NonNull ReaderIconCountView countLikes, @NonNull View divider,
      @NonNull ImageView imageCommentAvatar, @NonNull ConstraintLayout layoutAuthor,
      @NonNull RelativeLayout layoutContainer, @NonNull ProgressBar progressComment,
      @NonNull ImageView replyButtonIcon, @NonNull MaterialTextView replyButtonLabel,
      @NonNull LinearLayout replyContainer, @NonNull View selectedCommentIndicator,
      @NonNull View spacerCommentIndent, @NonNull MaterialTextView textCommentAuthor,
      @NonNull MaterialTextView textCommentDate, @NonNull WPTextView textCommentText) {
    this.rootView = rootView;
    this.actionsContainer = actionsContainer;
    this.authorBadge = authorBadge;
    this.commentActionButton = commentActionButton;
    this.commentActionButtonContainer = commentActionButtonContainer;
    this.commentBodyContainer = commentBodyContainer;
    this.commentContainer = commentContainer;
    this.countLikes = countLikes;
    this.divider = divider;
    this.imageCommentAvatar = imageCommentAvatar;
    this.layoutAuthor = layoutAuthor;
    this.layoutContainer = layoutContainer;
    this.progressComment = progressComment;
    this.replyButtonIcon = replyButtonIcon;
    this.replyButtonLabel = replyButtonLabel;
    this.replyContainer = replyContainer;
    this.selectedCommentIndicator = selectedCommentIndicator;
    this.spacerCommentIndent = spacerCommentIndent;
    this.textCommentAuthor = textCommentAuthor;
    this.textCommentDate = textCommentDate;
    this.textCommentText = textCommentText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ReaderListitemCommentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ReaderListitemCommentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.reader_listitem_comment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ReaderListitemCommentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actions_container;
      RelativeLayout actionsContainer = ViewBindings.findChildViewById(rootView, id);
      if (actionsContainer == null) {
        break missingId;
      }

      id = R.id.author_badge;
      FrameLayout authorBadge = ViewBindings.findChildViewById(rootView, id);
      if (authorBadge == null) {
        break missingId;
      }

      id = R.id.comment_action_button;
      ImageView commentActionButton = ViewBindings.findChildViewById(rootView, id);
      if (commentActionButton == null) {
        break missingId;
      }

      id = R.id.comment_action_button_container;
      RelativeLayout commentActionButtonContainer = ViewBindings.findChildViewById(rootView, id);
      if (commentActionButtonContainer == null) {
        break missingId;
      }

      id = R.id.comment_body_container;
      LinearLayout commentBodyContainer = ViewBindings.findChildViewById(rootView, id);
      if (commentBodyContainer == null) {
        break missingId;
      }

      id = R.id.comment_container;
      RelativeLayout commentContainer = ViewBindings.findChildViewById(rootView, id);
      if (commentContainer == null) {
        break missingId;
      }

      id = R.id.count_likes;
      ReaderIconCountView countLikes = ViewBindings.findChildViewById(rootView, id);
      if (countLikes == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.image_comment_avatar;
      ImageView imageCommentAvatar = ViewBindings.findChildViewById(rootView, id);
      if (imageCommentAvatar == null) {
        break missingId;
      }

      id = R.id.layout_author;
      ConstraintLayout layoutAuthor = ViewBindings.findChildViewById(rootView, id);
      if (layoutAuthor == null) {
        break missingId;
      }

      RelativeLayout layoutContainer = (RelativeLayout) rootView;

      id = R.id.progress_comment;
      ProgressBar progressComment = ViewBindings.findChildViewById(rootView, id);
      if (progressComment == null) {
        break missingId;
      }

      id = R.id.reply_button_icon;
      ImageView replyButtonIcon = ViewBindings.findChildViewById(rootView, id);
      if (replyButtonIcon == null) {
        break missingId;
      }

      id = R.id.reply_button_label;
      MaterialTextView replyButtonLabel = ViewBindings.findChildViewById(rootView, id);
      if (replyButtonLabel == null) {
        break missingId;
      }

      id = R.id.reply_container;
      LinearLayout replyContainer = ViewBindings.findChildViewById(rootView, id);
      if (replyContainer == null) {
        break missingId;
      }

      id = R.id.selected_comment_indicator;
      View selectedCommentIndicator = ViewBindings.findChildViewById(rootView, id);
      if (selectedCommentIndicator == null) {
        break missingId;
      }

      id = R.id.spacer_comment_indent;
      View spacerCommentIndent = ViewBindings.findChildViewById(rootView, id);
      if (spacerCommentIndent == null) {
        break missingId;
      }

      id = R.id.text_comment_author;
      MaterialTextView textCommentAuthor = ViewBindings.findChildViewById(rootView, id);
      if (textCommentAuthor == null) {
        break missingId;
      }

      id = R.id.text_comment_date;
      MaterialTextView textCommentDate = ViewBindings.findChildViewById(rootView, id);
      if (textCommentDate == null) {
        break missingId;
      }

      id = R.id.text_comment_text;
      WPTextView textCommentText = ViewBindings.findChildViewById(rootView, id);
      if (textCommentText == null) {
        break missingId;
      }

      return new ReaderListitemCommentBinding((RelativeLayout) rootView, actionsContainer,
          authorBadge, commentActionButton, commentActionButtonContainer, commentBodyContainer,
          commentContainer, countLikes, divider, imageCommentAvatar, layoutAuthor, layoutContainer,
          progressComment, replyButtonIcon, replyButtonLabel, replyContainer,
          selectedCommentIndicator, spacerCommentIndent, textCommentAuthor, textCommentDate,
          textCommentText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
