package com.google.android.gnd.ui.editsubmission;

import android.content.Context;
import com.google.android.gnd.model.submission.MultipleChoiceResponse;
import com.google.android.gnd.model.task.MultipleChoice;
import com.google.android.gnd.model.task.Option;
import com.google.common.collect.ImmutableList;
import java8.util.Optional;
import java8.util.function.Consumer;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_MultiSelectDialogFactory extends MultiSelectDialogFactory {

  private final Context context;

  private final String title;

  private final MultipleChoice multipleChoice;

  private final Optional<MultipleChoiceResponse> currentResponse;

  private final Consumer<ImmutableList<Option>> valueConsumer;

  private AutoValue_MultiSelectDialogFactory(
      Context context,
      String title,
      MultipleChoice multipleChoice,
      Optional<MultipleChoiceResponse> currentResponse,
      Consumer<ImmutableList<Option>> valueConsumer) {
    this.context = context;
    this.title = title;
    this.multipleChoice = multipleChoice;
    this.currentResponse = currentResponse;
    this.valueConsumer = valueConsumer;
  }

  @Override
  public Context getContext() {
    return context;
  }

  @Override
  public String getTitle() {
    return title;
  }

  @Override
  public MultipleChoice getMultipleChoice() {
    return multipleChoice;
  }

  @Override
  public Optional<MultipleChoiceResponse> getCurrentResponse() {
    return currentResponse;
  }

  @Override
  public Consumer<ImmutableList<Option>> getValueConsumer() {
    return valueConsumer;
  }

  @Override
  public String toString() {
    return "MultiSelectDialogFactory{"
        + "context=" + context + ", "
        + "title=" + title + ", "
        + "multipleChoice=" + multipleChoice + ", "
        + "currentResponse=" + currentResponse + ", "
        + "valueConsumer=" + valueConsumer
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof MultiSelectDialogFactory) {
      MultiSelectDialogFactory that = (MultiSelectDialogFactory) o;
      return this.context.equals(that.getContext())
          && this.title.equals(that.getTitle())
          && this.multipleChoice.equals(that.getMultipleChoice())
          && this.currentResponse.equals(that.getCurrentResponse())
          && this.valueConsumer.equals(that.getValueConsumer());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= context.hashCode();
    h$ *= 1000003;
    h$ ^= title.hashCode();
    h$ *= 1000003;
    h$ ^= multipleChoice.hashCode();
    h$ *= 1000003;
    h$ ^= currentResponse.hashCode();
    h$ *= 1000003;
    h$ ^= valueConsumer.hashCode();
    return h$;
  }

  static final class Builder extends MultiSelectDialogFactory.Builder {
    private Context context;
    private String title;
    private MultipleChoice multipleChoice;
    private Optional<MultipleChoiceResponse> currentResponse;
    private Consumer<ImmutableList<Option>> valueConsumer;
    Builder() {
    }
    @Override
    public MultiSelectDialogFactory.Builder setContext(Context context) {
      if (context == null) {
        throw new NullPointerException("Null context");
      }
      this.context = context;
      return this;
    }
    @Override
    public MultiSelectDialogFactory.Builder setTitle(String title) {
      if (title == null) {
        throw new NullPointerException("Null title");
      }
      this.title = title;
      return this;
    }
    @Override
    public MultiSelectDialogFactory.Builder setMultipleChoice(MultipleChoice multipleChoice) {
      if (multipleChoice == null) {
        throw new NullPointerException("Null multipleChoice");
      }
      this.multipleChoice = multipleChoice;
      return this;
    }
    @Override
    public MultiSelectDialogFactory.Builder setCurrentResponse(Optional<MultipleChoiceResponse> currentResponse) {
      if (currentResponse == null) {
        throw new NullPointerException("Null currentResponse");
      }
      this.currentResponse = currentResponse;
      return this;
    }
    @Override
    public MultiSelectDialogFactory.Builder setValueConsumer(Consumer<ImmutableList<Option>> valueConsumer) {
      if (valueConsumer == null) {
        throw new NullPointerException("Null valueConsumer");
      }
      this.valueConsumer = valueConsumer;
      return this;
    }
    @Override
    public MultiSelectDialogFactory build() {
      String missing = "";
      if (this.context == null) {
        missing += " context";
      }
      if (this.title == null) {
        missing += " title";
      }
      if (this.multipleChoice == null) {
        missing += " multipleChoice";
      }
      if (this.currentResponse == null) {
        missing += " currentResponse";
      }
      if (this.valueConsumer == null) {
        missing += " valueConsumer";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_MultiSelectDialogFactory(
          this.context,
          this.title,
          this.multipleChoice,
          this.currentResponse,
          this.valueConsumer);
    }
  }

}
