// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class DebugCookieItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView cookieHost;

  @NonNull
  public final TextView cookieName;

  @NonNull
  public final TextView cookieValue;

  @NonNull
  public final ImageButton deleteCookieButton;

  @NonNull
  public final ConstraintLayout linearLayout2;

  private DebugCookieItemBinding(@NonNull ConstraintLayout rootView, @NonNull TextView cookieHost,
      @NonNull TextView cookieName, @NonNull TextView cookieValue,
      @NonNull ImageButton deleteCookieButton, @NonNull ConstraintLayout linearLayout2) {
    this.rootView = rootView;
    this.cookieHost = cookieHost;
    this.cookieName = cookieName;
    this.cookieValue = cookieValue;
    this.deleteCookieButton = deleteCookieButton;
    this.linearLayout2 = linearLayout2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DebugCookieItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DebugCookieItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.debug_cookie_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DebugCookieItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cookie_host;
      TextView cookieHost = ViewBindings.findChildViewById(rootView, id);
      if (cookieHost == null) {
        break missingId;
      }

      id = R.id.cookie_name;
      TextView cookieName = ViewBindings.findChildViewById(rootView, id);
      if (cookieName == null) {
        break missingId;
      }

      id = R.id.cookie_value;
      TextView cookieValue = ViewBindings.findChildViewById(rootView, id);
      if (cookieValue == null) {
        break missingId;
      }

      id = R.id.delete_cookie_button;
      ImageButton deleteCookieButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteCookieButton == null) {
        break missingId;
      }

      ConstraintLayout linearLayout2 = (ConstraintLayout) rootView;

      return new DebugCookieItemBinding((ConstraintLayout) rootView, cookieHost, cookieName,
          cookieValue, deleteCookieButton, linearLayout2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
