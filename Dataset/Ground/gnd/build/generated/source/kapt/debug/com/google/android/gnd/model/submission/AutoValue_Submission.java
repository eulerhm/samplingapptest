package com.google.android.gnd.model.submission;

import com.google.android.gnd.model.AuditInfo;
import com.google.android.gnd.model.Survey;
import com.google.android.gnd.model.feature.Feature;
import com.google.android.gnd.model.task.Task;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_Submission extends Submission {

  private final String id;

  private final Survey survey;

  private final Feature feature;

  private final Task task;

  private final AuditInfo created;

  private final AuditInfo lastModified;

  private final ResponseMap responses;

  private AutoValue_Submission(
      String id,
      Survey survey,
      Feature feature,
      Task task,
      AuditInfo created,
      AuditInfo lastModified,
      ResponseMap responses) {
    this.id = id;
    this.survey = survey;
    this.feature = feature;
    this.task = task;
    this.created = created;
    this.lastModified = lastModified;
    this.responses = responses;
  }

  @Override
  public String getId() {
    return id;
  }

  @Override
  public Survey getSurvey() {
    return survey;
  }

  @Override
  public Feature getFeature() {
    return feature;
  }

  @Override
  public Task getTask() {
    return task;
  }

  @Override
  public AuditInfo getCreated() {
    return created;
  }

  @Override
  public AuditInfo getLastModified() {
    return lastModified;
  }

  @Override
  public ResponseMap getResponses() {
    return responses;
  }

  @Override
  public String toString() {
    return "Submission{"
        + "id=" + id + ", "
        + "survey=" + survey + ", "
        + "feature=" + feature + ", "
        + "task=" + task + ", "
        + "created=" + created + ", "
        + "lastModified=" + lastModified + ", "
        + "responses=" + responses
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Submission) {
      Submission that = (Submission) o;
      return this.id.equals(that.getId())
          && this.survey.equals(that.getSurvey())
          && this.feature.equals(that.getFeature())
          && this.task.equals(that.getTask())
          && this.created.equals(that.getCreated())
          && this.lastModified.equals(that.getLastModified())
          && this.responses.equals(that.getResponses());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= id.hashCode();
    h$ *= 1000003;
    h$ ^= survey.hashCode();
    h$ *= 1000003;
    h$ ^= feature.hashCode();
    h$ *= 1000003;
    h$ ^= task.hashCode();
    h$ *= 1000003;
    h$ ^= created.hashCode();
    h$ *= 1000003;
    h$ ^= lastModified.hashCode();
    h$ *= 1000003;
    h$ ^= responses.hashCode();
    return h$;
  }

  @Override
  public Submission.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends Submission.Builder {
    private String id;
    private Survey survey;
    private Feature feature;
    private Task task;
    private AuditInfo created;
    private AuditInfo lastModified;
    private ResponseMap responses;
    Builder() {
    }
    private Builder(Submission source) {
      this.id = source.getId();
      this.survey = source.getSurvey();
      this.feature = source.getFeature();
      this.task = source.getTask();
      this.created = source.getCreated();
      this.lastModified = source.getLastModified();
      this.responses = source.getResponses();
    }
    @Override
    public Submission.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public Submission.Builder setSurvey(Survey survey) {
      if (survey == null) {
        throw new NullPointerException("Null survey");
      }
      this.survey = survey;
      return this;
    }
    @Override
    public Submission.Builder setFeature(Feature feature) {
      if (feature == null) {
        throw new NullPointerException("Null feature");
      }
      this.feature = feature;
      return this;
    }
    @Override
    public Submission.Builder setTask(Task task) {
      if (task == null) {
        throw new NullPointerException("Null task");
      }
      this.task = task;
      return this;
    }
    @Override
    public Submission.Builder setCreated(AuditInfo created) {
      if (created == null) {
        throw new NullPointerException("Null created");
      }
      this.created = created;
      return this;
    }
    @Override
    public Submission.Builder setLastModified(AuditInfo lastModified) {
      if (lastModified == null) {
        throw new NullPointerException("Null lastModified");
      }
      this.lastModified = lastModified;
      return this;
    }
    @Override
    public Submission.Builder setResponses(ResponseMap responses) {
      if (responses == null) {
        throw new NullPointerException("Null responses");
      }
      this.responses = responses;
      return this;
    }
    @Override
    public Submission build() {
      String missing = "";
      if (this.id == null) {
        missing += " id";
      }
      if (this.survey == null) {
        missing += " survey";
      }
      if (this.feature == null) {
        missing += " feature";
      }
      if (this.task == null) {
        missing += " task";
      }
      if (this.created == null) {
        missing += " created";
      }
      if (this.lastModified == null) {
        missing += " lastModified";
      }
      if (this.responses == null) {
        missing += " responses";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_Submission(
          this.id,
          this.survey,
          this.feature,
          this.task,
          this.created,
          this.lastModified,
          this.responses);
    }
  }

}
