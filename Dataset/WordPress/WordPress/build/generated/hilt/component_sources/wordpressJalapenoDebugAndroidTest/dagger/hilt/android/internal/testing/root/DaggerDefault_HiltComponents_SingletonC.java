// Generated by Dagger (https://dagger.dev).
package dagger.hilt.android.internal.testing.root;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.ImageLoader;
import com.automattic.android.tracks.crashlogging.CrashLogging;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.gson.Gson;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SetFactory;
import dagger.internal.SingleCheck;
import java.net.CookieManager;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlin.coroutines.CoroutineContext;
import okhttp3.CookieJar;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import org.wordpress.android.AppInitializer;
import org.wordpress.android.AppInitializer_Factory;
import org.wordpress.android.AppInitializer_MembersInjector;
import org.wordpress.android.UserAgentTest;
import org.wordpress.android.WellSqlInitializer;
import org.wordpress.android.WordPressApp_MembersInjector;
import org.wordpress.android.WordPressDebug;
import org.wordpress.android.datasets.ReaderBlogTableWrapper;
import org.wordpress.android.datasets.ReaderDiscoverCardsTableWrapper;
import org.wordpress.android.datasets.wrappers.ReaderCommentTableWrapper;
import org.wordpress.android.datasets.wrappers.ReaderPostTableWrapper;
import org.wordpress.android.datasets.wrappers.ReaderTagTableWrapper;
import org.wordpress.android.e2e.BlockEditorTests;
import org.wordpress.android.e2e.ContactUsTests;
import org.wordpress.android.e2e.EditorTests;
import org.wordpress.android.e2e.LoginTests;
import org.wordpress.android.e2e.ReaderTests;
import org.wordpress.android.e2e.SignUpTests;
import org.wordpress.android.e2e.StatsTests;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.model.BloggingRemindersMapper;
import org.wordpress.android.fluxc.model.SiteHomepageSettingsMapper;
import org.wordpress.android.fluxc.model.SiteModel;
import org.wordpress.android.fluxc.model.comments.CommentsMapper;
import org.wordpress.android.fluxc.model.encryptedlogging.LogEncrypter;
import org.wordpress.android.fluxc.model.plans.PlanOffersMapper;
import org.wordpress.android.fluxc.model.scan.threat.ThreatMapper;
import org.wordpress.android.fluxc.model.stats.InsightsMapper;
import org.wordpress.android.fluxc.model.stats.PostDetailStatsMapper;
import org.wordpress.android.fluxc.model.stats.time.TimeStatsMapper;
import org.wordpress.android.fluxc.module.DatabaseModule;
import org.wordpress.android.fluxc.module.DatabaseModule_ProvideBloggingPromptsDaoFactory;
import org.wordpress.android.fluxc.module.DatabaseModule_ProvideBloggingRemindersDaoFactory;
import org.wordpress.android.fluxc.module.DatabaseModule_ProvideCommentsDaoFactory;
import org.wordpress.android.fluxc.module.DatabaseModule_ProvideDashboardCardsDaoFactory;
import org.wordpress.android.fluxc.module.DatabaseModule_ProvideDatabaseFactory;
import org.wordpress.android.fluxc.module.DatabaseModule_ProvidePlanOffersDaoFactory;
import org.wordpress.android.fluxc.module.OkHttpClientModule_ProvideMediaOkHttpClientInstanceCustomSSLFactory;
import org.wordpress.android.fluxc.module.OkHttpClientModule_ProvideMediaOkHttpClientInstanceFactory;
import org.wordpress.android.fluxc.module.OkHttpClientModule_ProvideNoRedirectsOkHttpClientBuilderFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideCookieJarFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideCookieManagerFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideCoroutineContextFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideGsonFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideMemorizingTrustManagerFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideNoRedirectsRequestQueueFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideRequestQueueCustomSSLFactory;
import org.wordpress.android.fluxc.module.ReleaseNetworkModule_ProvideRequestQueueFactory;
import org.wordpress.android.fluxc.module.ReleaseToolsModule;
import org.wordpress.android.fluxc.network.HTTPAuthManager;
import org.wordpress.android.fluxc.network.MemorizingTrustManager;
import org.wordpress.android.fluxc.network.UserAgent;
import org.wordpress.android.fluxc.network.discovery.DiscoveryWPAPIRestClient;
import org.wordpress.android.fluxc.network.discovery.DiscoveryXMLRPCClient;
import org.wordpress.android.fluxc.network.discovery.SelfHostedEndpointFinder;
import org.wordpress.android.fluxc.network.rest.wpapi.NonceRestClient;
import org.wordpress.android.fluxc.network.rest.wpapi.WPAPIEncodedBodyRequestBuilder;
import org.wordpress.android.fluxc.network.rest.wpapi.WPAPIGsonRequestBuilder;
import org.wordpress.android.fluxc.network.rest.wpapi.plugin.PluginWPAPIRestClient;
import org.wordpress.android.fluxc.network.rest.wpapi.reactnative.ReactNativeWPAPIRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.WPComGsonRequestBuilder;
import org.wordpress.android.fluxc.network.rest.wpcom.account.AccountRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.activity.ActivityLogRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.auth.AccessToken;
import org.wordpress.android.fluxc.network.rest.wpcom.auth.Authenticator;
import org.wordpress.android.fluxc.network.rest.wpcom.bloggingprompts.BloggingPromptsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.comment.CommentRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.common.LikesUtilsProvider;
import org.wordpress.android.fluxc.network.rest.wpcom.dashboard.CardsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.encryptedlog.EncryptedLogRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.experiments.ExperimentRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.jetpacktunnel.JetpackRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.jetpacktunnel.JetpackTunnelGsonRequestBuilder;
import org.wordpress.android.fluxc.network.rest.wpcom.media.MediaResponseUtils;
import org.wordpress.android.fluxc.network.rest.wpcom.media.MediaRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.media.wpv2.WPV2MediaRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.planoffers.PlanOffersRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.plugin.PluginJetpackTunnelRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.plugin.PluginRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.post.PostRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.products.ProductsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.qrcodeauth.QRCodeAuthRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.reactnative.ReactNativeWPComRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.reader.ReaderRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.scan.ScanRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.site.PrivateAtomicCookie;
import org.wordpress.android.fluxc.network.rest.wpcom.site.SiteHomepageRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.site.SiteRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.site.XPostsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.AllTimeInsightsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.CommentsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.FollowersRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.LatestPostInsightsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.MostPopularRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.PostingActivityRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.PublicizeRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.SummaryRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.TagsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.TodayInsightsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.AuthorsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.ClicksRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.CountryViewsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.FileDownloadsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.PostAndPageViewsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.ReferrersRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.SearchTermsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.VideoPlaysRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stats.time.VisitAndViewsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.stockmedia.StockMediaRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.taxonomy.TaxonomyRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.theme.ThemeRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.transactions.TransactionsRestClient;
import org.wordpress.android.fluxc.network.rest.wpcom.whatsnew.WhatsNewRestClient;
import org.wordpress.android.fluxc.network.utils.CurrentDateUtils;
import org.wordpress.android.fluxc.network.wporg.plugin.PluginWPOrgClient;
import org.wordpress.android.fluxc.network.xmlrpc.XMLRPCRequestBuilder;
import org.wordpress.android.fluxc.network.xmlrpc.comment.CommentXMLRPCClient;
import org.wordpress.android.fluxc.network.xmlrpc.comment.CommentsXMLRPCClient;
import org.wordpress.android.fluxc.network.xmlrpc.media.MediaXMLRPCClient;
import org.wordpress.android.fluxc.network.xmlrpc.post.PostXMLRPCClient;
import org.wordpress.android.fluxc.network.xmlrpc.site.SiteXMLRPCClient;
import org.wordpress.android.fluxc.network.xmlrpc.taxonomy.TaxonomyXMLRPCClient;
import org.wordpress.android.fluxc.persistence.ActivityLogSqlUtils;
import org.wordpress.android.fluxc.persistence.BloggingRemindersDao;
import org.wordpress.android.fluxc.persistence.DynamicCardSqlUtils;
import org.wordpress.android.fluxc.persistence.EncryptedLogSqlUtils;
import org.wordpress.android.fluxc.persistence.InsightTypeSqlUtils;
import org.wordpress.android.fluxc.persistence.InsightsSqlUtils;
import org.wordpress.android.fluxc.persistence.ListItemSqlUtils;
import org.wordpress.android.fluxc.persistence.ListSqlUtils;
import org.wordpress.android.fluxc.persistence.PlanOffersDao;
import org.wordpress.android.fluxc.persistence.PlanOffersSqlUtils;
import org.wordpress.android.fluxc.persistence.PluginSqlUtilsWrapper;
import org.wordpress.android.fluxc.persistence.PostSchedulingNotificationSqlUtils;
import org.wordpress.android.fluxc.persistence.PostSqlUtils;
import org.wordpress.android.fluxc.persistence.QuickStartSqlUtils;
import org.wordpress.android.fluxc.persistence.ScanSqlUtils;
import org.wordpress.android.fluxc.persistence.SiteSqlUtils;
import org.wordpress.android.fluxc.persistence.StatsRequestSqlUtils;
import org.wordpress.android.fluxc.persistence.StatsSqlUtils;
import org.wordpress.android.fluxc.persistence.StockMediaSqlUtils;
import org.wordpress.android.fluxc.persistence.ThreatSqlUtils;
import org.wordpress.android.fluxc.persistence.TimeStatsSqlUtils;
import org.wordpress.android.fluxc.persistence.WPAndroidDatabase;
import org.wordpress.android.fluxc.persistence.WhatsNewSqlUtils;
import org.wordpress.android.fluxc.persistence.XPostsSqlUtils;
import org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao;
import org.wordpress.android.fluxc.persistence.comments.CommentsDao;
import org.wordpress.android.fluxc.persistence.dashboard.CardsDao;
import org.wordpress.android.fluxc.store.AccountStore;
import org.wordpress.android.fluxc.store.ActivityLogStore;
import org.wordpress.android.fluxc.store.BloggingRemindersStore;
import org.wordpress.android.fluxc.store.CommentStore;
import org.wordpress.android.fluxc.store.DynamicCardStore;
import org.wordpress.android.fluxc.store.EditorThemeStore;
import org.wordpress.android.fluxc.store.EncryptedLogStore;
import org.wordpress.android.fluxc.store.ExperimentStore;
import org.wordpress.android.fluxc.store.JetpackStore;
import org.wordpress.android.fluxc.store.ListStore;
import org.wordpress.android.fluxc.store.MediaStore;
import org.wordpress.android.fluxc.store.MediaStore_Factory;
import org.wordpress.android.fluxc.store.MediaStore_MembersInjector;
import org.wordpress.android.fluxc.store.PageStore;
import org.wordpress.android.fluxc.store.PlanOffersStore;
import org.wordpress.android.fluxc.store.PluginCoroutineStore;
import org.wordpress.android.fluxc.store.PluginStore;
import org.wordpress.android.fluxc.store.PostSchedulingNotificationStore;
import org.wordpress.android.fluxc.store.PostStore;
import org.wordpress.android.fluxc.store.PostStore_Factory;
import org.wordpress.android.fluxc.store.PostStore_MembersInjector;
import org.wordpress.android.fluxc.store.ProductsStore;
import org.wordpress.android.fluxc.store.QuickStartStore;
import org.wordpress.android.fluxc.store.ReactNativeStore;
import org.wordpress.android.fluxc.store.ReaderStore;
import org.wordpress.android.fluxc.store.ScanStore;
import org.wordpress.android.fluxc.store.SiteOptionsStore;
import org.wordpress.android.fluxc.store.SiteStore;
import org.wordpress.android.fluxc.store.StatsStore;
import org.wordpress.android.fluxc.store.StockMediaStore;
import org.wordpress.android.fluxc.store.TaxonomyStore;
import org.wordpress.android.fluxc.store.ThemeStore;
import org.wordpress.android.fluxc.store.TransactionsStore;
import org.wordpress.android.fluxc.store.UploadStore;
import org.wordpress.android.fluxc.store.WhatsNewStore;
import org.wordpress.android.fluxc.store.XPostsStore;
import org.wordpress.android.fluxc.store.bloggingprompts.BloggingPromptsStore;
import org.wordpress.android.fluxc.store.dashboard.CardsStore;
import org.wordpress.android.fluxc.store.qrcodeauth.QRCodeAuthStore;
import org.wordpress.android.fluxc.store.stats.PostDetailStore;
import org.wordpress.android.fluxc.store.stats.insights.AllTimeInsightsStore;
import org.wordpress.android.fluxc.store.stats.insights.CommentsStore;
import org.wordpress.android.fluxc.store.stats.insights.FollowersStore;
import org.wordpress.android.fluxc.store.stats.insights.LatestPostInsightsStore;
import org.wordpress.android.fluxc.store.stats.insights.MostPopularInsightsStore;
import org.wordpress.android.fluxc.store.stats.insights.PostingActivityStore;
import org.wordpress.android.fluxc.store.stats.insights.PublicizeStore;
import org.wordpress.android.fluxc.store.stats.insights.SummaryStore;
import org.wordpress.android.fluxc.store.stats.insights.TagsStore;
import org.wordpress.android.fluxc.store.stats.insights.TodayInsightsStore;
import org.wordpress.android.fluxc.store.stats.time.AuthorsStore;
import org.wordpress.android.fluxc.store.stats.time.ClicksStore;
import org.wordpress.android.fluxc.store.stats.time.CountryViewsStore;
import org.wordpress.android.fluxc.store.stats.time.FileDownloadsStore;
import org.wordpress.android.fluxc.store.stats.time.PostAndPageViewsStore;
import org.wordpress.android.fluxc.store.stats.time.ReferrersStore;
import org.wordpress.android.fluxc.store.stats.time.SearchTermsStore;
import org.wordpress.android.fluxc.store.stats.time.VideoPlaysStore;
import org.wordpress.android.fluxc.store.stats.time.VisitsAndViewsStore;
import org.wordpress.android.fluxc.tools.CoroutineEngine;
import org.wordpress.android.fluxc.tools.FluxCImageLoader;
import org.wordpress.android.fluxc.tools.FormattableContentMapper;
import org.wordpress.android.fluxc.utils.AppLogWrapper;
import org.wordpress.android.fluxc.utils.BuildConfigWrapper;
import org.wordpress.android.fluxc.utils.CommentErrorUtilsWrapper;
import org.wordpress.android.fluxc.utils.CurrentTimeProvider;
import org.wordpress.android.fluxc.utils.DateTimeUtilsWrapper;
import org.wordpress.android.fluxc.utils.PreferenceUtils;
import org.wordpress.android.fluxc.utils.TimeZoneProvider;
import org.wordpress.android.login.GoogleFragment_MembersInjector;
import org.wordpress.android.login.Login2FaFragment;
import org.wordpress.android.login.LoginAnalyticsListener;
import org.wordpress.android.login.LoginBaseFormFragment_MembersInjector;
import org.wordpress.android.login.LoginEmailFragment;
import org.wordpress.android.login.LoginEmailPasswordFragment;
import org.wordpress.android.login.LoginGoogleFragment;
import org.wordpress.android.login.LoginMagicLinkRequestFragment;
import org.wordpress.android.login.LoginMagicLinkRequestFragment_MembersInjector;
import org.wordpress.android.login.LoginMagicLinkSentFragment;
import org.wordpress.android.login.LoginMagicLinkSentFragment_MembersInjector;
import org.wordpress.android.login.LoginSiteAddressFragment;
import org.wordpress.android.login.LoginSiteAddressFragment_MembersInjector;
import org.wordpress.android.login.LoginSiteAddressHelpDialogFragment;
import org.wordpress.android.login.LoginSiteAddressHelpDialogFragment_MembersInjector;
import org.wordpress.android.login.LoginUsernamePasswordFragment;
import org.wordpress.android.login.LoginWpcomService;
import org.wordpress.android.login.LoginWpcomService_MembersInjector;
import org.wordpress.android.login.SignupConfirmationFragment;
import org.wordpress.android.login.SignupConfirmationFragment_MembersInjector;
import org.wordpress.android.login.SignupGoogleFragment;
import org.wordpress.android.login.SignupMagicLinkFragment;
import org.wordpress.android.login.SignupMagicLinkFragment_MembersInjector;
import org.wordpress.android.login.di.LoginFragmentModule_Login2FaFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginEmailFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginEmailPasswordFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginGoogleFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginMagicLinkRequestFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginMagicLinkSentFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginSiteAddressFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginSiteAddressHelpDialogFragment;
import org.wordpress.android.login.di.LoginFragmentModule_LoginUsernamePasswordFragment;
import org.wordpress.android.login.di.LoginFragmentModule_SignupConfirmationScreen;
import org.wordpress.android.login.di.LoginFragmentModule_SignupGoogleFragment;
import org.wordpress.android.login.di.LoginFragmentModule_SignupMagicLinkFragment;
import org.wordpress.android.login.di.LoginServiceModule_LoginWpcomService;
import org.wordpress.android.models.InvitePeopleUtils;
import org.wordpress.android.models.NoticonUtils;
import org.wordpress.android.models.recommend.RecommendApiCallsProvider;
import org.wordpress.android.models.usecases.BatchModerateCommentsUseCase;
import org.wordpress.android.models.usecases.LocalCommentCacheUpdateHandler;
import org.wordpress.android.models.usecases.LocalCommentCacheUpdateUseCase;
import org.wordpress.android.models.usecases.ModerateCommentWithUndoUseCase;
import org.wordpress.android.models.usecases.ModerateCommentsResourceProvider;
import org.wordpress.android.models.usecases.PaginateCommentsResourceProvider;
import org.wordpress.android.models.usecases.PaginateCommentsUseCase;
import org.wordpress.android.models.usecases.UnifiedCommentsListHandler;
import org.wordpress.android.models.wrappers.CategoryNodeWrapper;
import org.wordpress.android.models.wrappers.RoleUtilsWrapper;
import org.wordpress.android.models.wrappers.SimpleDateFormatWrapper;
import org.wordpress.android.modules.AppConfigModule;
import org.wordpress.android.modules.AppConfigModule_ProvideAppSecretsFactory;
import org.wordpress.android.modules.AppConfigModule_ProvideEncryptedLoggingKeyFactory;
import org.wordpress.android.modules.AppConfigModule_ProvideUserAgentFactory;
import org.wordpress.android.modules.ApplicationModule_ContributeBasicDialog;
import org.wordpress.android.modules.ApplicationModule_ContributeCStatePickerDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeCountryPickerDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeDataTypeSelectionDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeDebugSettingsFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeInsightsManagementFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeReaderPostWebViewCachingFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeSettingsUsernameChangerFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeSiteSelectionDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeStatListFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeStatsDetailFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeStatsMinifiedWidgetConfigureFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeStatsViewAllFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeStatsViewsWidgetConfigureFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeSubfilterPageFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeUsernameChangerFullScreenDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ContributeViewModeSelectionDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ContributecommentFullScreenDialogFragment;
import org.wordpress.android.modules.ApplicationModule_ProvideBackupDownloadWizardManagerFactory;
import org.wordpress.android.modules.ApplicationModule_ProvideConnectionStatusLiveDataFactory;
import org.wordpress.android.modules.ApplicationModule_ProvideRestoreWizardManagerFactory;
import org.wordpress.android.modules.ApplicationModule_ProvideTenorGifClientFactory;
import org.wordpress.android.modules.ApplicationModule_ProvideWizardManagerFactory;
import org.wordpress.android.modules.CrashLoggingModule_Companion_ProvideCrashLoggingFactory;
import org.wordpress.android.modules.DummyInterceptorModule;
import org.wordpress.android.modules.DummyInterceptorModule_ProvideNetworkInterceptorFactory;
import org.wordpress.android.modules.HiltWrapper_ViewModelModule;
import org.wordpress.android.modules.InterceptorModuleTest;
import org.wordpress.android.modules.InterceptorModuleTest_ProvideMockingInterceptorFactory;
import org.wordpress.android.modules.LegacyModule;
import org.wordpress.android.modules.LegacyModule_ProvideImageCacheFactory;
import org.wordpress.android.modules.LegacyModule_ProvideOAuthAuthenicatorFactory;
import org.wordpress.android.modules.LoginAnalyticsModule;
import org.wordpress.android.modules.LoginAnalyticsModule_ProvideAnalyticsListenerFactory;
import org.wordpress.android.modules.SupportModule;
import org.wordpress.android.modules.SupportModule_ProvideSupportHelperFactory;
import org.wordpress.android.modules.SupportModule_ProvideZendeskHelperFactory;
import org.wordpress.android.modules.ThreadModule;
import org.wordpress.android.modules.ThreadModule_ProvideApplicationScopeFactory;
import org.wordpress.android.modules.ThreadModule_ProvideBackgroundDispatcherFactory;
import org.wordpress.android.modules.ThreadModule_ProvideDebouncerFactory;
import org.wordpress.android.modules.ThreadModule_ProvideIoDispatcherFactory;
import org.wordpress.android.modules.ThreadModule_ProvideUiDispatcherFactory;
import org.wordpress.android.modules.TrackerTestModule;
import org.wordpress.android.modules.TrackerTestModule_ProvideTrackerFactory;
import org.wordpress.android.modules.WordPressGlideModule;
import org.wordpress.android.modules.WordPressGlideModule_MembersInjector;
import org.wordpress.android.networking.AuthenticatorRequestTest;
import org.wordpress.android.networking.GlideRequestFactory;
import org.wordpress.android.networking.GravatarApiTest;
import org.wordpress.android.networking.GravatarApiTest_MembersInjector;
import org.wordpress.android.networking.OAuthAuthenticator;
import org.wordpress.android.networking.WPNetworkImageViewTest;
import org.wordpress.android.push.GCMMessageHandler;
import org.wordpress.android.push.GCMMessageHandler_Factory;
import org.wordpress.android.push.GCMMessageService;
import org.wordpress.android.push.GCMMessageService_MembersInjector;
import org.wordpress.android.push.GCMRegistrationIntentService;
import org.wordpress.android.push.GCMRegistrationIntentService_MembersInjector;
import org.wordpress.android.push.NotificationsProcessingService;
import org.wordpress.android.push.NotificationsProcessingService_MembersInjector;
import org.wordpress.android.support.SupportHelper;
import org.wordpress.android.support.ZendeskHelper;
import org.wordpress.android.ui.ActivityLauncherWrapper;
import org.wordpress.android.ui.AddQuickPressShortcutActivity;
import org.wordpress.android.ui.AddQuickPressShortcutActivity_MembersInjector;
import org.wordpress.android.ui.CommentFullScreenDialogFragment;
import org.wordpress.android.ui.CommentFullScreenDialogFragment_MembersInjector;
import org.wordpress.android.ui.CommentFullScreenDialogViewModel;
import org.wordpress.android.ui.JetpackConnectionResultActivity;
import org.wordpress.android.ui.JetpackConnectionResultActivity_MembersInjector;
import org.wordpress.android.ui.JetpackRemoteInstallFragment;
import org.wordpress.android.ui.JetpackRemoteInstallFragment_MembersInjector;
import org.wordpress.android.ui.JetpackRemoteInstallViewModel;
import org.wordpress.android.ui.ShareIntentReceiverActivity;
import org.wordpress.android.ui.ShareIntentReceiverActivity_MembersInjector;
import org.wordpress.android.ui.ShareIntentReceiverFragment;
import org.wordpress.android.ui.ShareIntentReceiverFragment_MembersInjector;
import org.wordpress.android.ui.ShortcutsNavigator_Factory;
import org.wordpress.android.ui.WPWebViewActivity;
import org.wordpress.android.ui.WPWebViewActivity_MembersInjector;
import org.wordpress.android.ui.about.UnifiedAboutActivity;
import org.wordpress.android.ui.about.UnifiedAboutActivity_MembersInjector;
import org.wordpress.android.ui.about.UnifiedAboutTracker;
import org.wordpress.android.ui.about.UnifiedAboutViewModel;
import org.wordpress.android.ui.accounts.HelpActivity;
import org.wordpress.android.ui.accounts.HelpActivity_MembersInjector;
import org.wordpress.android.ui.accounts.LoginActivity;
import org.wordpress.android.ui.accounts.LoginActivity_MembersInjector;
import org.wordpress.android.ui.accounts.LoginEpilogueActivity;
import org.wordpress.android.ui.accounts.LoginEpilogueActivity_MembersInjector;
import org.wordpress.android.ui.accounts.LoginEpilogueViewModel;
import org.wordpress.android.ui.accounts.LoginMagicLinkInterceptActivity;
import org.wordpress.android.ui.accounts.LoginMagicLinkInterceptActivity_MembersInjector;
import org.wordpress.android.ui.accounts.LoginViewModel;
import org.wordpress.android.ui.accounts.PostSignupInterstitialActivity;
import org.wordpress.android.ui.accounts.PostSignupInterstitialActivity_MembersInjector;
import org.wordpress.android.ui.accounts.SignupEpilogueActivity;
import org.wordpress.android.ui.accounts.SignupEpilogueActivity_MembersInjector;
import org.wordpress.android.ui.accounts.UnifiedLoginTracker;
import org.wordpress.android.ui.accounts.login.LoginEpilogueFragment;
import org.wordpress.android.ui.accounts.login.LoginEpilogueFragment_MembersInjector;
import org.wordpress.android.ui.accounts.login.LoginPrologueFragment;
import org.wordpress.android.ui.accounts.login.LoginPrologueFragment_MembersInjector;
import org.wordpress.android.ui.accounts.login.LoginPrologueViewModel;
import org.wordpress.android.ui.accounts.login.jetpack.LoginNoSitesFragment;
import org.wordpress.android.ui.accounts.login.jetpack.LoginNoSitesFragment_MembersInjector;
import org.wordpress.android.ui.accounts.login.jetpack.LoginNoSitesViewModel;
import org.wordpress.android.ui.accounts.login.jetpack.LoginSiteCheckErrorFragment;
import org.wordpress.android.ui.accounts.login.jetpack.LoginSiteCheckErrorFragment_MembersInjector;
import org.wordpress.android.ui.accounts.login.jetpack.LoginSiteCheckErrorViewModel;
import org.wordpress.android.ui.accounts.signup.BaseUsernameChangerFullScreenDialogFragment_MembersInjector;
import org.wordpress.android.ui.accounts.signup.SettingsUsernameChangerFragment;
import org.wordpress.android.ui.accounts.signup.SignupEpilogueFragment;
import org.wordpress.android.ui.accounts.signup.SignupEpilogueFragment_MembersInjector;
import org.wordpress.android.ui.accounts.signup.SignupUtils;
import org.wordpress.android.ui.accounts.signup.UsernameChangerFullScreenDialogFragment;
import org.wordpress.android.ui.activitylog.detail.ActivityLogDetailFragment;
import org.wordpress.android.ui.activitylog.detail.ActivityLogDetailFragment_MembersInjector;
import org.wordpress.android.ui.activitylog.list.ActivityLogListActivity;
import org.wordpress.android.ui.activitylog.list.ActivityLogListFragment;
import org.wordpress.android.ui.activitylog.list.ActivityLogListFragment_MembersInjector;
import org.wordpress.android.ui.activitylog.list.filter.ActivityLogTypeFilterFragment;
import org.wordpress.android.ui.activitylog.list.filter.ActivityLogTypeFilterFragment_MembersInjector;
import org.wordpress.android.ui.activitylog.list.filter.ActivityLogTypeFilterViewModel;
import org.wordpress.android.ui.bloggingprompts.onboarding.BloggingPromptsOnboardingAnalyticsTracker;
import org.wordpress.android.ui.bloggingprompts.onboarding.BloggingPromptsOnboardingDialogFragment;
import org.wordpress.android.ui.bloggingprompts.onboarding.BloggingPromptsOnboardingDialogFragment_MembersInjector;
import org.wordpress.android.ui.bloggingprompts.onboarding.BloggingPromptsOnboardingUiStateMapper;
import org.wordpress.android.ui.bloggingprompts.onboarding.BloggingPromptsOnboardingViewModel;
import org.wordpress.android.ui.bloggingreminders.BloggingReminderBottomSheetFragment;
import org.wordpress.android.ui.bloggingreminders.BloggingReminderBottomSheetFragment_MembersInjector;
import org.wordpress.android.ui.bloggingreminders.BloggingReminderTimePicker;
import org.wordpress.android.ui.bloggingreminders.BloggingReminderTimePicker_MembersInjector;
import org.wordpress.android.ui.bloggingreminders.BloggingRemindersAdapter;
import org.wordpress.android.ui.bloggingreminders.BloggingRemindersAnalyticsTracker;
import org.wordpress.android.ui.bloggingreminders.BloggingRemindersManager;
import org.wordpress.android.ui.bloggingreminders.BloggingRemindersModelMapper;
import org.wordpress.android.ui.bloggingreminders.BloggingRemindersViewModel;
import org.wordpress.android.ui.bloggingreminders.DayLabelUtils;
import org.wordpress.android.ui.bloggingreminders.DaySelectionBuilder;
import org.wordpress.android.ui.bloggingreminders.DaysProvider;
import org.wordpress.android.ui.bloggingreminders.EpilogueBuilder;
import org.wordpress.android.ui.bloggingreminders.PrologueBuilder;
import org.wordpress.android.ui.comments.CommentDetailFragment;
import org.wordpress.android.ui.comments.CommentDetailFragment_MembersInjector;
import org.wordpress.android.ui.comments.CommentsDetailActivity;
import org.wordpress.android.ui.comments.CommentsDetailActivity_MembersInjector;
import org.wordpress.android.ui.comments.EditCommentActivity;
import org.wordpress.android.ui.comments.EditCommentActivity_MembersInjector;
import org.wordpress.android.ui.comments.unified.CommentListUiModelHelper;
import org.wordpress.android.ui.comments.unified.CommentListUiUtils;
import org.wordpress.android.ui.comments.unified.CommentsStoreAdapter;
import org.wordpress.android.ui.comments.unified.EditCancelDialogFragment;
import org.wordpress.android.ui.comments.unified.EditCancelDialogFragment_MembersInjector;
import org.wordpress.android.ui.comments.unified.UnifiedCommentActivityViewModel;
import org.wordpress.android.ui.comments.unified.UnifiedCommentDetailsFragment;
import org.wordpress.android.ui.comments.unified.UnifiedCommentListAdapter;
import org.wordpress.android.ui.comments.unified.UnifiedCommentListAdapter_MembersInjector;
import org.wordpress.android.ui.comments.unified.UnifiedCommentListFragment;
import org.wordpress.android.ui.comments.unified.UnifiedCommentListFragment_MembersInjector;
import org.wordpress.android.ui.comments.unified.UnifiedCommentListViewModel;
import org.wordpress.android.ui.comments.unified.UnifiedCommentsActivity;
import org.wordpress.android.ui.comments.unified.UnifiedCommentsActivity_MembersInjector;
import org.wordpress.android.ui.comments.unified.UnifiedCommentsDetailsActivity;
import org.wordpress.android.ui.comments.unified.UnifiedCommentsEditFragment;
import org.wordpress.android.ui.comments.unified.UnifiedCommentsEditFragment_MembersInjector;
import org.wordpress.android.ui.comments.unified.UnifiedCommentsEditViewModel;
import org.wordpress.android.ui.comments.unified.UnrepliedCommentsUtils;
import org.wordpress.android.ui.comments.unified.usecase.GetCommentUseCase;
import org.wordpress.android.ui.debug.DebugSettingsFragment;
import org.wordpress.android.ui.debug.DebugSettingsFragment_MembersInjector;
import org.wordpress.android.ui.debug.DebugSettingsViewModel;
import org.wordpress.android.ui.debug.cookies.DebugCookieManager;
import org.wordpress.android.ui.debug.cookies.DebugCookiesFragment;
import org.wordpress.android.ui.debug.cookies.DebugCookiesFragment_MembersInjector;
import org.wordpress.android.ui.debug.cookies.DebugCookiesViewModel;
import org.wordpress.android.ui.deeplinks.DeepLinkNavigator;
import org.wordpress.android.ui.deeplinks.DeepLinkTrackingUtils;
import org.wordpress.android.ui.deeplinks.DeepLinkUriUtils;
import org.wordpress.android.ui.deeplinks.DeepLinkingIntentReceiverActivity;
import org.wordpress.android.ui.deeplinks.DeepLinkingIntentReceiverActivity_MembersInjector;
import org.wordpress.android.ui.deeplinks.DeepLinkingIntentReceiverViewModel;
import org.wordpress.android.ui.deeplinks.handlers.DeepLinkHandlers;
import org.wordpress.android.ui.deeplinks.handlers.EditorLinkHandler;
import org.wordpress.android.ui.deeplinks.handlers.NotificationsLinkHandler;
import org.wordpress.android.ui.deeplinks.handlers.PagesLinkHandler;
import org.wordpress.android.ui.deeplinks.handlers.QRCodeAuthLinkHandler;
import org.wordpress.android.ui.deeplinks.handlers.ReaderLinkHandler;
import org.wordpress.android.ui.deeplinks.handlers.ServerTrackingHandler;
import org.wordpress.android.ui.deeplinks.handlers.StartLinkHandler;
import org.wordpress.android.ui.deeplinks.handlers.StatsLinkHandler;
import org.wordpress.android.ui.domains.DomainRegistrationActivity;
import org.wordpress.android.ui.domains.DomainRegistrationActivity_MembersInjector;
import org.wordpress.android.ui.domains.DomainRegistrationDetailsFragment;
import org.wordpress.android.ui.domains.DomainRegistrationDetailsFragment_CountryPickerDialogFragment_MembersInjector;
import org.wordpress.android.ui.domains.DomainRegistrationDetailsFragment_MembersInjector;
import org.wordpress.android.ui.domains.DomainRegistrationDetailsFragment_StatePickerDialogFragment_MembersInjector;
import org.wordpress.android.ui.domains.DomainRegistrationDetailsViewModel;
import org.wordpress.android.ui.domains.DomainRegistrationMainViewModel;
import org.wordpress.android.ui.domains.DomainRegistrationResultFragment;
import org.wordpress.android.ui.domains.DomainRegistrationResultFragment_MembersInjector;
import org.wordpress.android.ui.domains.DomainSuggestionsFragment;
import org.wordpress.android.ui.domains.DomainSuggestionsFragment_MembersInjector;
import org.wordpress.android.ui.domains.DomainSuggestionsViewModel;
import org.wordpress.android.ui.domains.DomainsDashboardFragment;
import org.wordpress.android.ui.domains.DomainsDashboardFragment_MembersInjector;
import org.wordpress.android.ui.domains.DomainsDashboardViewModel;
import org.wordpress.android.ui.domains.usecases.CreateCartUseCase;
import org.wordpress.android.ui.domains.usecases.FetchPlansUseCase;
import org.wordpress.android.ui.engagement.EngagedPeopleListActivity;
import org.wordpress.android.ui.engagement.EngagedPeopleListActivity_MembersInjector;
import org.wordpress.android.ui.engagement.EngagedPeopleListFragment;
import org.wordpress.android.ui.engagement.EngagedPeopleListFragment_MembersInjector;
import org.wordpress.android.ui.engagement.EngagedPeopleListViewModel;
import org.wordpress.android.ui.engagement.EngagementUtils;
import org.wordpress.android.ui.engagement.GetLikesHandler;
import org.wordpress.android.ui.engagement.GetLikesUseCase;
import org.wordpress.android.ui.engagement.ListScenarioUtils;
import org.wordpress.android.ui.engagement.UserProfileBottomSheetFragment;
import org.wordpress.android.ui.engagement.UserProfileBottomSheetFragment_MembersInjector;
import org.wordpress.android.ui.engagement.UserProfileViewModel;
import org.wordpress.android.ui.featureintroduction.FeatureIntroductionDialogFragment_MembersInjector;
import org.wordpress.android.ui.featureintroduction.FeatureIntroductionViewModel;
import org.wordpress.android.ui.history.HistoryAdapter;
import org.wordpress.android.ui.history.HistoryAdapter_MembersInjector;
import org.wordpress.android.ui.history.HistoryDetailContainerFragment;
import org.wordpress.android.ui.history.HistoryDetailContainerFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.JetpackCapabilitiesUseCase;
import org.wordpress.android.ui.jetpack.backup.download.BackupDownloadActivity;
import org.wordpress.android.ui.jetpack.backup.download.BackupDownloadFragment;
import org.wordpress.android.ui.jetpack.backup.download.BackupDownloadFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.backup.download.BackupDownloadStep;
import org.wordpress.android.ui.jetpack.backup.download.BackupDownloadStepsProvider;
import org.wordpress.android.ui.jetpack.backup.download.BackupDownloadViewModel;
import org.wordpress.android.ui.jetpack.backup.download.builders.BackupDownloadStateListItemBuilder;
import org.wordpress.android.ui.jetpack.backup.download.usecases.GetBackupDownloadStatusUseCase;
import org.wordpress.android.ui.jetpack.backup.download.usecases.PostBackupDownloadUseCase;
import org.wordpress.android.ui.jetpack.backup.download.usecases.PostDismissBackupDownloadUseCase;
import org.wordpress.android.ui.jetpack.common.CheckboxSpannableLabel;
import org.wordpress.android.ui.jetpack.common.providers.JetpackAvailableItemsProvider;
import org.wordpress.android.ui.jetpack.restore.RestoreActivity;
import org.wordpress.android.ui.jetpack.restore.RestoreFragment;
import org.wordpress.android.ui.jetpack.restore.RestoreFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.restore.RestoreStep;
import org.wordpress.android.ui.jetpack.restore.RestoreStepsProvider;
import org.wordpress.android.ui.jetpack.restore.RestoreViewModel;
import org.wordpress.android.ui.jetpack.restore.builders.RestoreStateListItemBuilder;
import org.wordpress.android.ui.jetpack.restore.usecases.GetRestoreStatusUseCase;
import org.wordpress.android.ui.jetpack.restore.usecases.PostRestoreUseCase;
import org.wordpress.android.ui.jetpack.scan.ScanFragment;
import org.wordpress.android.ui.jetpack.scan.ScanFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.scan.ScanViewModel;
import org.wordpress.android.ui.jetpack.scan.builders.ScanStateListItemsBuilder;
import org.wordpress.android.ui.jetpack.scan.builders.ThreatItemBuilder;
import org.wordpress.android.ui.jetpack.scan.details.ThreatDetailsFragment;
import org.wordpress.android.ui.jetpack.scan.details.ThreatDetailsFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.scan.details.ThreatDetailsListItemsBuilder;
import org.wordpress.android.ui.jetpack.scan.details.ThreatDetailsViewModel;
import org.wordpress.android.ui.jetpack.scan.details.usecases.GetThreatModelUseCase;
import org.wordpress.android.ui.jetpack.scan.details.usecases.IgnoreThreatUseCase;
import org.wordpress.android.ui.jetpack.scan.history.ScanHistoryFragment;
import org.wordpress.android.ui.jetpack.scan.history.ScanHistoryFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.scan.history.ScanHistoryListFragment;
import org.wordpress.android.ui.jetpack.scan.history.ScanHistoryListFragment_MembersInjector;
import org.wordpress.android.ui.jetpack.scan.history.ScanHistoryListViewModel;
import org.wordpress.android.ui.jetpack.scan.history.ScanHistoryViewModel;
import org.wordpress.android.ui.jetpack.scan.usecases.FetchFixThreatsStatusUseCase;
import org.wordpress.android.ui.jetpack.scan.usecases.FetchScanHistoryUseCase;
import org.wordpress.android.ui.jetpack.scan.usecases.FetchScanStateUseCase;
import org.wordpress.android.ui.jetpack.scan.usecases.FixThreatsUseCase;
import org.wordpress.android.ui.jetpack.scan.usecases.StartScanUseCase;
import org.wordpress.android.ui.jetpack.usecases.GetActivityLogItemUseCase;
import org.wordpress.android.ui.layoutpicker.LayoutPreviewFragment;
import org.wordpress.android.ui.layoutpicker.LayoutPreviewFragment_MembersInjector;
import org.wordpress.android.ui.layoutpicker.LayoutsAdapter;
import org.wordpress.android.ui.layoutpicker.LayoutsAdapter_MembersInjector;
import org.wordpress.android.ui.main.AddContentAdapter;
import org.wordpress.android.ui.main.AddContentAdapter_MembersInjector;
import org.wordpress.android.ui.main.MainBottomSheetFragment;
import org.wordpress.android.ui.main.MainBottomSheetFragment_MembersInjector;
import org.wordpress.android.ui.main.MeFragment;
import org.wordpress.android.ui.main.MeFragment_MembersInjector;
import org.wordpress.android.ui.main.MeViewModel;
import org.wordpress.android.ui.main.SitePickerActivity;
import org.wordpress.android.ui.main.SitePickerActivity_MembersInjector;
import org.wordpress.android.ui.main.SitePickerAdapter;
import org.wordpress.android.ui.main.SitePickerAdapter_MembersInjector;
import org.wordpress.android.ui.main.WPMainActivity;
import org.wordpress.android.ui.main.WPMainActivity_MembersInjector;
import org.wordpress.android.ui.main.utils.MeGravatarLoader;
import org.wordpress.android.ui.media.ExoPlayerUtils;
import org.wordpress.android.ui.media.MediaBrowserActivity;
import org.wordpress.android.ui.media.MediaBrowserActivity_MembersInjector;
import org.wordpress.android.ui.media.MediaGridAdapter;
import org.wordpress.android.ui.media.MediaGridAdapter_MembersInjector;
import org.wordpress.android.ui.media.MediaGridFragment;
import org.wordpress.android.ui.media.MediaGridFragment_MembersInjector;
import org.wordpress.android.ui.media.MediaPreviewActivity;
import org.wordpress.android.ui.media.MediaPreviewActivity_MembersInjector;
import org.wordpress.android.ui.media.MediaPreviewFragment;
import org.wordpress.android.ui.media.MediaPreviewFragment_MembersInjector;
import org.wordpress.android.ui.media.MediaSettingsActivity;
import org.wordpress.android.ui.media.MediaSettingsActivity_MembersInjector;
import org.wordpress.android.ui.media.VideoLoader;
import org.wordpress.android.ui.media.services.MediaDeleteService;
import org.wordpress.android.ui.media.services.MediaDeleteService_MembersInjector;
import org.wordpress.android.ui.mediapicker.MediaPickerActivity;
import org.wordpress.android.ui.mediapicker.MediaPickerActivity_MembersInjector;
import org.wordpress.android.ui.mediapicker.MediaPickerFragment;
import org.wordpress.android.ui.mediapicker.MediaPickerFragment_MembersInjector;
import org.wordpress.android.ui.mediapicker.MediaPickerTracker;
import org.wordpress.android.ui.mediapicker.MediaPickerViewModel;
import org.wordpress.android.ui.mediapicker.insert.DeviceListInsertUseCase;
import org.wordpress.android.ui.mediapicker.insert.GifMediaInsertUseCase;
import org.wordpress.android.ui.mediapicker.insert.MediaInsertHandlerFactory;
import org.wordpress.android.ui.mediapicker.insert.StockMediaInsertUseCase;
import org.wordpress.android.ui.mediapicker.loader.DeviceListBuilder;
import org.wordpress.android.ui.mediapicker.loader.DeviceMediaLoader;
import org.wordpress.android.ui.mediapicker.loader.GifMediaDataSource;
import org.wordpress.android.ui.mediapicker.loader.MediaLibraryDataSource;
import org.wordpress.android.ui.mediapicker.loader.MediaLoaderFactory;
import org.wordpress.android.ui.mediapicker.loader.StockMediaDataSource;
import org.wordpress.android.ui.mediapicker.loader.TenorGifClient;
import org.wordpress.android.ui.mlp.ModalLayoutPickerDimensionProvider;
import org.wordpress.android.ui.mlp.ModalLayoutPickerFragment;
import org.wordpress.android.ui.mlp.ModalLayoutPickerFragment_MembersInjector;
import org.wordpress.android.ui.mlp.ModalLayoutPickerTracker;
import org.wordpress.android.ui.mlp.SupportedBlocksProvider;
import org.wordpress.android.ui.mysite.CurrentAvatarSource;
import org.wordpress.android.ui.mysite.HomePageDataLoader;
import org.wordpress.android.ui.mysite.MySiteFragment;
import org.wordpress.android.ui.mysite.MySiteFragment_MembersInjector;
import org.wordpress.android.ui.mysite.MySiteSourceManager;
import org.wordpress.android.ui.mysite.MySiteViewModel;
import org.wordpress.android.ui.mysite.ScanAndBackupSource;
import org.wordpress.android.ui.mysite.SelectedSiteRepository;
import org.wordpress.android.ui.mysite.SelectedSiteSource;
import org.wordpress.android.ui.mysite.SiteIconProgressSource;
import org.wordpress.android.ui.mysite.SiteIconUploadHandler;
import org.wordpress.android.ui.mysite.SiteStoriesHandler;
import org.wordpress.android.ui.mysite.cards.DomainRegistrationCardShownTracker;
import org.wordpress.android.ui.mysite.cards.dashboard.CardsBuilder;
import org.wordpress.android.ui.mysite.cards.dashboard.CardsShownTracker;
import org.wordpress.android.ui.mysite.cards.dashboard.CardsSource;
import org.wordpress.android.ui.mysite.cards.dashboard.CardsTracker;
import org.wordpress.android.ui.mysite.cards.dashboard.bloggingprompts.BloggingPromptCardBuilder;
import org.wordpress.android.ui.mysite.cards.dashboard.bloggingprompts.BloggingPromptCardSource;
import org.wordpress.android.ui.mysite.cards.dashboard.bloggingprompts.BloggingPromptsCardAnalyticsTracker;
import org.wordpress.android.ui.mysite.cards.dashboard.posts.PostCardBuilder;
import org.wordpress.android.ui.mysite.cards.dashboard.todaysstats.TodaysStatsCardBuilder;
import org.wordpress.android.ui.mysite.cards.domainregistration.DomainRegistrationSource;
import org.wordpress.android.ui.mysite.cards.quickactions.QuickActionsCardBuilder;
import org.wordpress.android.ui.mysite.cards.quicklinksribbon.QuickLinkRibbonBuilder;
import org.wordpress.android.ui.mysite.cards.quickstart.QuickStartCardBuilder;
import org.wordpress.android.ui.mysite.cards.quickstart.QuickStartCardSource;
import org.wordpress.android.ui.mysite.cards.quickstart.QuickStartRepository;
import org.wordpress.android.ui.mysite.cards.siteinfo.SiteInfoHeaderCardBuilder;
import org.wordpress.android.ui.mysite.dynamiccards.DynamicCardMenuFragment;
import org.wordpress.android.ui.mysite.dynamiccards.DynamicCardMenuFragment_MembersInjector;
import org.wordpress.android.ui.mysite.dynamiccards.DynamicCardMenuViewModel;
import org.wordpress.android.ui.mysite.dynamiccards.DynamicCardsBuilder;
import org.wordpress.android.ui.mysite.dynamiccards.DynamicCardsSource;
import org.wordpress.android.ui.mysite.dynamiccards.quickstart.QuickStartItemBuilder;
import org.wordpress.android.ui.mysite.items.SiteItemsBuilder;
import org.wordpress.android.ui.mysite.items.SiteItemsTracker;
import org.wordpress.android.ui.mysite.items.categoryheader.SiteCategoryItemBuilder;
import org.wordpress.android.ui.mysite.items.listitem.SiteListItemBuilder;
import org.wordpress.android.ui.mysite.tabs.MySiteDefaultTabExperiment;
import org.wordpress.android.ui.mysite.tabs.MySiteTabFragment;
import org.wordpress.android.ui.mysite.tabs.MySiteTabFragment_MembersInjector;
import org.wordpress.android.ui.notifications.DismissNotificationReceiver;
import org.wordpress.android.ui.notifications.DismissNotificationReceiver_MembersInjector;
import org.wordpress.android.ui.notifications.NotesParseTest;
import org.wordpress.android.ui.notifications.NotificationManagerWrapper;
import org.wordpress.android.ui.notifications.NotificationsDetailActivity;
import org.wordpress.android.ui.notifications.NotificationsDetailActivity_MembersInjector;
import org.wordpress.android.ui.notifications.NotificationsDetailListFragment;
import org.wordpress.android.ui.notifications.NotificationsDetailListFragment_MembersInjector;
import org.wordpress.android.ui.notifications.NotificationsListFragment;
import org.wordpress.android.ui.notifications.NotificationsListFragmentPage;
import org.wordpress.android.ui.notifications.NotificationsListFragmentPage_MembersInjector;
import org.wordpress.android.ui.notifications.NotificationsListFragment_MembersInjector;
import org.wordpress.android.ui.notifications.NotificationsUtilsTest;
import org.wordpress.android.ui.notifications.SystemNotificationsTracker;
import org.wordpress.android.ui.notifications.adapters.NotesAdapter;
import org.wordpress.android.ui.notifications.adapters.NotesAdapter_MembersInjector;
import org.wordpress.android.ui.notifications.receivers.NotificationsPendingDraftsReceiver;
import org.wordpress.android.ui.notifications.receivers.NotificationsPendingDraftsReceiver_MembersInjector;
import org.wordpress.android.ui.notifications.utils.FormattableContentClickHandler;
import org.wordpress.android.ui.notifications.utils.NotificationsActionsWrapper;
import org.wordpress.android.ui.notifications.utils.NotificationsUtilsWrapper;
import org.wordpress.android.ui.notifications.utils.PendingDraftsNotificationsUtilsWrapper;
import org.wordpress.android.ui.pages.PageListFragment;
import org.wordpress.android.ui.pages.PageListFragment_MembersInjector;
import org.wordpress.android.ui.pages.PageParentFragment;
import org.wordpress.android.ui.pages.PageParentFragment_MembersInjector;
import org.wordpress.android.ui.pages.PageParentSearchFragment;
import org.wordpress.android.ui.pages.PageParentSearchFragment_MembersInjector;
import org.wordpress.android.ui.pages.PagesActivity;
import org.wordpress.android.ui.pages.PagesActivity_MembersInjector;
import org.wordpress.android.ui.pages.PagesFragment;
import org.wordpress.android.ui.pages.PagesFragment_MembersInjector;
import org.wordpress.android.ui.pages.SearchListFragment;
import org.wordpress.android.ui.pages.SearchListFragment_MembersInjector;
import org.wordpress.android.ui.people.InviteLinksApiCallsProvider;
import org.wordpress.android.ui.people.InviteLinksHandler;
import org.wordpress.android.ui.people.InviteLinksUseCase;
import org.wordpress.android.ui.people.PeopleInviteDialogFragment;
import org.wordpress.android.ui.people.PeopleInviteDialogFragment_MembersInjector;
import org.wordpress.android.ui.people.PeopleInviteFragment;
import org.wordpress.android.ui.people.PeopleInviteFragment_MembersInjector;
import org.wordpress.android.ui.people.PeopleInviteViewModel;
import org.wordpress.android.ui.people.PeopleListFragment;
import org.wordpress.android.ui.people.PeopleListFragment_MembersInjector;
import org.wordpress.android.ui.people.PeopleManagementActivity;
import org.wordpress.android.ui.people.PeopleManagementActivity_MembersInjector;
import org.wordpress.android.ui.people.PersonDetailFragment;
import org.wordpress.android.ui.people.PersonDetailFragment_MembersInjector;
import org.wordpress.android.ui.people.RoleChangeDialogFragment;
import org.wordpress.android.ui.people.RoleChangeDialogFragment_MembersInjector;
import org.wordpress.android.ui.people.RoleSelectDialogFragment;
import org.wordpress.android.ui.people.RoleSelectDialogFragment_MembersInjector;
import org.wordpress.android.ui.photopicker.DeviceMediaListBuilder;
import org.wordpress.android.ui.photopicker.MediaPickerLauncher;
import org.wordpress.android.ui.photopicker.PermissionsHandler;
import org.wordpress.android.ui.photopicker.PhotoPickerActivity;
import org.wordpress.android.ui.photopicker.PhotoPickerActivity_MembersInjector;
import org.wordpress.android.ui.photopicker.PhotoPickerFragment;
import org.wordpress.android.ui.photopicker.PhotoPickerFragment_MembersInjector;
import org.wordpress.android.ui.photopicker.PhotoPickerViewModel;
import org.wordpress.android.ui.plans.PlanDetailsFragment;
import org.wordpress.android.ui.plans.PlanDetailsFragment_MembersInjector;
import org.wordpress.android.ui.plans.PlansActivity;
import org.wordpress.android.ui.plans.PlansListAdapter;
import org.wordpress.android.ui.plans.PlansListAdapter_MembersInjector;
import org.wordpress.android.ui.plans.PlansListFragment;
import org.wordpress.android.ui.plans.PlansListFragment_MembersInjector;
import org.wordpress.android.ui.plans.PlansViewModel;
import org.wordpress.android.ui.plugins.PluginBrowserActivity;
import org.wordpress.android.ui.plugins.PluginBrowserActivity_MembersInjector;
import org.wordpress.android.ui.plugins.PluginDetailActivity;
import org.wordpress.android.ui.plugins.PluginDetailActivity_MembersInjector;
import org.wordpress.android.ui.plugins.PluginListFragment;
import org.wordpress.android.ui.plugins.PluginListFragment_MembersInjector;
import org.wordpress.android.ui.plugins.PluginUtilsWrapper;
import org.wordpress.android.ui.posts.AddCategoryFragment;
import org.wordpress.android.ui.posts.AddCategoryFragment_MembersInjector;
import org.wordpress.android.ui.posts.AddCategoryUseCase;
import org.wordpress.android.ui.posts.BasicDialog;
import org.wordpress.android.ui.posts.BasicDialogViewModel;
import org.wordpress.android.ui.posts.BasicDialog_MembersInjector;
import org.wordpress.android.ui.posts.EditPostActivity;
import org.wordpress.android.ui.posts.EditPostActivity_MembersInjector;
import org.wordpress.android.ui.posts.EditPostPublishSettingsFragment;
import org.wordpress.android.ui.posts.EditPostPublishSettingsViewModel;
import org.wordpress.android.ui.posts.EditPostRepository;
import org.wordpress.android.ui.posts.EditPostSettingsFragment;
import org.wordpress.android.ui.posts.EditPostSettingsFragment_MembersInjector;
import org.wordpress.android.ui.posts.EditorBloggingPromptsViewModel;
import org.wordpress.android.ui.posts.FeaturedImageHelper;
import org.wordpress.android.ui.posts.GetCategoriesUseCase;
import org.wordpress.android.ui.posts.GetPostTagsUseCase;
import org.wordpress.android.ui.posts.HistoryListFragment;
import org.wordpress.android.ui.posts.HistoryListFragment_MembersInjector;
import org.wordpress.android.ui.posts.PostDatePickerDialogFragment;
import org.wordpress.android.ui.posts.PostDatePickerDialogFragment_MembersInjector;
import org.wordpress.android.ui.posts.PostEditorAnalyticsSessionWrapper;
import org.wordpress.android.ui.posts.PostListCreateMenuFragment;
import org.wordpress.android.ui.posts.PostListCreateMenuFragment_MembersInjector;
import org.wordpress.android.ui.posts.PostListFragment;
import org.wordpress.android.ui.posts.PostListFragment_MembersInjector;
import org.wordpress.android.ui.posts.PostListMainViewModel;
import org.wordpress.android.ui.posts.PostModelUploadStatusTracker;
import org.wordpress.android.ui.posts.PostNotificationScheduleTimeDialogFragment;
import org.wordpress.android.ui.posts.PostNotificationScheduleTimeDialogFragment_MembersInjector;
import org.wordpress.android.ui.posts.PostSettingsTagsFragment;
import org.wordpress.android.ui.posts.PostSettingsUtils;
import org.wordpress.android.ui.posts.PostTimePickerDialogFragment;
import org.wordpress.android.ui.posts.PostTimePickerDialogFragment_MembersInjector;
import org.wordpress.android.ui.posts.PostUtilsTest;
import org.wordpress.android.ui.posts.PostUtilsWrapper;
import org.wordpress.android.ui.posts.PostsListActivity;
import org.wordpress.android.ui.posts.PostsListActivity_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingAddCategoryFragment;
import org.wordpress.android.ui.posts.PrepublishingAddCategoryFragment_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingAddCategoryViewModel;
import org.wordpress.android.ui.posts.PrepublishingBottomSheetFragment;
import org.wordpress.android.ui.posts.PrepublishingBottomSheetFragment_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingCategoriesFragment;
import org.wordpress.android.ui.posts.PrepublishingCategoriesFragment_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingCategoriesViewModel;
import org.wordpress.android.ui.posts.PrepublishingHomeAdapter;
import org.wordpress.android.ui.posts.PrepublishingHomeAdapter_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingHomeFragment;
import org.wordpress.android.ui.posts.PrepublishingHomeFragment_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingHomeViewModel;
import org.wordpress.android.ui.posts.PrepublishingTagsFragment;
import org.wordpress.android.ui.posts.PrepublishingTagsFragment_MembersInjector;
import org.wordpress.android.ui.posts.PrepublishingTagsViewModel;
import org.wordpress.android.ui.posts.PrepublishingViewModel;
import org.wordpress.android.ui.posts.PreviewStateHelper;
import org.wordpress.android.ui.posts.ProgressDialogHelper;
import org.wordpress.android.ui.posts.PublishNotificationReceiver;
import org.wordpress.android.ui.posts.PublishNotificationReceiverViewModel;
import org.wordpress.android.ui.posts.PublishNotificationReceiver_MembersInjector;
import org.wordpress.android.ui.posts.PublishSettingsFragment_MembersInjector;
import org.wordpress.android.ui.posts.QuickStartPromptDialogFragment;
import org.wordpress.android.ui.posts.QuickStartPromptDialogFragment_MembersInjector;
import org.wordpress.android.ui.posts.RemotePreviewLogicHelper;
import org.wordpress.android.ui.posts.SavePostToDbUseCase;
import org.wordpress.android.ui.posts.SelectCategoriesActivity;
import org.wordpress.android.ui.posts.SelectCategoriesActivity_MembersInjector;
import org.wordpress.android.ui.posts.TagsFragment_MembersInjector;
import org.wordpress.android.ui.posts.UpdateFeaturedImageUseCase;
import org.wordpress.android.ui.posts.UpdatePostTagsUseCase;
import org.wordpress.android.ui.posts.adapters.AuthorSelectionAdapter;
import org.wordpress.android.ui.posts.adapters.AuthorSelectionAdapter_MembersInjector;
import org.wordpress.android.ui.posts.editor.AztecEditorFragmentStaticWrapper;
import org.wordpress.android.ui.posts.editor.EditorActionsProvider;
import org.wordpress.android.ui.posts.editor.EditorTracker;
import org.wordpress.android.ui.posts.editor.ImageEditorFileUtils;
import org.wordpress.android.ui.posts.editor.ImageEditorTracker;
import org.wordpress.android.ui.posts.editor.StorePostViewModel;
import org.wordpress.android.ui.posts.editor.StoriesEventListener;
import org.wordpress.android.ui.posts.editor.XPostsCapabilityChecker;
import org.wordpress.android.ui.posts.editor.media.AddExistingMediaToPostUseCase;
import org.wordpress.android.ui.posts.editor.media.AddLocalMediaToPostUseCase;
import org.wordpress.android.ui.posts.editor.media.AppendMediaToEditorUseCase;
import org.wordpress.android.ui.posts.editor.media.CleanUpMediaToPostAssociationUseCase;
import org.wordpress.android.ui.posts.editor.media.CopyMediaToAppStorageUseCase;
import org.wordpress.android.ui.posts.editor.media.EditorMedia;
import org.wordpress.android.ui.posts.editor.media.GetMediaModelUseCase;
import org.wordpress.android.ui.posts.editor.media.OptimizeMediaUseCase;
import org.wordpress.android.ui.posts.editor.media.ReattachUploadingMediaUseCase;
import org.wordpress.android.ui.posts.editor.media.RemoveMediaUseCase;
import org.wordpress.android.ui.posts.editor.media.RetryFailedMediaUploadUseCase;
import org.wordpress.android.ui.posts.editor.media.UpdateMediaModelUseCase;
import org.wordpress.android.ui.posts.editor.media.UploadMediaUseCase;
import org.wordpress.android.ui.posts.prepublishing.PrepublishingPublishSettingsFragment;
import org.wordpress.android.ui.posts.prepublishing.PrepublishingPublishSettingsFragment_MembersInjector;
import org.wordpress.android.ui.posts.prepublishing.PrepublishingPublishSettingsViewModel;
import org.wordpress.android.ui.posts.prepublishing.home.usecases.GetButtonUiStateUseCase;
import org.wordpress.android.ui.posts.prepublishing.home.usecases.PublishPostImmediatelyUseCase;
import org.wordpress.android.ui.posts.prepublishing.visibility.usecases.UpdatePostStatusUseCase;
import org.wordpress.android.ui.posts.reactnative.ReactNativeRequestHandler;
import org.wordpress.android.ui.posts.services.AztecVideoLoader;
import org.wordpress.android.ui.posts.services.AztecVideoLoader_MembersInjector;
import org.wordpress.android.ui.prefs.AccountSettingsFragment;
import org.wordpress.android.ui.prefs.AccountSettingsFragment_MembersInjector;
import org.wordpress.android.ui.prefs.AppPrefsWrapper;
import org.wordpress.android.ui.prefs.AppSettingsActivity;
import org.wordpress.android.ui.prefs.AppSettingsFragment;
import org.wordpress.android.ui.prefs.AppSettingsFragment_MembersInjector;
import org.wordpress.android.ui.prefs.BlogPreferencesActivity;
import org.wordpress.android.ui.prefs.BlogPreferencesActivity_MembersInjector;
import org.wordpress.android.ui.prefs.MyProfileActivity;
import org.wordpress.android.ui.prefs.MyProfileActivity_MembersInjector;
import org.wordpress.android.ui.prefs.MyProfileFragment;
import org.wordpress.android.ui.prefs.MyProfileFragment_MembersInjector;
import org.wordpress.android.ui.prefs.ReleaseNotesActivity;
import org.wordpress.android.ui.prefs.ReleaseNotesActivity_MembersInjector;
import org.wordpress.android.ui.prefs.SiteSettingsFragment;
import org.wordpress.android.ui.prefs.SiteSettingsFragment_MembersInjector;
import org.wordpress.android.ui.prefs.SiteSettingsInterface;
import org.wordpress.android.ui.prefs.SiteSettingsInterface_MembersInjector;
import org.wordpress.android.ui.prefs.SiteSettingsTagDetailFragment;
import org.wordpress.android.ui.prefs.SiteSettingsTagListActivity;
import org.wordpress.android.ui.prefs.SiteSettingsTagListActivity_MembersInjector;
import org.wordpress.android.ui.prefs.accountsettings.AccountSettingsOptimisticUpdateHandler;
import org.wordpress.android.ui.prefs.accountsettings.AccountSettingsViewModel;
import org.wordpress.android.ui.prefs.accountsettings.module.AccountSettingsModule;
import org.wordpress.android.ui.prefs.accountsettings.module.AccountSettingsModule_ProvideConcurrentContinuationWrapperFactory;
import org.wordpress.android.ui.prefs.accountsettings.module.AccountSettingsModule_ProvideDefaultContinuationWrapperFactory;
import org.wordpress.android.ui.prefs.accountsettings.usecase.FetchAccountSettingsUseCase;
import org.wordpress.android.ui.prefs.accountsettings.usecase.GetAccountUseCase;
import org.wordpress.android.ui.prefs.accountsettings.usecase.GetSitesUseCase;
import org.wordpress.android.ui.prefs.accountsettings.usecase.PushAccountSettingsUseCase;
import org.wordpress.android.ui.prefs.categories.detail.CategoryDetailFragment;
import org.wordpress.android.ui.prefs.categories.detail.CategoryDetailFragment_MembersInjector;
import org.wordpress.android.ui.prefs.categories.detail.CategoryDetailViewModel;
import org.wordpress.android.ui.prefs.categories.list.CategoriesListFragment;
import org.wordpress.android.ui.prefs.categories.list.CategoriesListFragment_MembersInjector;
import org.wordpress.android.ui.prefs.categories.list.CategoriesListViewModel;
import org.wordpress.android.ui.prefs.homepage.HomepageSettingsDataLoader;
import org.wordpress.android.ui.prefs.homepage.HomepageSettingsDialog;
import org.wordpress.android.ui.prefs.homepage.HomepageSettingsDialog_MembersInjector;
import org.wordpress.android.ui.prefs.homepage.HomepageSettingsViewModel;
import org.wordpress.android.ui.prefs.language.LocalePickerBottomSheet;
import org.wordpress.android.ui.prefs.language.LocalePickerBottomSheet_MembersInjector;
import org.wordpress.android.ui.prefs.language.LocalePickerViewModel;
import org.wordpress.android.ui.prefs.notifications.FollowedBlogsProvider;
import org.wordpress.android.ui.prefs.notifications.NotificationsSettingsFragment;
import org.wordpress.android.ui.prefs.notifications.NotificationsSettingsFragment_MembersInjector;
import org.wordpress.android.ui.prefs.timezone.SiteSettingsTimezoneBottomSheet;
import org.wordpress.android.ui.prefs.timezone.SiteSettingsTimezoneBottomSheet_MembersInjector;
import org.wordpress.android.ui.prefs.timezone.SiteSettingsTimezoneViewModel;
import org.wordpress.android.ui.publicize.PublicizeAccountChooserListAdapter;
import org.wordpress.android.ui.publicize.PublicizeAccountChooserListAdapter_MembersInjector;
import org.wordpress.android.ui.publicize.PublicizeButtonPrefsFragment;
import org.wordpress.android.ui.publicize.PublicizeButtonPrefsFragment_MembersInjector;
import org.wordpress.android.ui.publicize.PublicizeDetailFragment;
import org.wordpress.android.ui.publicize.PublicizeDetailFragment_MembersInjector;
import org.wordpress.android.ui.publicize.PublicizeListActivity;
import org.wordpress.android.ui.publicize.PublicizeListActivity_MembersInjector;
import org.wordpress.android.ui.publicize.PublicizeListFragment;
import org.wordpress.android.ui.publicize.PublicizeListFragment_MembersInjector;
import org.wordpress.android.ui.publicize.PublicizeWebViewFragment;
import org.wordpress.android.ui.publicize.PublicizeWebViewFragment_MembersInjector;
import org.wordpress.android.ui.publicize.adapters.PublicizeConnectionAdapter;
import org.wordpress.android.ui.publicize.adapters.PublicizeConnectionAdapter_MembersInjector;
import org.wordpress.android.ui.publicize.adapters.PublicizeServiceAdapter;
import org.wordpress.android.ui.publicize.adapters.PublicizeServiceAdapter_MembersInjector;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthActivity;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthFragment;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthFragment_MembersInjector;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthUiStateMapper;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthValidator;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthViewModel;
import org.wordpress.android.ui.qrcodeauth.QRCodeAuthViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.quickstart.QuickStartFullScreenDialogFragment;
import org.wordpress.android.ui.quickstart.QuickStartFullScreenDialogFragment_MembersInjector;
import org.wordpress.android.ui.quickstart.QuickStartReminderReceiver;
import org.wordpress.android.ui.quickstart.QuickStartReminderReceiver_MembersInjector;
import org.wordpress.android.ui.quickstart.QuickStartTracker;
import org.wordpress.android.ui.reader.CommentNotificationsBottomSheetFragment;
import org.wordpress.android.ui.reader.CommentNotificationsBottomSheetFragment_MembersInjector;
import org.wordpress.android.ui.reader.ReaderBlogFragment;
import org.wordpress.android.ui.reader.ReaderBlogFragment_MembersInjector;
import org.wordpress.android.ui.reader.ReaderCommentListActivity;
import org.wordpress.android.ui.reader.ReaderCommentListActivity_MembersInjector;
import org.wordpress.android.ui.reader.ReaderCommentListViewModel;
import org.wordpress.android.ui.reader.ReaderCssProvider;
import org.wordpress.android.ui.reader.ReaderFileDownloadManager;
import org.wordpress.android.ui.reader.ReaderFollowCommentsHandler;
import org.wordpress.android.ui.reader.ReaderFragment;
import org.wordpress.android.ui.reader.ReaderFragment_MembersInjector;
import org.wordpress.android.ui.reader.ReaderPostDetailFragment;
import org.wordpress.android.ui.reader.ReaderPostDetailFragment_MembersInjector;
import org.wordpress.android.ui.reader.ReaderPostDetailUiStateBuilder;
import org.wordpress.android.ui.reader.ReaderPostListActivity;
import org.wordpress.android.ui.reader.ReaderPostListActivity_MembersInjector;
import org.wordpress.android.ui.reader.ReaderPostListFragment;
import org.wordpress.android.ui.reader.ReaderPostListFragment_MembersInjector;
import org.wordpress.android.ui.reader.ReaderPostPagerActivity;
import org.wordpress.android.ui.reader.ReaderPostPagerActivity_MembersInjector;
import org.wordpress.android.ui.reader.ReaderPostWebViewCachingFragment;
import org.wordpress.android.ui.reader.ReaderPostWebViewCachingFragment_MembersInjector;
import org.wordpress.android.ui.reader.ReaderSearchActivity;
import org.wordpress.android.ui.reader.ReaderSearchActivity_MembersInjector;
import org.wordpress.android.ui.reader.ReaderSubsActivity;
import org.wordpress.android.ui.reader.ReaderSubsActivity_MembersInjector;
import org.wordpress.android.ui.reader.SubfilterBottomSheetFragment;
import org.wordpress.android.ui.reader.SubfilterBottomSheetFragment_MembersInjector;
import org.wordpress.android.ui.reader.actions.ReaderBlogActionsWrapper;
import org.wordpress.android.ui.reader.actions.ReaderPostActionsWrapper;
import org.wordpress.android.ui.reader.adapters.CommentSnippetAdapter;
import org.wordpress.android.ui.reader.adapters.CommentSnippetAdapter_MembersInjector;
import org.wordpress.android.ui.reader.adapters.ReaderBlogAdapter;
import org.wordpress.android.ui.reader.adapters.ReaderBlogAdapter_MembersInjector;
import org.wordpress.android.ui.reader.adapters.ReaderCommentAdapter;
import org.wordpress.android.ui.reader.adapters.ReaderCommentAdapter_MembersInjector;
import org.wordpress.android.ui.reader.adapters.ReaderPostAdapter;
import org.wordpress.android.ui.reader.adapters.ReaderPostAdapter_MembersInjector;
import org.wordpress.android.ui.reader.adapters.ReaderTagAdapter;
import org.wordpress.android.ui.reader.adapters.ReaderTagAdapter_MembersInjector;
import org.wordpress.android.ui.reader.adapters.ReaderUserAdapter;
import org.wordpress.android.ui.reader.adapters.ReaderUserAdapter_MembersInjector;
import org.wordpress.android.ui.reader.discover.ReaderDiscoverFragment;
import org.wordpress.android.ui.reader.discover.ReaderDiscoverFragment_MembersInjector;
import org.wordpress.android.ui.reader.discover.ReaderDiscoverViewModel;
import org.wordpress.android.ui.reader.discover.ReaderPostCardActionsHandler;
import org.wordpress.android.ui.reader.discover.ReaderPostMoreButtonUiStateBuilder;
import org.wordpress.android.ui.reader.discover.ReaderPostTagsUiStateBuilder;
import org.wordpress.android.ui.reader.discover.ReaderPostUiStateBuilder;
import org.wordpress.android.ui.reader.discover.interests.ReaderInterestsFragment;
import org.wordpress.android.ui.reader.discover.interests.ReaderInterestsFragment_MembersInjector;
import org.wordpress.android.ui.reader.discover.interests.ReaderInterestsViewModel;
import org.wordpress.android.ui.reader.reblog.ReblogUseCase;
import org.wordpress.android.ui.reader.repository.ReaderDiscoverDataProvider;
import org.wordpress.android.ui.reader.repository.ReaderTagRepository;
import org.wordpress.android.ui.reader.repository.usecases.BlockBlogUseCase;
import org.wordpress.android.ui.reader.repository.usecases.FetchDiscoverCardsUseCase;
import org.wordpress.android.ui.reader.repository.usecases.GetDiscoverCardsUseCase;
import org.wordpress.android.ui.reader.repository.usecases.ParseDiscoverCardsJsonUseCase;
import org.wordpress.android.ui.reader.repository.usecases.PostLikeUseCase;
import org.wordpress.android.ui.reader.repository.usecases.ShouldAutoUpdateTagUseCase;
import org.wordpress.android.ui.reader.repository.usecases.UndoBlockBlogUseCase;
import org.wordpress.android.ui.reader.repository.usecases.tags.FetchFollowedTagsUseCase;
import org.wordpress.android.ui.reader.repository.usecases.tags.FetchInterestTagsUseCase;
import org.wordpress.android.ui.reader.repository.usecases.tags.FollowInterestTagsUseCase;
import org.wordpress.android.ui.reader.repository.usecases.tags.GetFollowedTagsUseCase;
import org.wordpress.android.ui.reader.services.comment.wrapper.ReaderCommentServiceStarterWrapper;
import org.wordpress.android.ui.reader.services.discover.ReaderDiscoverJobService;
import org.wordpress.android.ui.reader.services.discover.ReaderDiscoverJobService_MembersInjector;
import org.wordpress.android.ui.reader.services.discover.ReaderDiscoverLogic;
import org.wordpress.android.ui.reader.services.discover.ReaderDiscoverLogic_MembersInjector;
import org.wordpress.android.ui.reader.services.discover.ReaderDiscoverService;
import org.wordpress.android.ui.reader.services.discover.ReaderDiscoverService_MembersInjector;
import org.wordpress.android.ui.reader.services.update.ReaderUpdateLogic;
import org.wordpress.android.ui.reader.services.update.ReaderUpdateLogic_MembersInjector;
import org.wordpress.android.ui.reader.services.update.TagUpdateClientUtilsProvider;
import org.wordpress.android.ui.reader.services.update.wrapper.ReaderUpdateServiceStarterWrapper;
import org.wordpress.android.ui.reader.subfilter.SubFilterViewModel;
import org.wordpress.android.ui.reader.subfilter.SubfilterListItemMapper;
import org.wordpress.android.ui.reader.subfilter.SubfilterPageFragment;
import org.wordpress.android.ui.reader.subfilter.SubfilterPageFragment_MembersInjector;
import org.wordpress.android.ui.reader.tracker.ReaderTracker;
import org.wordpress.android.ui.reader.usecases.LoadReaderTabsUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderCommentsFollowUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderFetchPostUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderFetchRelatedPostsUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderFetchSiteUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderGetPostUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderPostBookmarkUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderSeenStatusToggleUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderSiteFollowUseCase;
import org.wordpress.android.ui.reader.usecases.ReaderSiteNotificationsUseCase;
import org.wordpress.android.ui.reader.utils.DateProvider;
import org.wordpress.android.ui.reader.utils.FeaturedImageUtils;
import org.wordpress.android.ui.reader.utils.PostSeenStatusApiCallsProvider;
import org.wordpress.android.ui.reader.utils.PostSubscribersApiCallsProvider;
import org.wordpress.android.ui.reader.utils.ReaderImageScannerProvider;
import org.wordpress.android.ui.reader.utils.ReaderPostSeenStatusWrapper;
import org.wordpress.android.ui.reader.utils.ReaderTagWrapper;
import org.wordpress.android.ui.reader.utils.ReaderUtilsWrapper;
import org.wordpress.android.ui.reader.utils.ThreadedCommentsUtils;
import org.wordpress.android.ui.reader.viewmodels.ConversationNotificationsViewModel;
import org.wordpress.android.ui.reader.viewmodels.ReaderPostDetailViewModel;
import org.wordpress.android.ui.reader.viewmodels.ReaderPostListViewModel;
import org.wordpress.android.ui.reader.viewmodels.ReaderViewModel;
import org.wordpress.android.ui.reader.viewmodels.SubfilterPageViewModel;
import org.wordpress.android.ui.reader.views.ReaderCommentsPostHeaderView;
import org.wordpress.android.ui.reader.views.ReaderExpandableTagsView;
import org.wordpress.android.ui.reader.views.ReaderExpandableTagsView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderLikingUsersView;
import org.wordpress.android.ui.reader.views.ReaderLikingUsersView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderPostDetailHeaderView;
import org.wordpress.android.ui.reader.views.ReaderPostDetailHeaderView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderPostDetailsHeaderViewUiStateBuilder;
import org.wordpress.android.ui.reader.views.ReaderSimplePostContainerView;
import org.wordpress.android.ui.reader.views.ReaderSimplePostContainerView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderSiteHeaderView;
import org.wordpress.android.ui.reader.views.ReaderSiteHeaderView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderSiteSearchResultView;
import org.wordpress.android.ui.reader.views.ReaderSiteSearchResultView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderTagHeaderView;
import org.wordpress.android.ui.reader.views.ReaderTagHeaderView_MembersInjector;
import org.wordpress.android.ui.reader.views.ReaderWebView;
import org.wordpress.android.ui.reader.views.ReaderWebView_MembersInjector;
import org.wordpress.android.ui.screenshots.JPScreenshotTest;
import org.wordpress.android.ui.screenshots.WPScreenshotTest;
import org.wordpress.android.ui.sitecreation.SiteCreationActivity;
import org.wordpress.android.ui.sitecreation.SiteCreationActivity_MembersInjector;
import org.wordpress.android.ui.sitecreation.SiteCreationMainVM;
import org.wordpress.android.ui.sitecreation.SiteCreationMainVM_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.sitecreation.SiteCreationStep;
import org.wordpress.android.ui.sitecreation.SiteCreationStepsProvider;
import org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainSanitizer;
import org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainsFragment;
import org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainsFragment_MembersInjector;
import org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainsViewModel;
import org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.sitecreation.misc.SiteCreationTracker;
import org.wordpress.android.ui.sitecreation.previews.SiteCreationPreviewFragment;
import org.wordpress.android.ui.sitecreation.previews.SiteCreationPreviewFragment_MembersInjector;
import org.wordpress.android.ui.sitecreation.previews.SitePreviewViewModel;
import org.wordpress.android.ui.sitecreation.previews.SitePreviewViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.sitecreation.services.FetchWpComSiteUseCase;
import org.wordpress.android.ui.sitecreation.services.SiteCreationService;
import org.wordpress.android.ui.sitecreation.services.SiteCreationServiceManager;
import org.wordpress.android.ui.sitecreation.services.SiteCreationService_MembersInjector;
import org.wordpress.android.ui.sitecreation.sitename.SiteCreationSiteNameFragment;
import org.wordpress.android.ui.sitecreation.sitename.SiteCreationSiteNameFragment_MembersInjector;
import org.wordpress.android.ui.sitecreation.sitename.SiteCreationSiteNameViewModel;
import org.wordpress.android.ui.sitecreation.sitename.SiteCreationSiteNameViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.sitecreation.theme.DesignPreviewFragment;
import org.wordpress.android.ui.sitecreation.theme.DesignPreviewFragment_MembersInjector;
import org.wordpress.android.ui.sitecreation.theme.HomePagePickerFragment;
import org.wordpress.android.ui.sitecreation.theme.HomePagePickerFragment_MembersInjector;
import org.wordpress.android.ui.sitecreation.theme.HomePagePickerViewModel;
import org.wordpress.android.ui.sitecreation.theme.HomePagePickerViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.sitecreation.theme.SiteDesignPickerDimensionProvider;
import org.wordpress.android.ui.sitecreation.theme.SiteDesignRecommendationProvider;
import org.wordpress.android.ui.sitecreation.theme.SiteDesignRecommendedDimensionProvider;
import org.wordpress.android.ui.sitecreation.usecases.CreateSiteUseCase;
import org.wordpress.android.ui.sitecreation.usecases.FetchDomainsUseCase;
import org.wordpress.android.ui.sitecreation.usecases.FetchHomePageLayoutsUseCase;
import org.wordpress.android.ui.sitecreation.verticals.SiteCreationIntentsFragment;
import org.wordpress.android.ui.sitecreation.verticals.SiteCreationIntentsFragment_MembersInjector;
import org.wordpress.android.ui.sitecreation.verticals.SiteCreationIntentsViewModel;
import org.wordpress.android.ui.sitecreation.verticals.SiteCreationIntentsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.sitecreation.verticals.VerticalsSearchResultsProvider;
import org.wordpress.android.ui.stats.StatsConnectJetpackActivity;
import org.wordpress.android.ui.stats.StatsConnectJetpackActivity_MembersInjector;
import org.wordpress.android.ui.stats.intro.StatsNewFeatureIntroViewModel;
import org.wordpress.android.ui.stats.intro.StatsNewFeatureIntroViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.stats.intro.StatsNewFeaturesIntroDialogFragment;
import org.wordpress.android.ui.stats.refresh.LineChartMarkerView;
import org.wordpress.android.ui.stats.refresh.LineChartMarkerView_MembersInjector;
import org.wordpress.android.ui.stats.refresh.StatsActivity;
import org.wordpress.android.ui.stats.refresh.StatsActivity_MembersInjector;
import org.wordpress.android.ui.stats.refresh.StatsFragment;
import org.wordpress.android.ui.stats.refresh.StatsFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.StatsModule;
import org.wordpress.android.ui.stats.refresh.StatsModuleActivateUseCase;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideBlockInsightsUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideCommentsDetailStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideCommentsDetailUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideDayStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideDetailStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideDetailUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideFollowersDetailStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideFollowersDetailUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideGranularUseCaseFactoriesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideInsightsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideLikesDetailStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideLikesDetailUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideListStatsUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideMonthStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideSharedPrefsFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideViewAllInsightsUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideViewsAndVisitorsDetailUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideViewsAndVisitorsDetailUseCasesFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideWeekStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsModule_ProvideYearStatsUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.StatsViewAllFragment;
import org.wordpress.android.ui.stats.refresh.StatsViewAllFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.StatsViewModel;
import org.wordpress.android.ui.stats.refresh.StatsViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase;
import org.wordpress.android.ui.stats.refresh.lists.DaysListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.InsightsDetailListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.InsightsListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.MonthsListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.StatsListFragment;
import org.wordpress.android.ui.stats.refresh.lists.StatsListFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.StatsListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.TotalCommentsDetailListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.TotalFollowersDetailListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.TotalLikesDetailListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.UiModelMapper;
import org.wordpress.android.ui.stats.refresh.lists.WeeksListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.YearsListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.detail.DetailListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.detail.InsightsDetailFragment;
import org.wordpress.android.ui.stats.refresh.lists.detail.InsightsDetailViewModel;
import org.wordpress.android.ui.stats.refresh.lists.detail.InsightsDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostAverageViewsPerDayUseCase;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostDayViewsMapper;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostDayViewsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostDetailMapper;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostHeaderUseCase;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostMonthsAndYearsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.detail.PostRecentWeeksUseCase;
import org.wordpress.android.ui.stats.refresh.lists.detail.StatsDetailActivity;
import org.wordpress.android.ui.stats.refresh.lists.detail.StatsDetailFragment;
import org.wordpress.android.ui.stats.refresh.lists.detail.StatsDetailFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.detail.StatsDetailViewModel;
import org.wordpress.android.ui.stats.refresh.lists.sections.BaseStatsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.GranularUseCaseFactory;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.SelectedDateProvider;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.AuthorsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.ClicksUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.CountryViewsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.FileDownloadsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.OverviewMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.OverviewUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.PostsAndPagesUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.ReferrersUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.SearchTermsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.TotalLikesDetailUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.VideoPlaysUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.granular.usecases.ViewsAndVisitorsDetailUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.management.InsightsManagementFragment;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.management.InsightsManagementFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.management.InsightsManagementMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.management.InsightsManagementViewModel;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ActionCardGrowUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ActionCardReminderUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ActionCardScheduleUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.AllTimeStatsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.AnnualSiteStatsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.AnnualStatsMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.AuthorsCommentsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.CommentsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.FollowerTotalsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.FollowerTypesUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.FollowersUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.LatestPostSummaryMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.LatestPostSummaryUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ManagementControlUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ManagementNewsCardUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.MostPopularInsightsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.PostingActivityMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.PostingActivityUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.PostsCommentsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.PublicizeUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.TagsAndCategoriesUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.TodayStatsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.TotalCommentsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.TotalFollowersUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.TotalLikesUseCase;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.TotalStatsMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ViewsAndVisitorsMapper;
import org.wordpress.android.ui.stats.refresh.lists.sections.insights.usecases.ViewsAndVisitorsUseCase;
import org.wordpress.android.ui.stats.refresh.lists.widget.WidgetUpdater;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetBlockListProviderFactory;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetBlockListProviderFactory_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetBlockListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetListProvider;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetListProvider_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.AllTimeWidgetUpdater;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.StatsAllTimeWidget;
import org.wordpress.android.ui.stats.refresh.lists.widget.alltime.StatsAllTimeWidget_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsColorSelectionViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsDataTypeSelectionViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsSiteSelectionViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetColorSelectionDialogFragment;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetColorSelectionDialogFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetConfigureFragment;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetConfigureFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetConfigureViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetDataTypeSelectionDialogFragment;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetDataTypeSelectionDialogFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetSiteSelectionDialogFragment;
import org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetSiteSelectionDialogFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.minified.MinifiedWidgetUpdater;
import org.wordpress.android.ui.stats.refresh.lists.widget.minified.StatsMinifiedWidget;
import org.wordpress.android.ui.stats.refresh.lists.widget.minified.StatsMinifiedWidgetConfigureFragment;
import org.wordpress.android.ui.stats.refresh.lists.widget.minified.StatsMinifiedWidgetConfigureFragment_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.minified.StatsMinifiedWidgetConfigureViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.minified.StatsMinifiedWidget_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.StatsTodayWidget;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.StatsTodayWidget_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetBlockListProviderFactory;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetBlockListProviderFactory_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetBlockListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetListProvider;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetListProvider_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.today.TodayWidgetUpdater;
import org.wordpress.android.ui.stats.refresh.lists.widget.utils.WidgetUtils;
import org.wordpress.android.ui.stats.refresh.lists.widget.views.StatsViewsWidget;
import org.wordpress.android.ui.stats.refresh.lists.widget.views.StatsViewsWidget_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.views.ViewsWidgetListProvider;
import org.wordpress.android.ui.stats.refresh.lists.widget.views.ViewsWidgetListProvider_MembersInjector;
import org.wordpress.android.ui.stats.refresh.lists.widget.views.ViewsWidgetListViewModel;
import org.wordpress.android.ui.stats.refresh.lists.widget.views.ViewsWidgetUpdater;
import org.wordpress.android.ui.stats.refresh.utils.ActionCardHandler;
import org.wordpress.android.ui.stats.refresh.utils.ContentDescriptionHelper;
import org.wordpress.android.ui.stats.refresh.utils.DateUtils;
import org.wordpress.android.ui.stats.refresh.utils.ItemPopupMenuHandler;
import org.wordpress.android.ui.stats.refresh.utils.NewsCardHandler;
import org.wordpress.android.ui.stats.refresh.utils.ReferrerPopupMenuHandler;
import org.wordpress.android.ui.stats.refresh.utils.SelectedSectionManager;
import org.wordpress.android.ui.stats.refresh.utils.ServiceMapper;
import org.wordpress.android.ui.stats.refresh.utils.StatsDateFormatter;
import org.wordpress.android.ui.stats.refresh.utils.StatsNavigator;
import org.wordpress.android.ui.stats.refresh.utils.StatsPostProvider;
import org.wordpress.android.ui.stats.refresh.utils.StatsSinceLabelFormatter;
import org.wordpress.android.ui.stats.refresh.utils.StatsSiteProvider;
import org.wordpress.android.ui.stats.refresh.utils.StatsUtils;
import org.wordpress.android.ui.stockmedia.StockMediaPickerActivity;
import org.wordpress.android.ui.stockmedia.StockMediaPickerActivity_MembersInjector;
import org.wordpress.android.ui.stories.SaveInitialPostUseCase;
import org.wordpress.android.ui.stories.SaveStoryGutenbergBlockUseCase;
import org.wordpress.android.ui.stories.StoriesMediaPickerResultHandler;
import org.wordpress.android.ui.stories.StoriesTrackerHelper;
import org.wordpress.android.ui.stories.StoryComposerActivity;
import org.wordpress.android.ui.stories.StoryComposerActivity_MembersInjector;
import org.wordpress.android.ui.stories.StoryComposerViewModel;
import org.wordpress.android.ui.stories.StoryRepositoryWrapper;
import org.wordpress.android.ui.stories.intro.StoriesIntroDialogFragment;
import org.wordpress.android.ui.stories.intro.StoriesIntroDialogFragment_MembersInjector;
import org.wordpress.android.ui.stories.intro.StoriesIntroViewModel;
import org.wordpress.android.ui.stories.media.StoryEditorMedia;
import org.wordpress.android.ui.stories.media.StoryMediaSaveUploadBridge;
import org.wordpress.android.ui.stories.media.StoryMediaSaveUploadBridge_Factory;
import org.wordpress.android.ui.stories.media.StoryMediaSaveUploadBridge_MembersInjector;
import org.wordpress.android.ui.stories.prefs.StoriesPrefs;
import org.wordpress.android.ui.stories.usecase.LoadStoryFromStoriesPrefsUseCase;
import org.wordpress.android.ui.stories.usecase.SetUntitledStoryTitleIfTitleEmptyUseCase;
import org.wordpress.android.ui.stories.usecase.UpdateStoryPostTitleUseCase;
import org.wordpress.android.ui.suggestion.SuggestionActivity;
import org.wordpress.android.ui.suggestion.SuggestionActivity_MembersInjector;
import org.wordpress.android.ui.suggestion.SuggestionSourceProvider;
import org.wordpress.android.ui.suggestion.SuggestionSourceSubcomponent;
import org.wordpress.android.ui.suggestion.SuggestionViewModel;
import org.wordpress.android.ui.suggestion.UserSuggestionSource;
import org.wordpress.android.ui.suggestion.XPostsSuggestionSource;
import org.wordpress.android.ui.suggestion.adapters.SuggestionAdapter;
import org.wordpress.android.ui.suggestion.adapters.SuggestionAdapter_MembersInjector;
import org.wordpress.android.ui.themes.ThemeBrowserActivity;
import org.wordpress.android.ui.themes.ThemeBrowserActivity_MembersInjector;
import org.wordpress.android.ui.themes.ThemeBrowserFragment;
import org.wordpress.android.ui.themes.ThemeBrowserFragment_MembersInjector;
import org.wordpress.android.ui.themes.ThemeBrowserUtils;
import org.wordpress.android.ui.uploads.AutoSavePostIfNotDraftUseCase;
import org.wordpress.android.ui.uploads.MediaUploadHandler;
import org.wordpress.android.ui.uploads.MediaUploadHandler_MembersInjector;
import org.wordpress.android.ui.uploads.MediaUploadReadyProcessor;
import org.wordpress.android.ui.uploads.MediaUploadReadyProcessor_MembersInjector;
import org.wordpress.android.ui.uploads.PostMediaHandler;
import org.wordpress.android.ui.uploads.PostUploadHandler;
import org.wordpress.android.ui.uploads.PostUploadHandler_MembersInjector;
import org.wordpress.android.ui.uploads.UploadActionUseCase;
import org.wordpress.android.ui.uploads.UploadService;
import org.wordpress.android.ui.uploads.UploadServiceFacade;
import org.wordpress.android.ui.uploads.UploadService_MembersInjector;
import org.wordpress.android.ui.uploads.UploadStarter;
import org.wordpress.android.ui.uploads.UploadUtilsWrapper;
import org.wordpress.android.ui.utils.AnimationUtilsWrapper;
import org.wordpress.android.ui.utils.AuthenticationUtils;
import org.wordpress.android.ui.utils.ContinuationWrapper;
import org.wordpress.android.ui.utils.DownloadManagerWrapper;
import org.wordpress.android.ui.utils.HtmlMessageUtils;
import org.wordpress.android.ui.utils.HtmlUtilsWrapper;
import org.wordpress.android.ui.utils.IntentUtils;
import org.wordpress.android.ui.utils.UiHelpers;
import org.wordpress.android.ui.whatsnew.FeatureAnnouncementDialogFragment;
import org.wordpress.android.ui.whatsnew.FeatureAnnouncementDialogFragment_MembersInjector;
import org.wordpress.android.ui.whatsnew.FeatureAnnouncementListAdapter;
import org.wordpress.android.ui.whatsnew.FeatureAnnouncementListAdapter_MembersInjector;
import org.wordpress.android.ui.whatsnew.FeatureAnnouncementProvider;
import org.wordpress.android.ui.whatsnew.FeatureAnnouncementViewModel;
import org.wordpress.android.util.AutolinkUtilsTest;
import org.wordpress.android.util.DateFormatWrapper;
import org.wordpress.android.util.DebugUtils;
import org.wordpress.android.util.DisplayUtilsWrapper;
import org.wordpress.android.util.EncryptedLogging;
import org.wordpress.android.util.EventBusWrapper;
import org.wordpress.android.util.FileProvider;
import org.wordpress.android.util.FluxCUtilsWrapper;
import org.wordpress.android.util.GravatarUtilsWrapper;
import org.wordpress.android.util.HtmlCompatWrapper;
import org.wordpress.android.util.ListFormatterUtils;
import org.wordpress.android.util.LocaleManagerWrapper;
import org.wordpress.android.util.LocaleProvider;
import org.wordpress.android.util.LogFileProviderWrapper;
import org.wordpress.android.util.MediaUtilsWrapper;
import org.wordpress.android.util.MimeTypeMapUtilsWrapper;
import org.wordpress.android.util.NetworkUtilsWrapper;
import org.wordpress.android.util.PhotonUtilsWrapper;
import org.wordpress.android.util.QuickStartUtilsWrapper;
import org.wordpress.android.util.ReblogUtils;
import org.wordpress.android.util.RestClientProvider;
import org.wordpress.android.util.RtlUtils;
import org.wordpress.android.util.ShortcutUtils;
import org.wordpress.android.util.SiteUtilsWrapper;
import org.wordpress.android.util.SnackbarSequencer;
import org.wordpress.android.util.StorageUtilsProvider;
import org.wordpress.android.util.SupportedBlocksProviderTest;
import org.wordpress.android.util.SupportedBlocksProviderTest_MembersInjector;
import org.wordpress.android.util.UploadWorkerTest;
import org.wordpress.android.util.UploadWorkerTest_MembersInjector;
import org.wordpress.android.util.UriUtilsWrapper;
import org.wordpress.android.util.UrlUtilsTest;
import org.wordpress.android.util.UrlUtilsWrapper;
import org.wordpress.android.util.WPMediaUtilsWrapper;
import org.wordpress.android.util.WPUrlUtilsTest;
import org.wordpress.android.util.WPWebViewClient;
import org.wordpress.android.util.WPWebViewClient_MembersInjector;
import org.wordpress.android.util.WpUrlUtilsWrapper;
import org.wordpress.android.util.analytics.ActivityLogTracker;
import org.wordpress.android.util.analytics.AnalyticsTrackerWrapper;
import org.wordpress.android.util.analytics.AnalyticsUtilsWrapper;
import org.wordpress.android.util.analytics.ScanTracker;
import org.wordpress.android.util.config.AppConfig;
import org.wordpress.android.util.config.BetaSiteDesignsFeatureConfig;
import org.wordpress.android.util.config.BloggingPromptsFeatureConfig;
import org.wordpress.android.util.config.BloggingRemindersFeatureConfig;
import org.wordpress.android.util.config.CommentsSnippetFeatureConfig;
import org.wordpress.android.util.config.GlobalStyleSupportFeatureConfig;
import org.wordpress.android.util.config.LandOnTheEditorFeatureConfig;
import org.wordpress.android.util.config.LikesEnhancementsFeatureConfig;
import org.wordpress.android.util.config.ManageCategoriesFeatureConfig;
import org.wordpress.android.util.config.ManualFeatureConfig;
import org.wordpress.android.util.config.Mp4ComposerVideoOptimizationFeatureConfig;
import org.wordpress.android.util.config.MySiteDashboardTabsFeatureConfig;
import org.wordpress.android.util.config.MySiteDashboardTodaysStatsCardFeatureConfig;
import org.wordpress.android.util.config.MySiteDefaultTabExperimentFeatureConfig;
import org.wordpress.android.util.config.MySiteDefaultTabExperimentVariationDashboardFeatureConfig;
import org.wordpress.android.util.config.QRCodeAuthFlowFeatureConfig;
import org.wordpress.android.util.config.QuickStartDynamicCardsFeatureConfig;
import org.wordpress.android.util.config.QuickStartExistingUsersV2FeatureConfig;
import org.wordpress.android.util.config.ReaderCommentsModerationFeatureConfig;
import org.wordpress.android.util.config.RecommendTheAppFeatureConfig;
import org.wordpress.android.util.config.RemoteConfig;
import org.wordpress.android.util.config.SeenUnseenWithCounterFeatureConfig;
import org.wordpress.android.util.config.SiteDomainsFeatureConfig;
import org.wordpress.android.util.config.SiteIntentQuestionFeatureConfig;
import org.wordpress.android.util.config.SiteNameFeatureConfig;
import org.wordpress.android.util.config.StatsRevampV2FeatureConfig;
import org.wordpress.android.util.config.UnifiedAboutFeatureConfig;
import org.wordpress.android.util.config.UnifiedCommentsCommentEditFeatureConfig;
import org.wordpress.android.util.config.UnifiedCommentsDetailFeatureConfig;
import org.wordpress.android.util.crashlogging.WPCrashLoggingDataProvider;
import org.wordpress.android.util.experiments.ExPlat;
import org.wordpress.android.util.experiments.Experiment;
import org.wordpress.android.util.image.ImageManager;
import org.wordpress.android.util.image.ImagePlaceholderManager;
import org.wordpress.android.util.image.getters.WPCustomImageGetter;
import org.wordpress.android.util.image.getters.WPCustomImageGetter_MembersInjector;
import org.wordpress.android.util.wizard.WizardManager;
import org.wordpress.android.viewmodel.ContextProvider;
import org.wordpress.android.viewmodel.ResourceProvider;
import org.wordpress.android.viewmodel.ViewModelFactory;
import org.wordpress.android.viewmodel.accounts.PostSignupInterstitialViewModel;
import org.wordpress.android.viewmodel.activitylog.ActivityLogDetailViewModel;
import org.wordpress.android.viewmodel.activitylog.ActivityLogViewModel;
import org.wordpress.android.viewmodel.helpers.ConnectionStatus;
import org.wordpress.android.viewmodel.history.HistoryViewModel;
import org.wordpress.android.viewmodel.main.SitePickerViewModel;
import org.wordpress.android.viewmodel.main.WPMainActivityViewModel;
import org.wordpress.android.viewmodel.mlp.ModalLayoutPickerViewModel;
import org.wordpress.android.viewmodel.pages.ActionPerformer;
import org.wordpress.android.viewmodel.pages.AutoSaveConflictResolver;
import org.wordpress.android.viewmodel.pages.CreatePageListItemActionsUseCase;
import org.wordpress.android.viewmodel.pages.CreatePageListItemLabelsUseCase;
import org.wordpress.android.viewmodel.pages.PageItemProgressUiStateUseCase;
import org.wordpress.android.viewmodel.pages.PageListViewModel;
import org.wordpress.android.viewmodel.pages.PageParentSearchViewModel;
import org.wordpress.android.viewmodel.pages.PageParentViewModel;
import org.wordpress.android.viewmodel.pages.PagesViewModel;
import org.wordpress.android.viewmodel.pages.PostModelUploadUiStateUseCase;
import org.wordpress.android.viewmodel.pages.PostPageListLabelColorUseCase;
import org.wordpress.android.viewmodel.pages.SearchListViewModel;
import org.wordpress.android.viewmodel.plugins.PluginBrowserViewModel;
import org.wordpress.android.viewmodel.posts.PostListCreateMenuViewModel;
import org.wordpress.android.viewmodel.posts.PostListItemUiStateHelper;
import org.wordpress.android.viewmodel.posts.PostListViewModel;
import org.wordpress.android.viewmodel.quickstart.QuickStartViewModel;
import org.wordpress.android.viewmodel.storage.StorageUtilsViewModel;
import org.wordpress.android.viewmodel.wpwebview.WPWebViewViewModel;
import org.wordpress.android.widgets.AppRatingDialogWrapper;
import org.wordpress.android.widgets.WPSnackbarWrapper;
import org.wordpress.android.workers.WordPressWorkersFactory;
import org.wordpress.android.workers.notification.bloggingprompts.BloggingPromptsOnboardingNotificationHandler;
import org.wordpress.android.workers.notification.createsite.CreateSiteNotificationHandler;
import org.wordpress.android.workers.notification.createsite.CreateSiteNotificationScheduler;
import org.wordpress.android.workers.notification.local.LocalNotificationHandlerFactory;
import org.wordpress.android.workers.notification.local.LocalNotificationScheduler;
import org.wordpress.android.workers.reminder.ReminderNotificationManager;
import org.wordpress.android.workers.reminder.ReminderNotifier;
import org.wordpress.android.workers.reminder.ReminderScheduler;
import org.wordpress.android.workers.reminder.prompt.PromptReminderNotifier;
import org.wordpress.android.workers.weeklyroundup.WeeklyRoundupNotifier;
import org.wordpress.android.workers.weeklyroundup.WeeklyRoundupRepository;
import org.wordpress.android.workers.weeklyroundup.WeeklyRoundupScheduler;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerDefault_HiltComponents_SingletonC extends Default_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final ReleaseNetworkModule releaseNetworkModule;

  private final InterceptorModuleTest interceptorModuleTest;

  private final DummyInterceptorModule dummyInterceptorModule;

  private final AppConfigModule appConfigModule;

  private final SupportModule supportModule;

  private final ThreadModule threadModule;

  private final StatsModule statsModule;

  private final DatabaseModule databaseModule;

  private final TrackerTestModule trackerTestModule;

  private final LegacyModule legacyModule;

  private final LoginAnalyticsModule loginAnalyticsModule;

  private final AccountSettingsModule accountSettingsModule;

  private final DaggerDefault_HiltComponents_SingletonC singletonC = this;

  private Provider<ApplicationModule_ContributeStatListFragment.StatsListFragmentSubcomponent.Factory> statsListFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeStatsViewAllFragment.StatsViewAllFragmentSubcomponent.Factory> statsViewAllFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeInsightsManagementFragment.InsightsManagementFragmentSubcomponent.Factory> insightsManagementFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeStatsDetailFragment.StatsDetailFragmentSubcomponent.Factory> statsDetailFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeCountryPickerDialogFragment.CountryPickerDialogFragmentSubcomponent.Factory> countryPickerDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeCStatePickerDialogFragment.StatePickerDialogFragmentSubcomponent.Factory> statePickerDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeStatsViewsWidgetConfigureFragment.StatsWidgetConfigureFragmentSubcomponent.Factory> statsWidgetConfigureFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeSiteSelectionDialogFragment.StatsWidgetSiteSelectionDialogFragmentSubcomponent.Factory> statsWidgetSiteSelectionDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeViewModeSelectionDialogFragment.StatsWidgetColorSelectionDialogFragmentSubcomponent.Factory> statsWidgetColorSelectionDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeStatsMinifiedWidgetConfigureFragment.StatsMinifiedWidgetConfigureFragmentSubcomponent.Factory> statsMinifiedWidgetConfigureFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeDataTypeSelectionDialogFragment.StatsWidgetDataTypeSelectionDialogFragmentSubcomponent.Factory> statsWidgetDataTypeSelectionDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributecommentFullScreenDialogFragment.CommentFullScreenDialogFragmentSubcomponent.Factory> commentFullScreenDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeUsernameChangerFullScreenDialogFragment.UsernameChangerFullScreenDialogFragmentSubcomponent.Factory> usernameChangerFullScreenDialogFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeSettingsUsernameChangerFragment.SettingsUsernameChangerFragmentSubcomponent.Factory> settingsUsernameChangerFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeReaderPostWebViewCachingFragment.ReaderPostWebViewCachingFragmentSubcomponent.Factory> readerPostWebViewCachingFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeSubfilterPageFragment.SubfilterPageFragmentSubcomponent.Factory> subfilterPageFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeDebugSettingsFragment.DebugSettingsFragmentSubcomponent.Factory> debugSettingsFragmentSubcomponentFactoryProvider;

  private Provider<ApplicationModule_ContributeBasicDialog.BasicDialogSubcomponent.Factory> basicDialogSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_Login2FaFragment.Login2FaFragmentSubcomponent.Factory> login2FaFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginEmailFragment.LoginEmailFragmentSubcomponent.Factory> loginEmailFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginEmailPasswordFragment.LoginEmailPasswordFragmentSubcomponent.Factory> loginEmailPasswordFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginGoogleFragment.LoginGoogleFragmentSubcomponent.Factory> loginGoogleFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginMagicLinkRequestFragment.LoginMagicLinkRequestFragmentSubcomponent.Factory> loginMagicLinkRequestFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginMagicLinkSentFragment.LoginMagicLinkSentFragmentSubcomponent.Factory> loginMagicLinkSentFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginSiteAddressFragment.LoginSiteAddressFragmentSubcomponent.Factory> loginSiteAddressFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginSiteAddressHelpDialogFragment.LoginSiteAddressHelpDialogFragmentSubcomponent.Factory> loginSiteAddressHelpDialogFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_LoginUsernamePasswordFragment.LoginUsernamePasswordFragmentSubcomponent.Factory> loginUsernamePasswordFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_SignupGoogleFragment.SignupGoogleFragmentSubcomponent.Factory> signupGoogleFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_SignupMagicLinkFragment.SignupMagicLinkFragmentSubcomponent.Factory> signupMagicLinkFragmentSubcomponentFactoryProvider;

  private Provider<LoginFragmentModule_SignupConfirmationScreen.SignupConfirmationFragmentSubcomponent.Factory> signupConfirmationFragmentSubcomponentFactoryProvider;

  private Provider<LoginServiceModule_LoginWpcomService.LoginWpcomServiceSubcomponent.Factory> loginWpcomServiceSubcomponentFactoryProvider;

  private Provider<WellSqlInitializer> wellSqlInitializerProvider;

  private Provider<Dispatcher> dispatcherProvider;

  private Provider<CookieManager> provideCookieManagerProvider;

  private Provider<CookieJar> provideCookieJarProvider;

  private Provider<OkHttpClient> provideMediaOkHttpClientInstanceProvider;

  private Provider<RequestQueue> provideRequestQueueProvider;

  private Provider<AccessToken> accessTokenProvider;

  private Provider<AccountRestClient> accountRestClientProvider;

  private Provider<MemorizingTrustManager> provideMemorizingTrustManagerProvider;

  private Provider<OkHttpClient> provideMediaOkHttpClientInstanceCustomSSLProvider;

  private Provider<RequestQueue> provideRequestQueueCustomSSLProvider;

  private Provider<DiscoveryXMLRPCClient> discoveryXMLRPCClientProvider;

  private Provider<DiscoveryWPAPIRestClient> discoveryWPAPIRestClientProvider;

  private Provider<AccountStore> accountStoreProvider;

  private Provider<PostSqlUtils> postSqlUtilsProvider;

  private Provider<WPComGsonRequestBuilder> wPComGsonRequestBuilderProvider;

  private Provider<SiteRestClient> siteRestClientProvider;

  private Provider<XMLRPCRequestBuilder> xMLRPCRequestBuilderProvider;

  private Provider<SiteXMLRPCClient> siteXMLRPCClientProvider;

  private Provider<PrivateAtomicCookie> privateAtomicCookieProvider;

  private Provider<SiteSqlUtils> siteSqlUtilsProvider;

  private Provider<CoroutineContext> provideCoroutineContextProvider;

  private Provider<SiteStore> siteStoreProvider;

  private Provider<MediaRestClient> mediaRestClientProvider;

  private Provider<MediaXMLRPCClient> mediaXMLRPCClientProvider;

  private Provider<WPV2MediaRestClient> wPV2MediaRestClientProvider;

  private Provider<UploadStore> uploadStoreProvider;

  private Provider<MediaStore> mediaStoreProvider;

  private Provider<SupportHelper> provideSupportHelperProvider;

  private Provider<ZendeskHelper> provideZendeskHelperProvider;

  private Provider<PostRestClient> postRestClientProvider;

  private Provider<PostXMLRPCClient> postXMLRPCClientProvider;

  private Provider<PostStore> postStoreProvider;

  private Provider<PageStore> pageStoreProvider;

  private Provider<PostUtilsWrapper> postUtilsWrapperProvider;

  private Provider<UploadActionUseCase> uploadActionUseCaseProvider;

  private Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider;

  private Provider<NetworkUtilsWrapper> networkUtilsWrapperProvider;

  private Provider<UploadStarter> uploadStarterProvider;

  private Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  private Provider<ContextProvider> contextProvider;

  private Provider<ImagePlaceholderManager> imagePlaceholderManagerProvider;

  private Provider<AuthenticationUtils> authenticationUtilsProvider;

  private Provider<MediaUtilsWrapper> mediaUtilsWrapperProvider;

  private Provider<ImageManager> imageManagerProvider;

  private Provider<TodayInsightsRestClient> todayInsightsRestClientProvider;

  private Provider<StatsSqlUtils> statsSqlUtilsProvider;

  private Provider<StatsRequestSqlUtils> statsRequestSqlUtilsProvider;

  private Provider<TodayInsightsStore> todayInsightsStoreProvider;

  private Provider<InsightTypeSqlUtils> insightTypeSqlUtilsProvider;

  private Provider<StatsStore> statsStoreProvider;

  private Provider<AnalyticsUtilsWrapper> analyticsUtilsWrapperProvider;

  private Provider<ReaderTracker> readerTrackerProvider;

  private Provider<ImageEditorTracker> imageEditorTrackerProvider;

  private Provider<CopyMediaToAppStorageUseCase> copyMediaToAppStorageUseCaseProvider;

  private Provider<EditorTracker> editorTrackerProvider;

  private Provider<OptimizeMediaUseCase> optimizeMediaUseCaseProvider;

  private Provider<FluxCUtilsWrapper> fluxCUtilsWrapperProvider;

  private Provider<FileProvider> fileProvider;

  private Provider<GetMediaModelUseCase> getMediaModelUseCaseProvider;

  private Provider<UpdateMediaModelUseCase> updateMediaModelUseCaseProvider;

  private Provider<AppendMediaToEditorUseCase> appendMediaToEditorUseCaseProvider;

  private Provider<UploadMediaUseCase> uploadMediaUseCaseProvider;

  private Provider<AddLocalMediaToPostUseCase> addLocalMediaToPostUseCaseProvider;

  private Provider<WPSnackbarWrapper> wPSnackbarWrapperProvider;

  private Provider<SnackbarSequencer> snackbarSequencerProvider;

  private Provider<UploadUtilsWrapper> uploadUtilsWrapperProvider;

  private Provider<StoriesPrefs> storiesPrefsProvider;

  private Provider<EventBusWrapper> eventBusWrapperProvider;

  private Provider<SharedPreferences> provideSharedPrefsProvider;

  private Provider<EncryptedLogRestClient> encryptedLogRestClientProvider;

  private Provider<EncryptedLogSqlUtils> encryptedLogSqlUtilsProvider;

  private Provider<LogEncrypter> logEncrypterProvider;

  private Provider<EncryptedLogStore> encryptedLogStoreProvider;

  private Provider<EncryptedLogging> encryptedLoggingProvider;

  private Provider<CrashLogging> provideCrashLoggingProvider;

  private Provider<AppConfig> appConfigProvider;

  private Provider<ExperimentRestClient> experimentRestClientProvider;

  private Provider<ExperimentStore> experimentStoreProvider;

  private Provider<ExPlat> exPlatProvider;

  private Provider<SiteUtilsWrapper> siteUtilsWrapperProvider;

  private Provider<VisitAndViewsRestClient> visitAndViewsRestClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<VisitsAndViewsStore> visitsAndViewsStoreProvider;

  private Provider<BloggingPromptsRestClient> bloggingPromptsRestClientProvider;

  private Provider<WPAndroidDatabase> provideDatabaseProvider;

  private Provider<BloggingPromptsDao> provideBloggingPromptsDaoProvider;

  private Provider<BloggingPromptsStore> bloggingPromptsStoreProvider;

  private Provider<BloggingRemindersDao> provideBloggingRemindersDaoProvider;

  private Provider<BloggingRemindersStore> bloggingRemindersStoreProvider;

  private Provider<SelectedSiteRepository> selectedSiteRepositoryProvider;

  private Provider<ImageLoader.ImageCache> provideImageCacheProvider;

  private Provider<OAuthAuthenticator> provideOAuthAuthenicatorProvider;

  private Provider<AppInitializer> appInitializerProvider;

  private Provider<UnifiedLoginTracker> unifiedLoginTrackerProvider;

  private Provider<QuickStartSqlUtils> quickStartSqlUtilsProvider;

  private Provider<QuickStartStore> quickStartStoreProvider;

  private Provider<GCMMessageHandler> gCMMessageHandlerProvider;

  private Provider<PluginRestClient> pluginRestClientProvider;

  private Provider<PluginWPOrgClient> pluginWPOrgClientProvider;

  private Provider<PluginWPAPIRestClient> pluginWPAPIRestClientProvider;

  private Provider<NonceRestClient> nonceRestClientProvider;

  private Provider<PluginJetpackTunnelRestClient> pluginJetpackTunnelRestClientProvider;

  private Provider<PluginStore> pluginStoreProvider;

  private Provider<PluginBrowserViewModel> pluginBrowserViewModelProvider;

  private Provider<ActivityLogRestClient> activityLogRestClientProvider;

  private Provider<ActivityLogSqlUtils> activityLogSqlUtilsProvider;

  private Provider<ActivityLogStore> activityLogStoreProvider;

  private Provider<ActivityLogTracker> activityLogTrackerProvider;

  private Provider<ActivityLogViewModel> activityLogViewModelProvider;

  private Provider<ActivityLogDetailViewModel> activityLogDetailViewModelProvider;

  private Provider<PreviewStateHelper> previewStateHelperProvider;

  private Provider<SiteHomepageRestClient> siteHomepageRestClientProvider;

  private Provider<PagesViewModel> pagesViewModelProvider;

  private Provider<SearchListViewModel> searchListViewModelProvider;

  private Provider<PageListViewModel> pageListViewModelProvider;

  private Provider<PageParentViewModel> pageParentViewModelProvider;

  private Provider<ReblogUseCase> reblogUseCaseProvider;

  private Provider<ReaderPostActionsWrapper> readerPostActionsWrapperProvider;

  private Provider<ReaderPostTableWrapper> readerPostTableWrapperProvider;

  private Provider<ReaderUtilsWrapper> readerUtilsWrapperProvider;

  private Provider<ReaderPostListViewModel> readerPostListViewModelProvider;

  private Provider<ReaderPostMoreButtonUiStateBuilder> readerPostMoreButtonUiStateBuilderProvider;

  private Provider<UrlUtilsWrapper> urlUtilsWrapperProvider;

  private Provider<GravatarUtilsWrapper> gravatarUtilsWrapperProvider;

  private Provider<ReaderImageScannerProvider> readerImageScannerProvider;

  private Provider<ReaderPostTagsUiStateBuilder> readerPostTagsUiStateBuilderProvider;

  private Provider<ReaderPostUiStateBuilder> readerPostUiStateBuilderProvider;

  private Provider<ReaderPostDetailsHeaderViewUiStateBuilder> readerPostDetailsHeaderViewUiStateBuilderProvider;

  private Provider<PhotonUtilsWrapper> photonUtilsWrapperProvider;

  private Provider<DisplayUtilsWrapper> displayUtilsWrapperProvider;

  private Provider<ThreadedCommentsUtils> threadedCommentsUtilsProvider;

  private Provider<ReaderPostDetailUiStateBuilder> readerPostDetailUiStateBuilderProvider;

  private Provider<CommentRestClient> commentRestClientProvider;

  private Provider<CommentXMLRPCClient> commentXMLRPCClientProvider;

  private Provider<CommentStore> commentStoreProvider;

  private Provider<EngagementUtils> engagementUtilsProvider;

  private Provider<ReaderCommentTableWrapper> readerCommentTableWrapperProvider;

  private Provider<ReaderCommentServiceStarterWrapper> readerCommentServiceStarterWrapperProvider;

  private Provider<ReaderPostDetailViewModel> readerPostDetailViewModelProvider;

  private Provider<SubFilterViewModel> subFilterViewModelProvider;

  private Provider<SubfilterPageViewModel> subfilterPageViewModelProvider;

  private Provider<JetpackTunnelGsonRequestBuilder> jetpackTunnelGsonRequestBuilderProvider;

  private Provider<JetpackRestClient> jetpackRestClientProvider;

  private Provider<JetpackStore> jetpackStoreProvider;

  private Provider<JetpackRemoteInstallViewModel> jetpackRemoteInstallViewModelProvider;

  private Provider<QuickStartViewModel> quickStartViewModelProvider;

  private Provider<StatsSiteProvider> statsSiteProvider;

  private Provider<SelectedDateProvider> selectedDateProvider;

  private Provider<AllTimeInsightsRestClient> allTimeInsightsRestClientProvider;

  private Provider<AllTimeInsightsStore> allTimeInsightsStoreProvider;

  private Provider<ItemPopupMenuHandler> itemPopupMenuHandlerProvider;

  private Provider<LatestPostInsightsRestClient> latestPostInsightsRestClientProvider;

  private Provider<LatestPostInsightsStore> latestPostInsightsStoreProvider;

  private Provider<FollowersRestClient> followersRestClientProvider;

  private Provider<FollowersStore> followersStoreProvider;

  private Provider<CommentsRestClient> commentsRestClientProvider;

  private Provider<CommentsStore> commentsStoreProvider;

  private Provider<MostPopularRestClient> mostPopularRestClientProvider;

  private Provider<MostPopularInsightsStore> mostPopularInsightsStoreProvider;

  private Provider<ActionCardHandler> actionCardHandlerProvider;

  private Provider<TagsRestClient> tagsRestClientProvider;

  private Provider<TagsStore> tagsStoreProvider;

  private Provider<PublicizeRestClient> publicizeRestClientProvider;

  private Provider<PublicizeStore> publicizeStoreProvider;

  private Provider<PostingActivityRestClient> postingActivityRestClientProvider;

  private Provider<PostingActivityStore> postingActivityStoreProvider;

  private Provider<SummaryRestClient> summaryRestClientProvider;

  private Provider<SummaryStore> summaryStoreProvider;

  private Provider<NewsCardHandler> newsCardHandlerProvider;

  private Provider<List<BaseStatsUseCase<?, ?>>> provideBlockInsightsUseCasesProvider;

  private Provider<BaseListUseCase> provideInsightsUseCaseProvider;

  private Provider<InsightsListViewModel> insightsListViewModelProvider;

  private Provider<PostAndPageViewsRestClient> postAndPageViewsRestClientProvider;

  private Provider<PostAndPageViewsStore> postAndPageViewsStoreProvider;

  private Provider<ReferrersRestClient> referrersRestClientProvider;

  private Provider<ReferrersStore> referrersStoreProvider;

  private Provider<ReferrerPopupMenuHandler> referrerPopupMenuHandlerProvider;

  private Provider<ClicksRestClient> clicksRestClientProvider;

  private Provider<ClicksStore> clicksStoreProvider;

  private Provider<CountryViewsRestClient> countryViewsRestClientProvider;

  private Provider<CountryViewsStore> countryViewsStoreProvider;

  private Provider<VideoPlaysRestClient> videoPlaysRestClientProvider;

  private Provider<VideoPlaysStore> videoPlaysStoreProvider;

  private Provider<SearchTermsRestClient> searchTermsRestClientProvider;

  private Provider<SearchTermsStore> searchTermsStoreProvider;

  private Provider<AuthorsRestClient> authorsRestClientProvider;

  private Provider<AuthorsStore> authorsStoreProvider;

  private Provider<FileDownloadsRestClient> fileDownloadsRestClientProvider;

  private Provider<FileDownloadsStore> fileDownloadsStoreProvider;

  private Provider<List<GranularUseCaseFactory>> provideGranularUseCaseFactoriesProvider;

  private Provider<BaseListUseCase> provideDayStatsUseCaseProvider;

  private Provider<DaysListViewModel> daysListViewModelProvider;

  private Provider<BaseListUseCase> provideWeekStatsUseCaseProvider;

  private Provider<WeeksListViewModel> weeksListViewModelProvider;

  private Provider<BaseListUseCase> provideMonthStatsUseCaseProvider;

  private Provider<MonthsListViewModel> monthsListViewModelProvider;

  private Provider<BaseListUseCase> provideYearStatsUseCaseProvider;

  private Provider<YearsListViewModel> yearsListViewModelProvider;

  private Provider<StatsPostProvider> statsPostProvider;

  private Provider<PostDetailStore> postDetailStoreProvider;

  private Provider<List<BaseStatsUseCase<?, ?>>> provideDetailUseCasesProvider;

  private Provider<BaseListUseCase> provideDetailStatsUseCaseProvider;

  private Provider<StatsDetailViewModel> statsDetailViewModelProvider;

  private Provider<List<GranularUseCaseFactory>> provideViewsAndVisitorsDetailUseCasesProvider;

  private Provider<BaseListUseCase> provideViewsAndVisitorsDetailUseCaseProvider;

  private Provider<InsightsDetailListViewModel> insightsDetailListViewModelProvider;

  private Provider<DetailListViewModel> detailListViewModelProvider;

  private Provider<StatsWidgetConfigureViewModel> statsWidgetConfigureViewModelProvider;

  private Provider<StatsSiteSelectionViewModel> statsSiteSelectionViewModelProvider;

  private Provider<StatsDataTypeSelectionViewModel> statsDataTypeSelectionViewModelProvider;

  private Provider<StatsMinifiedWidgetConfigureViewModel> statsMinifiedWidgetConfigureViewModelProvider;

  private Provider<StatsColorSelectionViewModel> statsColorSelectionViewModelProvider;

  private Provider<InsightsManagementViewModel> insightsManagementViewModelProvider;

  private Provider<HistoryViewModel> historyViewModelProvider;

  private Provider<ListSqlUtils> listSqlUtilsProvider;

  private Provider<ListItemSqlUtils> listItemSqlUtilsProvider;

  private Provider<ListStore> listStoreProvider;

  private Provider<PostListViewModel> postListViewModelProvider;

  private Provider<PostListMainViewModel> postListMainViewModelProvider;

  private Provider<PlanOffersRestClient> planOffersRestClientProvider;

  private Provider<PlanOffersDao> providePlanOffersDaoProvider;

  private Provider<PlanOffersMapper> planOffersMapperProvider;

  private Provider<PlanOffersSqlUtils> planOffersSqlUtilsProvider;

  private Provider<PlanOffersStore> planOffersStoreProvider;

  private Provider<PlansViewModel> plansViewModelProvider;

  private Provider<DomainsDashboardViewModel> domainsDashboardViewModelProvider;

  private Provider<ProductsRestClient> productsRestClientProvider;

  private Provider<ProductsStore> productsStoreProvider;

  private Provider<TransactionsRestClient> transactionsRestClientProvider;

  private Provider<TransactionsStore> transactionsStoreProvider;

  private Provider<DomainSuggestionsViewModel> domainSuggestionsViewModelProvider;

  private Provider<WPWebViewViewModel> wPWebViewViewModelProvider;

  private Provider<DomainRegistrationDetailsViewModel> domainRegistrationDetailsViewModelProvider;

  private Provider<DomainRegistrationMainViewModel> domainRegistrationMainViewModelProvider;

  private Provider<StorePostViewModel> storePostViewModelProvider;

  private Provider<PostSchedulingNotificationSqlUtils> postSchedulingNotificationSqlUtilsProvider;

  private Provider<PostSchedulingNotificationStore> postSchedulingNotificationStoreProvider;

  private Provider<EditPostPublishSettingsViewModel> editPostPublishSettingsViewModelProvider;

  private Provider<ReaderCommentListViewModel> readerCommentListViewModelProvider;

  private Provider<WhatsNewRestClient> whatsNewRestClientProvider;

  private Provider<WhatsNewSqlUtils> whatsNewSqlUtilsProvider;

  private Provider<WhatsNewStore> whatsNewStoreProvider;

  private Provider<DynamicCardSqlUtils> dynamicCardSqlUtilsProvider;

  private Provider<DynamicCardStore> dynamicCardStoreProvider;

  private Provider<QuickStartRepository> quickStartRepositoryProvider;

  private Provider<WPMainActivityViewModel> wPMainActivityViewModelProvider;

  private Provider<ModalLayoutPickerTracker> modalLayoutPickerTrackerProvider;

  private Provider<ModalLayoutPickerViewModel> modalLayoutPickerViewModelProvider;

  private Provider<PostSignupInterstitialViewModel> postSignupInterstitialViewModelProvider;

  private Provider<PageParentSearchViewModel> pageParentSearchViewModelProvider;

  private Provider<FeatureAnnouncementViewModel> featureAnnouncementViewModelProvider;

  private Provider<SitePickerViewModel> sitePickerViewModelProvider;

  private Provider<LoadReaderTabsUseCase> loadReaderTabsUseCaseProvider;

  private Provider<ReaderViewModel> readerViewModelProvider;

  private Provider<ReaderTagWrapper> readerTagWrapperProvider;

  private Provider<ParseDiscoverCardsJsonUseCase> parseDiscoverCardsJsonUseCaseProvider;

  private Provider<ReaderDiscoverCardsTableWrapper> readerDiscoverCardsTableWrapperProvider;

  private Provider<GetDiscoverCardsUseCase> getDiscoverCardsUseCaseProvider;

  private Provider<ReaderTagTableWrapper> readerTagTableWrapperProvider;

  private Provider<ReaderDiscoverViewModel> readerDiscoverViewModelProvider;

  private Provider<ReaderUpdateServiceStarterWrapper> readerUpdateServiceStarterWrapperProvider;

  private Provider<ReaderInterestsViewModel> readerInterestsViewModelProvider;

  private Provider<HomepageSettingsViewModel> homepageSettingsViewModelProvider;

  private Provider<PrepublishingViewModel> prepublishingViewModelProvider;

  private Provider<GetPostTagsUseCase> getPostTagsUseCaseProvider;

  private Provider<EditorActionsProvider> editorActionsProvider;

  private Provider<UpdateStoryPostTitleUseCase> updateStoryPostTitleUseCaseProvider;

  private Provider<TaxonomyRestClient> taxonomyRestClientProvider;

  private Provider<TaxonomyXMLRPCClient> taxonomyXMLRPCClientProvider;

  private Provider<TaxonomyStore> taxonomyStoreProvider;

  private Provider<CategoryNodeWrapper> categoryNodeWrapperProvider;

  private Provider<GetCategoriesUseCase> getCategoriesUseCaseProvider;

  private Provider<PrepublishingHomeViewModel> prepublishingHomeViewModelProvider;

  private Provider<UpdatePostTagsUseCase> updatePostTagsUseCaseProvider;

  private Provider<PrepublishingTagsViewModel> prepublishingTagsViewModelProvider;

  private Provider<PrepublishingPublishSettingsViewModel> prepublishingPublishSettingsViewModelProvider;

  private Provider<MeViewModel> meViewModelProvider;

  private Provider<PostListCreateMenuViewModel> postListCreateMenuViewModelProvider;

  private Provider<StoryComposerViewModel> storyComposerViewModelProvider;

  private Provider<StoriesIntroViewModel> storiesIntroViewModelProvider;

  private Provider<PhotoPickerViewModel> photoPickerViewModelProvider;

  private Provider<StockMediaRestClient> stockMediaRestClientProvider;

  private Provider<StockMediaSqlUtils> stockMediaSqlUtilsProvider;

  private Provider<StockMediaStore> stockMediaStoreProvider;

  private Provider<UriUtilsWrapper> uriUtilsWrapperProvider;

  private Provider<MimeTypeMapUtilsWrapper> mimeTypeMapUtilsWrapperProvider;

  private Provider<MediaPickerViewModel> mediaPickerViewModelProvider;

  private Provider<DebugSettingsViewModel> debugSettingsViewModelProvider;

  private Provider<AddCategoryUseCase> addCategoryUseCaseProvider;

  private Provider<PrepublishingCategoriesViewModel> prepublishingCategoriesViewModelProvider;

  private Provider<PrepublishingAddCategoryViewModel> prepublishingAddCategoryViewModelProvider;

  private Provider<SuggestionViewModel> suggestionViewModelProvider;

  private Provider<ActivityLogTypeFilterViewModel> activityLogTypeFilterViewModelProvider;

  private Provider<DateFormatWrapper> dateFormatWrapperProvider;

  private Provider<ThreatItemBuilder> threatItemBuilderProvider;

  private Provider<ThreatDetailsListItemsBuilder> threatDetailsListItemsBuilderProvider;

  private Provider<ScanRestClient> scanRestClientProvider;

  private Provider<ScanSqlUtils> scanSqlUtilsProvider;

  private Provider<ThreatSqlUtils> threatSqlUtilsProvider;

  private Provider<BuildConfigWrapper> buildConfigWrapperProvider;

  private Provider<ScanStore> scanStoreProvider;

  private Provider<ScanStateListItemsBuilder> scanStateListItemsBuilderProvider;

  private Provider<ScanTracker> scanTrackerProvider;

  private Provider<ScanViewModel> scanViewModelProvider;

  private Provider<ScanHistoryViewModel> scanHistoryViewModelProvider;

  private Provider<ScanHistoryListViewModel> scanHistoryListViewModelProvider;

  private Provider<ThreatDetailsViewModel> threatDetailsViewModelProvider;

  private Provider<HomePageDataLoader> homePageDataLoaderProvider;

  private Provider<CardsRestClient> cardsRestClientProvider;

  private Provider<CardsDao> provideDashboardCardsDaoProvider;

  private Provider<CardsStore> cardsStoreProvider;

  private Provider<MySiteViewModel> mySiteViewModelProvider;

  private Provider<BasicDialogViewModel> basicDialogViewModelProvider;

  private Provider<BackupDownloadStepsProvider> backupDownloadStepsProvider;

  private Provider<JetpackAvailableItemsProvider> jetpackAvailableItemsProvider;

  private Provider<BackupDownloadStateListItemBuilder> backupDownloadStateListItemBuilderProvider;

  private Provider<BackupDownloadViewModel> backupDownloadViewModelProvider;

  private Provider<RestoreStepsProvider> restoreStepsProvider;

  private Provider<RestoreStateListItemBuilder> restoreStateListItemBuilderProvider;

  private Provider<RestoreViewModel> restoreViewModelProvider;

  private Provider<DynamicCardMenuViewModel> dynamicCardMenuViewModelProvider;

  private Provider<RoleUtilsWrapper> roleUtilsWrapperProvider;

  private Provider<SimpleDateFormatWrapper> simpleDateFormatWrapperProvider;

  private Provider<InvitePeopleUtils> invitePeopleUtilsProvider;

  private Provider<PeopleInviteViewModel> peopleInviteViewModelProvider;

  private Provider<EngagedPeopleListViewModel> engagedPeopleListViewModelProvider;

  private Provider<UserProfileViewModel> userProfileViewModelProvider;

  private Provider<SiteSettingsTimezoneViewModel> siteSettingsTimezoneViewModelProvider;

  private Provider<LoginNoSitesViewModel> loginNoSitesViewModelProvider;

  private Provider<LoginEpilogueViewModel> loginEpilogueViewModelProvider;

  private Provider<LoginPrologueViewModel> loginPrologueViewModelProvider;

  private Provider<LoginViewModel> loginViewModelProvider;

  private Provider<DeepLinkingIntentReceiverViewModel> deepLinkingIntentReceiverViewModelProvider;

  private Provider<LoginSiteCheckErrorViewModel> loginSiteCheckErrorViewModelProvider;

  private Provider<StorageUtilsProvider> storageUtilsProvider;

  private Provider<StorageUtilsViewModel> storageUtilsViewModelProvider;

  private Provider<CommentErrorUtilsWrapper> commentErrorUtilsWrapperProvider;

  private Provider<DateTimeUtilsWrapper> dateTimeUtilsWrapperProvider;

  private Provider<CommentsMapper> commentsMapperProvider;

  private Provider<org.wordpress.android.fluxc.network.rest.wpcom.comment.CommentsRestClient> commentsRestClientProvider2;

  private Provider<CommentsXMLRPCClient> commentsXMLRPCClientProvider;

  private Provider<CommentsDao> provideCommentsDaoProvider;

  private Provider<org.wordpress.android.fluxc.store.CommentsStore> commentsStoreProvider2;

  private Provider<PaginateCommentsResourceProvider> paginateCommentsResourceProvider;

  private Provider<LocalCommentCacheUpdateHandler> localCommentCacheUpdateHandlerProvider;

  private Provider<ModerateCommentsResourceProvider> moderateCommentsResourceProvider;

  private Provider<UnifiedCommentListViewModel> unifiedCommentListViewModelProvider;

  private Provider<BloggingRemindersViewModel> bloggingRemindersViewModelProvider;

  private Provider<CategoriesListViewModel> categoriesListViewModelProvider;

  private Provider<LocalePickerViewModel> localePickerViewModelProvider;

  private Provider<CategoryDetailViewModel> categoryDetailViewModelProvider;

  private Provider<UnifiedCommentActivityViewModel> unifiedCommentActivityViewModelProvider;

  private Provider<NotificationsActionsWrapper> notificationsActionsWrapperProvider;

  private Provider<UnifiedCommentsEditViewModel> unifiedCommentsEditViewModelProvider;

  private Provider<DebugCookiesViewModel> debugCookiesViewModelProvider;

  private Provider<ConversationNotificationsViewModel> conversationNotificationsViewModelProvider;

  private Provider<BloggingPromptsOnboardingViewModel> bloggingPromptsOnboardingViewModelProvider;

  private Provider<EditorBloggingPromptsViewModel> editorBloggingPromptsViewModelProvider;

  private Provider<List<GranularUseCaseFactory>> provideLikesDetailUseCasesProvider;

  private Provider<BaseListUseCase> provideLikesDetailStatsUseCaseProvider;

  private Provider<TotalLikesDetailListViewModel> totalLikesDetailListViewModelProvider;

  private Provider<FeatureIntroductionViewModel> featureIntroductionViewModelProvider;

  private Provider<List<BaseStatsUseCase<?, ?>>> provideCommentsDetailUseCasesProvider;

  private Provider<BaseListUseCase> provideCommentsDetailStatsUseCaseProvider;

  private Provider<TotalCommentsDetailListViewModel> totalCommentsDetailListViewModelProvider;

  private Provider<List<BaseStatsUseCase<?, ?>>> provideFollowersDetailUseCasesProvider;

  private Provider<BaseListUseCase> provideFollowersDetailStatsUseCaseProvider;

  private Provider<TotalFollowersDetailListViewModel> totalFollowersDetailListViewModelProvider;

  private Provider<ContinuationWrapper<AccountStore.OnAccountChanged>> provideDefaultContinuationWrapperProvider;

  private Provider<ContinuationWrapper<AccountStore.OnAccountChanged>> provideConcurrentContinuationWrapperProvider;

  private Provider<AccountSettingsViewModel> accountSettingsViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private Provider<SiteCreationTracker> siteCreationTrackerProvider;

  private Provider<CommentsStoreAdapter> commentsStoreAdapterProvider;

  private Provider<MeGravatarLoader> meGravatarLoaderProvider;

  private Provider<ExoPlayerUtils> exoPlayerUtilsProvider;

  private Provider<FeaturedImageHelper> featuredImageHelperProvider;

  private Provider<ReactNativeWPComRestClient> reactNativeWPComRestClientProvider;

  private Provider<ReactNativeWPAPIRestClient> reactNativeWPAPIRestClientProvider;

  private Provider<ReactNativeStore> reactNativeStoreProvider;

  private Provider<EditorThemeStore> editorThemeStoreProvider;

  private Provider<ActivityLauncherWrapper> activityLauncherWrapperProvider;

  private Provider<RemotePreviewLogicHelper> remotePreviewLogicHelperProvider;

  private Provider<ProgressDialogHelper> progressDialogHelperProvider;

  private Provider<AddExistingMediaToPostUseCase> addExistingMediaToPostUseCaseProvider;

  private Provider<RetryFailedMediaUploadUseCase> retryFailedMediaUploadUseCaseProvider;

  private Provider<AztecEditorFragmentStaticWrapper> aztecEditorFragmentStaticWrapperProvider;

  private Provider<CleanUpMediaToPostAssociationUseCase> cleanUpMediaToPostAssociationUseCaseProvider;

  private Provider<ReblogUtils> reblogUtilsProvider;

  private Provider<XPostsRestClient> xPostsRestClientProvider;

  private Provider<LoadStoryFromStoriesPrefsUseCase> loadStoryFromStoriesPrefsUseCaseProvider;

  private Provider<NotificationsUtilsWrapper> notificationsUtilsWrapperProvider;

  private Provider<ListScenarioUtils> listScenarioUtilsProvider;

  private Provider<DownloadManagerWrapper> downloadManagerWrapperProvider;

  private Provider<ReaderRestClient> readerRestClientProvider;

  private Provider<ReaderStore> readerStoreProvider;

  private Provider<ReaderPostSeenStatusWrapper> readerPostSeenStatusWrapperProvider;

  private Provider<ThemeRestClient> themeRestClientProvider;

  private Provider<ThemeStore> themeStoreProvider;

  private Provider<RequestQueue> provideNoRedirectsRequestQueueProvider;

  private Provider<GlideRequestFactory> glideRequestFactoryProvider;

  private Provider<StatsNavigator> statsNavigatorProvider;

  private Provider<UnifiedAboutTracker> unifiedAboutTrackerProvider;

  private Provider<QRCodeAuthRestClient> qRCodeAuthRestClientProvider;

  private Provider<QRCodeAuthStore> qRCodeAuthStoreProvider;

  private Provider<SiteCreationStepsProvider> siteCreationStepsProvider;

  private Provider<Map<StatsListViewModel.StatsSection, BaseListUseCase>> provideListStatsUseCasesProvider;

  private Provider<List<BaseStatsUseCase<?, ?>>> provideViewAllInsightsUseCasesProvider;

  private DaggerDefault_HiltComponents_SingletonC(AccountSettingsModule accountSettingsModuleParam,
      AppConfigModule appConfigModuleParam, ApplicationContextModule applicationContextModuleParam,
      DummyInterceptorModule dummyInterceptorModuleParam,
      ReleaseNetworkModule releaseNetworkModuleParam, DatabaseModule databaseModuleParam,
      InterceptorModuleTest interceptorModuleTestParam, LegacyModule legacyModuleParam,
      LoginAnalyticsModule loginAnalyticsModuleParam, StatsModule statsModuleParam,
      SupportModule supportModuleParam, ThreadModule threadModuleParam,
      TrackerTestModule trackerTestModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.releaseNetworkModule = releaseNetworkModuleParam;
    this.interceptorModuleTest = interceptorModuleTestParam;
    this.dummyInterceptorModule = dummyInterceptorModuleParam;
    this.appConfigModule = appConfigModuleParam;
    this.supportModule = supportModuleParam;
    this.threadModule = threadModuleParam;
    this.statsModule = statsModuleParam;
    this.databaseModule = databaseModuleParam;
    this.trackerTestModule = trackerTestModuleParam;
    this.legacyModule = legacyModuleParam;
    this.loginAnalyticsModule = loginAnalyticsModuleParam;
    this.accountSettingsModule = accountSettingsModuleParam;
    initialize(accountSettingsModuleParam, appConfigModuleParam, applicationContextModuleParam, dummyInterceptorModuleParam, releaseNetworkModuleParam, databaseModuleParam, interceptorModuleTestParam, legacyModuleParam, loginAnalyticsModuleParam, statsModuleParam, supportModuleParam, threadModuleParam, trackerTestModuleParam);
    initialize2(accountSettingsModuleParam, appConfigModuleParam, applicationContextModuleParam, dummyInterceptorModuleParam, releaseNetworkModuleParam, databaseModuleParam, interceptorModuleTestParam, legacyModuleParam, loginAnalyticsModuleParam, statsModuleParam, supportModuleParam, threadModuleParam, trackerTestModuleParam);
    initialize3(accountSettingsModuleParam, appConfigModuleParam, applicationContextModuleParam, dummyInterceptorModuleParam, releaseNetworkModuleParam, databaseModuleParam, interceptorModuleTestParam, legacyModuleParam, loginAnalyticsModuleParam, statsModuleParam, supportModuleParam, threadModuleParam, trackerTestModuleParam);
    initialize4(accountSettingsModuleParam, appConfigModuleParam, applicationContextModuleParam, dummyInterceptorModuleParam, releaseNetworkModuleParam, databaseModuleParam, interceptorModuleTestParam, legacyModuleParam, loginAnalyticsModuleParam, statsModuleParam, supportModuleParam, threadModuleParam, trackerTestModuleParam);
    initialize5(accountSettingsModuleParam, appConfigModuleParam, applicationContextModuleParam, dummyInterceptorModuleParam, releaseNetworkModuleParam, databaseModuleParam, interceptorModuleTestParam, legacyModuleParam, loginAnalyticsModuleParam, statsModuleParam, supportModuleParam, threadModuleParam, trackerTestModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>builderWithExpectedSize(31).put(StatsListFragment.class, ((Provider) statsListFragmentSubcomponentFactoryProvider)).put(StatsViewAllFragment.class, ((Provider) statsViewAllFragmentSubcomponentFactoryProvider)).put(InsightsManagementFragment.class, ((Provider) insightsManagementFragmentSubcomponentFactoryProvider)).put(StatsDetailFragment.class, ((Provider) statsDetailFragmentSubcomponentFactoryProvider)).put(DomainRegistrationDetailsFragment.CountryPickerDialogFragment.class, ((Provider) countryPickerDialogFragmentSubcomponentFactoryProvider)).put(DomainRegistrationDetailsFragment.StatePickerDialogFragment.class, ((Provider) statePickerDialogFragmentSubcomponentFactoryProvider)).put(StatsWidgetConfigureFragment.class, ((Provider) statsWidgetConfigureFragmentSubcomponentFactoryProvider)).put(StatsWidgetSiteSelectionDialogFragment.class, ((Provider) statsWidgetSiteSelectionDialogFragmentSubcomponentFactoryProvider)).put(StatsWidgetColorSelectionDialogFragment.class, ((Provider) statsWidgetColorSelectionDialogFragmentSubcomponentFactoryProvider)).put(StatsMinifiedWidgetConfigureFragment.class, ((Provider) statsMinifiedWidgetConfigureFragmentSubcomponentFactoryProvider)).put(StatsWidgetDataTypeSelectionDialogFragment.class, ((Provider) statsWidgetDataTypeSelectionDialogFragmentSubcomponentFactoryProvider)).put(CommentFullScreenDialogFragment.class, ((Provider) commentFullScreenDialogFragmentSubcomponentFactoryProvider)).put(UsernameChangerFullScreenDialogFragment.class, ((Provider) usernameChangerFullScreenDialogFragmentSubcomponentFactoryProvider)).put(SettingsUsernameChangerFragment.class, ((Provider) settingsUsernameChangerFragmentSubcomponentFactoryProvider)).put(ReaderPostWebViewCachingFragment.class, ((Provider) readerPostWebViewCachingFragmentSubcomponentFactoryProvider)).put(SubfilterPageFragment.class, ((Provider) subfilterPageFragmentSubcomponentFactoryProvider)).put(DebugSettingsFragment.class, ((Provider) debugSettingsFragmentSubcomponentFactoryProvider)).put(BasicDialog.class, ((Provider) basicDialogSubcomponentFactoryProvider)).put(Login2FaFragment.class, ((Provider) login2FaFragmentSubcomponentFactoryProvider)).put(LoginEmailFragment.class, ((Provider) loginEmailFragmentSubcomponentFactoryProvider)).put(LoginEmailPasswordFragment.class, ((Provider) loginEmailPasswordFragmentSubcomponentFactoryProvider)).put(LoginGoogleFragment.class, ((Provider) loginGoogleFragmentSubcomponentFactoryProvider)).put(LoginMagicLinkRequestFragment.class, ((Provider) loginMagicLinkRequestFragmentSubcomponentFactoryProvider)).put(LoginMagicLinkSentFragment.class, ((Provider) loginMagicLinkSentFragmentSubcomponentFactoryProvider)).put(LoginSiteAddressFragment.class, ((Provider) loginSiteAddressFragmentSubcomponentFactoryProvider)).put(LoginSiteAddressHelpDialogFragment.class, ((Provider) loginSiteAddressHelpDialogFragmentSubcomponentFactoryProvider)).put(LoginUsernamePasswordFragment.class, ((Provider) loginUsernamePasswordFragmentSubcomponentFactoryProvider)).put(SignupGoogleFragment.class, ((Provider) signupGoogleFragmentSubcomponentFactoryProvider)).put(SignupMagicLinkFragment.class, ((Provider) signupMagicLinkFragmentSubcomponentFactoryProvider)).put(SignupConfirmationFragment.class, ((Provider) signupConfirmationFragmentSubcomponentFactoryProvider)).put(LoginWpcomService.class, ((Provider) loginWpcomServiceSubcomponentFactoryProvider)).build();
  }

  private Set<Interceptor> namedSetOfInterceptor() {
    return ImmutableSet.<Interceptor>of(InterceptorModuleTest_ProvideMockingInterceptorFactory.provideMockingInterceptor(interceptorModuleTest));
  }

  private Set<Interceptor> namedSetOfInterceptor2() {
    return ImmutableSet.<Interceptor>of(DummyInterceptorModule_ProvideNetworkInterceptorFactory.provideNetworkInterceptor(dummyInterceptorModule));
  }

  private UserAgent userAgent() {
    return AppConfigModule_ProvideUserAgentFactory.provideUserAgent(appConfigModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private SelfHostedEndpointFinder selfHostedEndpointFinder() {
    return new SelfHostedEndpointFinder(dispatcherProvider.get(), discoveryXMLRPCClientProvider.get(), discoveryWPAPIRestClientProvider.get());
  }

  private Authenticator authenticator() {
    return new Authenticator(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), dispatcherProvider.get(), provideRequestQueueProvider.get(), AppConfigModule_ProvideAppSecretsFactory.provideAppSecrets(appConfigModule));
  }

  private PreferenceUtils.PreferenceUtilsWrapper preferenceUtilsWrapper() {
    return new PreferenceUtils.PreferenceUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private CoroutineEngine coroutineEngine() {
    return new CoroutineEngine(provideCoroutineContextProvider.get(), new AppLogWrapper());
  }

  private UploadServiceFacade uploadServiceFacade() {
    return new UploadServiceFacade(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private LiveData<ConnectionStatus> liveDataOfConnectionStatus() {
    return ApplicationModule_ProvideConnectionStatusLiveDataFactory.provideConnectionStatusLiveData(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private ResourceProvider resourceProvider() {
    return new ResourceProvider(contextProvider.get());
  }

  private VideoLoader videoLoader() {
    return new VideoLoader(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), authenticationUtilsProvider.get(), new AppLogWrapper(), mediaUtilsWrapperProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private WidgetUtils widgetUtils() {
    return new WidgetUtils(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), imageManagerProvider.get());
  }

  private ViewsWidgetUpdater viewsWidgetUpdater() {
    return new ViewsWidgetUpdater(appPrefsWrapperProvider.get(), siteStoreProvider.get(), accountStoreProvider.get(), networkUtilsWrapperProvider.get(), resourceProvider(), widgetUtils(), analyticsTrackerWrapperProvider.get());
  }

  private AllTimeWidgetUpdater allTimeWidgetUpdater() {
    return new AllTimeWidgetUpdater(appPrefsWrapperProvider.get(), siteStoreProvider.get(), accountStoreProvider.get(), networkUtilsWrapperProvider.get(), resourceProvider(), widgetUtils(), analyticsTrackerWrapperProvider.get());
  }

  private TodayWidgetUpdater todayWidgetUpdater() {
    return new TodayWidgetUpdater(appPrefsWrapperProvider.get(), siteStoreProvider.get(), accountStoreProvider.get(), networkUtilsWrapperProvider.get(), resourceProvider(), widgetUtils(), analyticsTrackerWrapperProvider.get());
  }

  private LocaleManagerWrapper localeManagerWrapper() {
    return new LocaleManagerWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private StatsUtils statsUtils() {
    return new StatsUtils(resourceProvider(), localeManagerWrapper());
  }

  private org.wordpress.android.fluxc.network.rest.wpcom.stats.time.StatsUtils statsUtils2() {
    return new org.wordpress.android.fluxc.network.rest.wpcom.stats.time.StatsUtils(new CurrentDateUtils());
  }

  private InsightsSqlUtils.TodayInsightsSqlUtils todayInsightsSqlUtils() {
    return new InsightsSqlUtils.TodayInsightsSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private InsightsMapper insightsMapper() {
    return new InsightsMapper(statsUtils2());
  }

  private MinifiedWidgetUpdater minifiedWidgetUpdater() {
    return new MinifiedWidgetUpdater(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), appPrefsWrapperProvider.get(), siteStoreProvider.get(), accountStoreProvider.get(), networkUtilsWrapperProvider.get(), resourceProvider(), statsUtils(), todayInsightsStoreProvider.get(), widgetUtils(), analyticsTrackerWrapperProvider.get());
  }

  private WidgetUpdater.StatsWidgetUpdaters statsWidgetUpdaters() {
    return new WidgetUpdater.StatsWidgetUpdaters(viewsWidgetUpdater(), allTimeWidgetUpdater(), todayWidgetUpdater(), minifiedWidgetUpdater(), appPrefsWrapperProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private NotificationManagerWrapper notificationManagerWrapper() {
    return new NotificationManagerWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private SystemNotificationsTracker systemNotificationsTracker() {
    return new SystemNotificationsTracker(analyticsTrackerWrapperProvider.get(), appPrefsWrapperProvider.get(), notificationManagerWrapper());
  }

  private org.wordpress.android.util.DateTimeUtilsWrapper dateTimeUtilsWrapper() {
    return new org.wordpress.android.util.DateTimeUtilsWrapper(localeManagerWrapper(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private SavePostToDbUseCase savePostToDbUseCase() {
    return new SavePostToDbUseCase(uploadUtilsWrapperProvider.get(), dateTimeUtilsWrapper(), dispatcherProvider.get(), new PendingDraftsNotificationsUtilsWrapper(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private EditPostRepository editPostRepository() {
    return new EditPostRepository(localeManagerWrapper(), postStoreProvider.get(), postUtilsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private LogFileProviderWrapper logFileProviderWrapper() {
    return new LogFileProviderWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private WPCrashLoggingDataProvider wPCrashLoggingDataProvider() {
    return new WPCrashLoggingDataProvider(provideSharedPrefsProvider.get(), resourceProvider(), accountStoreProvider.get(), localeManagerWrapper(), encryptedLoggingProvider.get(), logFileProviderWrapper(), new org.wordpress.android.util.BuildConfigWrapper());
  }

  private SaveStoryGutenbergBlockUseCase saveStoryGutenbergBlockUseCase() {
    return new SaveStoryGutenbergBlockUseCase(storiesPrefsProvider.get(), provideCrashLoggingProvider.get());
  }

  private StoryMediaSaveUploadBridge storyMediaSaveUploadBridge() {
    return injectStoryMediaSaveUploadBridge(StoryMediaSaveUploadBridge_Factory.newInstance(addLocalMediaToPostUseCaseProvider.get(), savePostToDbUseCase(), storiesPrefsProvider.get(), uploadServiceFacade(), networkUtilsWrapperProvider.get(), postUtilsWrapperProvider.get(), eventBusWrapperProvider.get(), new StoryRepositoryWrapper(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule)));
  }

  private ManualFeatureConfig manualFeatureConfig() {
    return new ManualFeatureConfig(appPrefsWrapperProvider.get(), new org.wordpress.android.util.BuildConfigWrapper());
  }

  private CreateSiteNotificationHandler createSiteNotificationHandler() {
    return new CreateSiteNotificationHandler(accountStoreProvider.get(), siteStoreProvider.get(), systemNotificationsTracker());
  }

  private BloggingPromptsOnboardingNotificationHandler bloggingPromptsOnboardingNotificationHandler(
      ) {
    return new BloggingPromptsOnboardingNotificationHandler(accountStoreProvider.get(), systemNotificationsTracker());
  }

  private LocalNotificationHandlerFactory localNotificationHandlerFactory() {
    return new LocalNotificationHandlerFactory(createSiteNotificationHandler(), bloggingPromptsOnboardingNotificationHandler());
  }

  private ReminderScheduler reminderScheduler() {
    return new ReminderScheduler(contextProvider.get());
  }

  private ReminderNotificationManager reminderNotificationManager() {
    return new ReminderNotificationManager(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private BloggingRemindersAnalyticsTracker bloggingRemindersAnalyticsTracker() {
    return new BloggingRemindersAnalyticsTracker(analyticsTrackerWrapperProvider.get(), siteStoreProvider.get());
  }

  private ReminderNotifier reminderNotifier() {
    return new ReminderNotifier(contextProvider.get(), resourceProvider(), siteStoreProvider.get(), accountStoreProvider.get(), reminderNotificationManager(), bloggingRemindersAnalyticsTracker());
  }

  private WeeklyRoundupScheduler weeklyRoundupScheduler() {
    return new WeeklyRoundupScheduler(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private TimeStatsSqlUtils.VisitsAndViewsSqlUtils visitsAndViewsSqlUtils() {
    return new TimeStatsSqlUtils.VisitsAndViewsSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private TimeStatsMapper timeStatsMapper() {
    return new TimeStatsMapper(provideGsonProvider.get());
  }

  private WeeklyRoundupRepository weeklyRoundupRepository() {
    return new WeeklyRoundupRepository(visitsAndViewsStoreProvider.get());
  }

  private WeeklyRoundupNotifier weeklyRoundupNotifier() {
    return new WeeklyRoundupNotifier(accountStoreProvider.get(), siteStoreProvider.get(), contextProvider.get(), resourceProvider(), weeklyRoundupScheduler(), systemNotificationsTracker(), siteUtilsWrapperProvider.get(), weeklyRoundupRepository(), appPrefsWrapperProvider.get());
  }

  private BloggingPromptsFeatureConfig bloggingPromptsFeatureConfig() {
    return new BloggingPromptsFeatureConfig(appConfigProvider.get());
  }

  private PromptReminderNotifier promptReminderNotifier() {
    return new PromptReminderNotifier(contextProvider.get(), resourceProvider(), siteStoreProvider.get(), accountStoreProvider.get(), reminderNotificationManager(), bloggingPromptsFeatureConfig(), bloggingPromptsStoreProvider.get(), bloggingRemindersAnalyticsTracker(), new HtmlCompatWrapper(), bloggingRemindersStoreProvider.get());
  }

  private WordPressWorkersFactory wordPressWorkersFactory() {
    return new WordPressWorkersFactory(uploadStarterProvider.get(), siteStoreProvider.get(), localNotificationHandlerFactory(), reminderScheduler(), reminderNotifier(), weeklyRoundupNotifier(), promptReminderNotifier());
  }

  private DebugCookieManager debugCookieManager() {
    return new DebugCookieManager(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), provideCookieManagerProvider.get(), new org.wordpress.android.util.BuildConfigWrapper());
  }

  private org.wordpress.android.ui.prefs.SiteSettingsInterfaceWrapper.Factory siteSettingsInterfaceWrapperFactory(
      ) {
    return new org.wordpress.android.ui.prefs.SiteSettingsInterfaceWrapper.Factory(contextProvider.get());
  }

  private MySiteDefaultTabExperimentFeatureConfig mySiteDefaultTabExperimentFeatureConfig() {
    return new MySiteDefaultTabExperimentFeatureConfig(appConfigProvider.get());
  }

  private MySiteDefaultTabExperimentVariationDashboardFeatureConfig mySiteDefaultTabExperimentVariationDashboardFeatureConfig(
      ) {
    return new MySiteDefaultTabExperimentVariationDashboardFeatureConfig(appConfigProvider.get());
  }

  private MySiteDashboardTabsFeatureConfig mySiteDashboardTabsFeatureConfig() {
    return new MySiteDashboardTabsFeatureConfig(appConfigProvider.get());
  }

  private MySiteDefaultTabExperiment mySiteDefaultTabExperiment() {
    return new MySiteDefaultTabExperiment(mySiteDefaultTabExperimentFeatureConfig(), mySiteDefaultTabExperimentVariationDashboardFeatureConfig(), mySiteDashboardTabsFeatureConfig(), appPrefsWrapperProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private FluxCImageLoader fluxCImageLoader() {
    return new FluxCImageLoader(provideRequestQueueCustomSSLProvider.get(), provideImageCacheProvider.get(), accessTokenProvider.get(), new HTTPAuthManager(), userAgent());
  }

  private LoginAnalyticsListener loginAnalyticsListener() {
    return LoginAnalyticsModule_ProvideAnalyticsListenerFactory.provideAnalyticsListener(loginAnalyticsModule, accountStoreProvider.get(), siteStoreProvider.get(), unifiedLoginTrackerProvider.get());
  }

  private ShortcutUtils shortcutUtils() {
    return new ShortcutUtils(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private PluginCoroutineStore pluginCoroutineStore() {
    return new PluginCoroutineStore(coroutineEngine(), dispatcherProvider.get(), pluginWPAPIRestClientProvider.get(), discoveryWPAPIRestClientProvider.get(), siteSqlUtilsProvider.get(), nonceRestClientProvider.get(), new CurrentTimeProvider(), new PluginSqlUtilsWrapper());
  }

  private FormattableContentMapper formattableContentMapper() {
    return new FormattableContentMapper(provideGsonProvider.get());
  }

  private GetRestoreStatusUseCase getRestoreStatusUseCase() {
    return new GetRestoreStatusUseCase(networkUtilsWrapperProvider.get(), activityLogStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private GetBackupDownloadStatusUseCase getBackupDownloadStatusUseCase() {
    return new GetBackupDownloadStatusUseCase(networkUtilsWrapperProvider.get(), activityLogStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private PostDismissBackupDownloadUseCase postDismissBackupDownloadUseCase() {
    return new PostDismissBackupDownloadUseCase(networkUtilsWrapperProvider.get(), activityLogStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private DateUtils dateUtils() {
    return new DateUtils(contextProvider.get(), localeManagerWrapper());
  }

  private JetpackCapabilitiesUseCase jetpackCapabilitiesUseCase() {
    return new JetpackCapabilitiesUseCase(siteStoreProvider.get(), dispatcherProvider.get(), appPrefsWrapperProvider.get());
  }

  private HtmlMessageUtils htmlMessageUtils() {
    return new HtmlMessageUtils(resourceProvider());
  }

  private ActionPerformer actionPerformer() {
    return new ActionPerformer(dispatcherProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private PostModelUploadStatusTracker postModelUploadStatusTracker() {
    return new PostModelUploadStatusTracker(uploadStoreProvider.get(), uploadActionUseCaseProvider.get());
  }

  private SiteOptionsStore siteOptionsStore() {
    return new SiteOptionsStore(coroutineEngine(), dispatcherProvider.get(), new SiteHomepageSettingsMapper(), siteHomepageRestClientProvider.get());
  }

  private CreatePageListItemLabelsUseCase createPageListItemLabelsUseCase() {
    return new CreatePageListItemLabelsUseCase(new AutoSaveConflictResolver(), new PostPageListLabelColorUseCase(), uploadUtilsWrapperProvider.get());
  }

  private PageItemProgressUiStateUseCase pageItemProgressUiStateUseCase() {
    return new PageItemProgressUiStateUseCase(appPrefsWrapperProvider.get());
  }

  private ReaderPostBookmarkUseCase readerPostBookmarkUseCase() {
    return new ReaderPostBookmarkUseCase(readerTrackerProvider.get(), networkUtilsWrapperProvider.get(), readerPostActionsWrapperProvider.get(), readerPostTableWrapperProvider.get());
  }

  private ReaderBlogActionsWrapper readerBlogActionsWrapper() {
    return new ReaderBlogActionsWrapper(readerUtilsWrapperProvider.get());
  }

  private ReaderBlogTableWrapper readerBlogTableWrapper() {
    return new ReaderBlogTableWrapper(readerUtilsWrapperProvider.get());
  }

  private ReaderSiteFollowUseCase readerSiteFollowUseCase() {
    return new ReaderSiteFollowUseCase(networkUtilsWrapperProvider.get(), readerBlogActionsWrapper(), readerBlogTableWrapper(), readerUtilsWrapperProvider.get(), readerTrackerProvider.get());
  }

  private BlockBlogUseCase blockBlogUseCase() {
    return new BlockBlogUseCase(networkUtilsWrapperProvider.get(), readerTrackerProvider.get(), readerBlogActionsWrapper());
  }

  private PostLikeUseCase postLikeUseCase() {
    return new PostLikeUseCase(readerPostActionsWrapperProvider.get(), readerTrackerProvider.get(), accountStoreProvider.get(), networkUtilsWrapperProvider.get());
  }

  private ReaderSiteNotificationsUseCase readerSiteNotificationsUseCase() {
    return new ReaderSiteNotificationsUseCase(dispatcherProvider.get(), readerTrackerProvider.get(), readerBlogTableWrapper(), networkUtilsWrapperProvider.get());
  }

  private UndoBlockBlogUseCase undoBlockBlogUseCase() {
    return new UndoBlockBlogUseCase(readerTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private ReaderFetchSiteUseCase readerFetchSiteUseCase() {
    return new ReaderFetchSiteUseCase(networkUtilsWrapperProvider.get(), readerBlogActionsWrapper());
  }

  private PostSeenStatusApiCallsProvider postSeenStatusApiCallsProvider() {
    return new PostSeenStatusApiCallsProvider(contextProvider.get());
  }

  private ReaderSeenStatusToggleUseCase readerSeenStatusToggleUseCase() {
    return new ReaderSeenStatusToggleUseCase(networkUtilsWrapperProvider.get(), postSeenStatusApiCallsProvider(), accountStoreProvider.get(), readerTrackerProvider.get(), readerPostTableWrapperProvider.get(), readerBlogTableWrapper());
  }

  private ReaderPostCardActionsHandler readerPostCardActionsHandler() {
    return new ReaderPostCardActionsHandler(readerTrackerProvider.get(), reblogUseCaseProvider.get(), readerPostBookmarkUseCase(), readerSiteFollowUseCase(), blockBlogUseCase(), postLikeUseCase(), readerSiteNotificationsUseCase(), undoBlockBlogUseCase(), readerFetchSiteUseCase(), appPrefsWrapperProvider.get(), dispatcherProvider.get(), resourceProvider(), htmlMessageUtils(), new AppRatingDialogWrapper(), readerSeenStatusToggleUseCase(), readerBlogTableWrapper(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private SeenUnseenWithCounterFeatureConfig seenUnseenWithCounterFeatureConfig() {
    return new SeenUnseenWithCounterFeatureConfig(appConfigProvider.get());
  }

  private FeaturedImageUtils featuredImageUtils() {
    return new FeaturedImageUtils(photonUtilsWrapperProvider.get());
  }

  private ReaderFetchRelatedPostsUseCase readerFetchRelatedPostsUseCase() {
    return new ReaderFetchRelatedPostsUseCase(networkUtilsWrapperProvider.get(), readerPostActionsWrapperProvider.get());
  }

  private ReaderGetPostUseCase readerGetPostUseCase() {
    return new ReaderGetPostUseCase(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), readerPostTableWrapperProvider.get());
  }

  private ReaderFetchPostUseCase readerFetchPostUseCase() {
    return new ReaderFetchPostUseCase(networkUtilsWrapperProvider.get(), readerPostActionsWrapperProvider.get());
  }

  private GetLikesUseCase getLikesUseCase() {
    return new GetLikesUseCase(networkUtilsWrapperProvider.get(), dispatcherProvider.get(), commentStoreProvider.get(), postStoreProvider.get(), accountStoreProvider.get());
  }

  private GetLikesHandler getLikesHandler() {
    return new GetLikesHandler(getLikesUseCase(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private LikesEnhancementsFeatureConfig likesEnhancementsFeatureConfig() {
    return new LikesEnhancementsFeatureConfig(appConfigProvider.get());
  }

  private CommentsSnippetFeatureConfig commentsSnippetFeatureConfig() {
    return new CommentsSnippetFeatureConfig(appConfigProvider.get());
  }

  private SubfilterListItemMapper subfilterListItemMapper() {
    return new SubfilterListItemMapper(readerUtilsWrapperProvider.get(), readerBlogTableWrapper());
  }

  private StatsRevampV2FeatureConfig statsRevampV2FeatureConfig() {
    return new StatsRevampV2FeatureConfig(appConfigProvider.get());
  }

  private StatsDateFormatter statsDateFormatter() {
    return new StatsDateFormatter(localeManagerWrapper(), resourceProvider());
  }

  private RtlUtils rtlUtils() {
    return new RtlUtils(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private ContentDescriptionHelper contentDescriptionHelper() {
    return new ContentDescriptionHelper(resourceProvider(), rtlUtils());
  }

  private ViewsAndVisitorsMapper viewsAndVisitorsMapper() {
    return new ViewsAndVisitorsMapper(statsDateFormatter(), resourceProvider(), statsUtils(), contentDescriptionHelper());
  }

  private ViewsAndVisitorsUseCase.ViewsAndVisitorsUseCaseFactory viewsAndVisitorsUseCaseFactory() {
    return new ViewsAndVisitorsUseCase.ViewsAndVisitorsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsSiteProvider.get(), selectedDateProvider.get(), statsDateFormatter(), viewsAndVisitorsMapper(), visitsAndViewsStoreProvider.get(), analyticsTrackerWrapperProvider.get(), statsWidgetUpdaters(), localeManagerWrapper(), resourceProvider());
  }

  private InsightsSqlUtils.AllTimeSqlUtils allTimeSqlUtils() {
    return new InsightsSqlUtils.AllTimeSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private AllTimeStatsUseCase allTimeStatsUseCase() {
    return new AllTimeStatsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), allTimeInsightsStoreProvider.get(), statsSiteProvider.get(), statsDateFormatter(), statsWidgetUpdaters(), statsUtils(), itemPopupMenuHandlerProvider.get());
  }

  private InsightsSqlUtils.LatestPostDetailSqlUtils latestPostDetailSqlUtils() {
    return new InsightsSqlUtils.LatestPostDetailSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private InsightsSqlUtils.DetailedPostStatsSqlUtils detailedPostStatsSqlUtils() {
    return new InsightsSqlUtils.DetailedPostStatsSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private StatsSinceLabelFormatter statsSinceLabelFormatter() {
    return new StatsSinceLabelFormatter(resourceProvider());
  }

  private LatestPostSummaryMapper latestPostSummaryMapper() {
    return new LatestPostSummaryMapper(statsSinceLabelFormatter(), resourceProvider(), statsDateFormatter(), statsUtils());
  }

  private LatestPostSummaryUseCase latestPostSummaryUseCase() {
    return new LatestPostSummaryUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), latestPostInsightsStoreProvider.get(), statsSiteProvider.get(), latestPostSummaryMapper(), analyticsTrackerWrapperProvider.get(), statsRevampV2FeatureConfig(), itemPopupMenuHandlerProvider.get(), statsUtils(), contentDescriptionHelper());
  }

  private TodayStatsUseCase todayStatsUseCase() {
    return new TodayStatsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), todayInsightsStoreProvider.get(), statsSiteProvider.get(), statsWidgetUpdaters(), statsUtils(), itemPopupMenuHandlerProvider.get());
  }

  private InsightsSqlUtils.WpComFollowersSqlUtils wpComFollowersSqlUtils() {
    return new InsightsSqlUtils.WpComFollowersSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private InsightsSqlUtils.EmailFollowersSqlUtils emailFollowersSqlUtils() {
    return new InsightsSqlUtils.EmailFollowersSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private FollowersUseCase.FollowersUseCaseFactory followersUseCaseFactory() {
    return new FollowersUseCase.FollowersUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), followersStoreProvider.get(), statsSiteProvider.get(), statsSinceLabelFormatter(), resourceProvider(), itemPopupMenuHandlerProvider.get(), analyticsTrackerWrapperProvider.get(), contentDescriptionHelper(), statsRevampV2FeatureConfig());
  }

  private InsightsSqlUtils.CommentsInsightsSqlUtils commentsInsightsSqlUtils() {
    return new InsightsSqlUtils.CommentsInsightsSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private CommentsUseCase commentsUseCase() {
    return new CommentsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), commentsStoreProvider.get(), statsSiteProvider.get(), itemPopupMenuHandlerProvider.get(), statsUtils(), contentDescriptionHelper());
  }

  private InsightsSqlUtils.MostPopularSqlUtils mostPopularSqlUtils() {
    return new InsightsSqlUtils.MostPopularSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private MostPopularInsightsUseCase mostPopularInsightsUseCase() {
    return new MostPopularInsightsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), mostPopularInsightsStoreProvider.get(), postStoreProvider.get(), statsSiteProvider.get(), dateUtils(), resourceProvider(), statsRevampV2FeatureConfig(), itemPopupMenuHandlerProvider.get(), actionCardHandlerProvider.get());
  }

  private InsightsSqlUtils.TagsSqlUtils tagsSqlUtils() {
    return new InsightsSqlUtils.TagsSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private TagsAndCategoriesUseCase.TagsAndCategoriesUseCaseFactory tagsAndCategoriesUseCaseFactory(
      ) {
    return new TagsAndCategoriesUseCase.TagsAndCategoriesUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), tagsStoreProvider.get(), statsSiteProvider.get(), resourceProvider(), statsUtils(), analyticsTrackerWrapperProvider.get(), contentDescriptionHelper(), itemPopupMenuHandlerProvider.get());
  }

  private InsightsSqlUtils.PublicizeSqlUtils publicizeSqlUtils() {
    return new InsightsSqlUtils.PublicizeSqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private ServiceMapper serviceMapper() {
    return new ServiceMapper(resourceProvider(), statsUtils(), contentDescriptionHelper());
  }

  private PublicizeUseCase.PublicizeUseCaseFactory publicizeUseCaseFactory() {
    return new PublicizeUseCase.PublicizeUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), publicizeStoreProvider.get(), statsSiteProvider.get(), serviceMapper(), analyticsTrackerWrapperProvider.get(), itemPopupMenuHandlerProvider.get());
  }

  private InsightsSqlUtils.PostingActivitySqlUtils postingActivitySqlUtils() {
    return new InsightsSqlUtils.PostingActivitySqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private PostingActivityMapper postingActivityMapper() {
    return new PostingActivityMapper(localeManagerWrapper(), resourceProvider());
  }

  private PostingActivityUseCase postingActivityUseCase() {
    return new PostingActivityUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), postingActivityStoreProvider.get(), statsSiteProvider.get(), postingActivityMapper(), itemPopupMenuHandlerProvider.get());
  }

  private FollowerTotalsUseCase followerTotalsUseCase() {
    return new FollowerTotalsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), followersStoreProvider.get(), publicizeStoreProvider.get(), statsSiteProvider.get(), contentDescriptionHelper(), statsUtils(), itemPopupMenuHandlerProvider.get());
  }

  private TotalStatsMapper totalStatsMapper() {
    return new TotalStatsMapper(resourceProvider(), statsUtils());
  }

  private TotalLikesUseCase.TotalLikesUseCaseFactory totalLikesUseCaseFactory() {
    return new TotalLikesUseCase.TotalLikesUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), visitsAndViewsStoreProvider.get(), latestPostInsightsStoreProvider.get(), statsSiteProvider.get(), resourceProvider(), statsDateFormatter(), totalStatsMapper(), analyticsTrackerWrapperProvider.get(), statsWidgetUpdaters(), localeManagerWrapper());
  }

  private TotalCommentsUseCase.TotalCommentsUseCaseFactory totalCommentsUseCaseFactory() {
    return new TotalCommentsUseCase.TotalCommentsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), visitsAndViewsStoreProvider.get(), statsSiteProvider.get(), resourceProvider(), statsDateFormatter(), totalStatsMapper(), analyticsTrackerWrapperProvider.get(), statsWidgetUpdaters(), localeManagerWrapper());
  }

  private InsightsSqlUtils.SummarySqlUtils summarySqlUtils() {
    return new InsightsSqlUtils.SummarySqlUtils(statsSqlUtilsProvider.get(), statsRequestSqlUtilsProvider.get());
  }

  private TotalFollowersUseCase.TotalFollowersUseCaseFactory totalFollowersUseCaseFactory() {
    return new TotalFollowersUseCase.TotalFollowersUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), summaryStoreProvider.get(), statsSiteProvider.get(), resourceProvider(), totalStatsMapper(), analyticsTrackerWrapperProvider.get(), actionCardHandlerProvider.get());
  }

  private AnnualStatsMapper annualStatsMapper() {
    return new AnnualStatsMapper(contentDescriptionHelper(), statsUtils());
  }

  private AnnualSiteStatsUseCase.AnnualSiteStatsUseCaseFactory annualSiteStatsUseCaseFactory() {
    return new AnnualSiteStatsUseCase.AnnualSiteStatsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), mostPopularInsightsStoreProvider.get(), statsSiteProvider.get(), annualStatsMapper(), localeManagerWrapper(), selectedDateProvider.get(), itemPopupMenuHandlerProvider.get());
  }

  private ManagementControlUseCase managementControlUseCase() {
    return new ManagementControlUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), newsCardHandlerProvider.get(), resourceProvider(), analyticsTrackerWrapperProvider.get());
  }

  private ManagementNewsCardUseCase managementNewsCardUseCase() {
    return new ManagementNewsCardUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), resourceProvider(), newsCardHandlerProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private ActionCardGrowUseCase actionCardGrowUseCase() {
    return new ActionCardGrowUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), actionCardHandlerProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private ActionCardReminderUseCase actionCardReminderUseCase() {
    return new ActionCardReminderUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), actionCardHandlerProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private ActionCardScheduleUseCase actionCardScheduleUseCase() {
    return new ActionCardScheduleUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), actionCardHandlerProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private UiModelMapper uiModelMapper() {
    return new UiModelMapper(networkUtilsWrapperProvider.get());
  }

  private org.wordpress.android.ui.stats.refresh.utils.StatsDateSelector.Factory statsDateSelectorFactory(
      ) {
    return new org.wordpress.android.ui.stats.refresh.utils.StatsDateSelector.Factory(selectedDateProvider.get(), statsSiteProvider.get(), statsDateFormatter());
  }

  private TimeStatsSqlUtils.PostsAndPagesSqlUtils postsAndPagesSqlUtils() {
    return new TimeStatsSqlUtils.PostsAndPagesSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private PostsAndPagesUseCase.PostsAndPagesUseCaseFactory postsAndPagesUseCaseFactory() {
    return new PostsAndPagesUseCase.PostsAndPagesUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), postAndPageViewsStoreProvider.get(), selectedDateProvider.get(), statsSiteProvider.get(), contentDescriptionHelper(), statsUtils(), analyticsTrackerWrapperProvider.get());
  }

  private TimeStatsSqlUtils.ReferrersSqlUtils referrersSqlUtils() {
    return new TimeStatsSqlUtils.ReferrersSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private ReferrersUseCase.ReferrersUseCaseFactory referrersUseCaseFactory() {
    return new ReferrersUseCase.ReferrersUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), referrersStoreProvider.get(), statsSiteProvider.get(), selectedDateProvider.get(), contentDescriptionHelper(), statsUtils(), resourceProvider(), analyticsTrackerWrapperProvider.get(), referrerPopupMenuHandlerProvider.get(), statsRevampV2FeatureConfig());
  }

  private TimeStatsSqlUtils.ClicksSqlUtils clicksSqlUtils() {
    return new TimeStatsSqlUtils.ClicksSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private ClicksUseCase.ClicksUseCaseFactory clicksUseCaseFactory() {
    return new ClicksUseCase.ClicksUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), clicksStoreProvider.get(), statsSiteProvider.get(), selectedDateProvider.get(), contentDescriptionHelper(), statsUtils(), analyticsTrackerWrapperProvider.get());
  }

  private TimeStatsSqlUtils.CountryViewsSqlUtils countryViewsSqlUtils() {
    return new TimeStatsSqlUtils.CountryViewsSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private CountryViewsUseCase.CountryViewsUseCaseFactory countryViewsUseCaseFactory() {
    return new CountryViewsUseCase.CountryViewsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), countryViewsStoreProvider.get(), statsSiteProvider.get(), selectedDateProvider.get(), analyticsTrackerWrapperProvider.get(), statsUtils(), contentDescriptionHelper());
  }

  private TimeStatsSqlUtils.VideoPlaysSqlUtils videoPlaysSqlUtils() {
    return new TimeStatsSqlUtils.VideoPlaysSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private VideoPlaysUseCase.VideoPlaysUseCaseFactory videoPlaysUseCaseFactory() {
    return new VideoPlaysUseCase.VideoPlaysUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), videoPlaysStoreProvider.get(), selectedDateProvider.get(), statsSiteProvider.get(), analyticsTrackerWrapperProvider.get(), statsUtils(), contentDescriptionHelper());
  }

  private TimeStatsSqlUtils.SearchTermsSqlUtils searchTermsSqlUtils() {
    return new TimeStatsSqlUtils.SearchTermsSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private SearchTermsUseCase.SearchTermsUseCaseFactory searchTermsUseCaseFactory() {
    return new SearchTermsUseCase.SearchTermsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), searchTermsStoreProvider.get(), selectedDateProvider.get(), statsSiteProvider.get(), analyticsTrackerWrapperProvider.get(), statsUtils(), contentDescriptionHelper());
  }

  private TimeStatsSqlUtils.AuthorsSqlUtils authorsSqlUtils() {
    return new TimeStatsSqlUtils.AuthorsSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private AuthorsUseCase.AuthorsUseCaseFactory authorsUseCaseFactory() {
    return new AuthorsUseCase.AuthorsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), authorsStoreProvider.get(), statsSiteProvider.get(), selectedDateProvider.get(), analyticsTrackerWrapperProvider.get(), statsUtils(), contentDescriptionHelper());
  }

  private OverviewMapper overviewMapper() {
    return new OverviewMapper(statsDateFormatter(), resourceProvider(), statsUtils(), contentDescriptionHelper());
  }

  private OverviewUseCase.OverviewUseCaseFactory overviewUseCaseFactory() {
    return new OverviewUseCase.OverviewUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsSiteProvider.get(), selectedDateProvider.get(), statsDateFormatter(), overviewMapper(), visitsAndViewsStoreProvider.get(), analyticsTrackerWrapperProvider.get(), statsWidgetUpdaters(), localeManagerWrapper(), resourceProvider());
  }

  private TimeStatsSqlUtils.FileDownloadsSqlUtils fileDownloadsSqlUtils() {
    return new TimeStatsSqlUtils.FileDownloadsSqlUtils(statsSqlUtilsProvider.get(), statsUtils2(), statsRequestSqlUtilsProvider.get());
  }

  private FileDownloadsUseCase.FileDownloadsUseCaseFactory fileDownloadsUseCaseFactory() {
    return new FileDownloadsUseCase.FileDownloadsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), fileDownloadsStoreProvider.get(), selectedDateProvider.get(), statsSiteProvider.get(), analyticsTrackerWrapperProvider.get(), contentDescriptionHelper(), statsUtils(), localeManagerWrapper());
  }

  private PostHeaderUseCase postHeaderUseCase() {
    return new PostHeaderUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsPostProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private PostDayViewsMapper postDayViewsMapper() {
    return new PostDayViewsMapper(resourceProvider(), statsUtils(), statsDateFormatter());
  }

  private PostDayViewsUseCase postDayViewsUseCase() {
    return new PostDayViewsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), postDayViewsMapper(), statsDateFormatter(), selectedDateProvider.get(), statsSiteProvider.get(), statsPostProvider.get(), postDetailStoreProvider.get(), resourceProvider());
  }

  private PostDetailMapper postDetailMapper() {
    return new PostDetailMapper(localeManagerWrapper(), statsDateFormatter(), statsUtils(), contentDescriptionHelper());
  }

  private PostMonthsAndYearsUseCase.PostMonthsAndYearsUseCaseFactory postMonthsAndYearsUseCaseFactory(
      ) {
    return new PostMonthsAndYearsUseCase.PostMonthsAndYearsUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsSiteProvider.get(), statsPostProvider.get(), postDetailMapper(), postDetailStoreProvider.get());
  }

  private PostAverageViewsPerDayUseCase.PostAverageViewsPerDayUseCaseFactory postAverageViewsPerDayUseCaseFactory(
      ) {
    return new PostAverageViewsPerDayUseCase.PostAverageViewsPerDayUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsSiteProvider.get(), statsPostProvider.get(), postDetailMapper(), postDetailStoreProvider.get());
  }

  private PostRecentWeeksUseCase.PostRecentWeeksUseCaseFactory postRecentWeeksUseCaseFactory() {
    return new PostRecentWeeksUseCase.PostRecentWeeksUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsSiteProvider.get(), statsPostProvider.get(), postDetailMapper(), postDetailStoreProvider.get());
  }

  private ViewsAndVisitorsDetailUseCase.ViewsAndVisitorsGranularUseCaseFactory viewsAndVisitorsGranularUseCaseFactory(
      ) {
    return new ViewsAndVisitorsDetailUseCase.ViewsAndVisitorsGranularUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsSiteProvider.get(), selectedDateProvider.get(), statsDateFormatter(), viewsAndVisitorsMapper(), visitsAndViewsStoreProvider.get(), analyticsTrackerWrapperProvider.get(), statsWidgetUpdaters(), resourceProvider());
  }

  private InsightsManagementMapper insightsManagementMapper() {
    return new InsightsManagementMapper(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), statsRevampV2FeatureConfig());
  }

  private PostListItemUiStateHelper postListItemUiStateHelper() {
    return new PostListItemUiStateHelper(appPrefsWrapperProvider.get(), new PostModelUploadUiStateUseCase(), new PostPageListLabelColorUseCase());
  }

  private FetchPlansUseCase fetchPlansUseCase() {
    return new FetchPlansUseCase(dispatcherProvider.get(), siteStoreProvider.get());
  }

  private SiteDomainsFeatureConfig siteDomainsFeatureConfig() {
    return new SiteDomainsFeatureConfig(appConfigProvider.get());
  }

  private CreateCartUseCase createCartUseCase() {
    return new CreateCartUseCase(dispatcherProvider.get(), transactionsStoreProvider.get());
  }

  private PostSettingsUtils postSettingsUtils() {
    return new PostSettingsUtils(resourceProvider(), dateUtils(), postUtilsWrapperProvider.get());
  }

  private FeatureAnnouncementProvider featureAnnouncementProvider() {
    return new FeatureAnnouncementProvider(whatsNewStoreProvider.get(), new org.wordpress.android.util.BuildConfigWrapper());
  }

  private QuickStartUtilsWrapper quickStartUtilsWrapper() {
    return new QuickStartUtilsWrapper(quickStartStoreProvider.get(), dispatcherProvider.get());
  }

  private QuickStartDynamicCardsFeatureConfig quickStartDynamicCardsFeatureConfig() {
    return new QuickStartDynamicCardsFeatureConfig(appConfigProvider.get());
  }

  private QuickStartTracker quickStartTracker() {
    return new QuickStartTracker(analyticsTrackerWrapperProvider.get(), appPrefsWrapperProvider.get(), selectedSiteRepositoryProvider.get());
  }

  private QuickStartExistingUsersV2FeatureConfig quickStartExistingUsersV2FeatureConfig() {
    return new QuickStartExistingUsersV2FeatureConfig(appConfigProvider.get());
  }

  private SupportedBlocksProvider supportedBlocksProvider() {
    return new SupportedBlocksProvider(contextProvider.get());
  }

  private ModalLayoutPickerDimensionProvider modalLayoutPickerDimensionProvider() {
    return new ModalLayoutPickerDimensionProvider(contextProvider.get());
  }

  private ShouldAutoUpdateTagUseCase shouldAutoUpdateTagUseCase() {
    return new ShouldAutoUpdateTagUseCase(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), readerTagTableWrapperProvider.get());
  }

  private FetchDiscoverCardsUseCase fetchDiscoverCardsUseCase() {
    return new FetchDiscoverCardsUseCase(networkUtilsWrapperProvider.get(), contextProvider.get());
  }

  private ReaderDiscoverDataProvider readerDiscoverDataProvider() {
    return new ReaderDiscoverDataProvider(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), eventBusWrapperProvider.get(), readerTagWrapperProvider.get(), getDiscoverCardsUseCaseProvider.get(), shouldAutoUpdateTagUseCase(), fetchDiscoverCardsUseCase());
  }

  private GetFollowedTagsUseCase getFollowedTagsUseCase() {
    return new GetFollowedTagsUseCase(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), readerTagTableWrapperProvider.get());
  }

  private FetchInterestTagsUseCase fetchInterestTagsUseCase() {
    return new FetchInterestTagsUseCase(contextProvider.get(), eventBusWrapperProvider.get(), networkUtilsWrapperProvider.get(), readerUpdateServiceStarterWrapperProvider.get());
  }

  private FollowInterestTagsUseCase followInterestTagsUseCase() {
    return new FollowInterestTagsUseCase(eventBusWrapperProvider.get(), networkUtilsWrapperProvider.get(), accountStoreProvider.get());
  }

  private FetchFollowedTagsUseCase fetchFollowedTagsUseCase() {
    return new FetchFollowedTagsUseCase(contextProvider.get(), eventBusWrapperProvider.get(), networkUtilsWrapperProvider.get(), readerUpdateServiceStarterWrapperProvider.get());
  }

  private ReaderTagRepository readerTagRepository() {
    return new ReaderTagRepository(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), readerUtilsWrapperProvider.get(), fetchInterestTagsUseCase(), followInterestTagsUseCase(), fetchFollowedTagsUseCase(), getFollowedTagsUseCase(), shouldAutoUpdateTagUseCase(), readerTagTableWrapperProvider.get());
  }

  private HomepageSettingsDataLoader homepageSettingsDataLoader() {
    return new HomepageSettingsDataLoader(pageStoreProvider.get());
  }

  private GetButtonUiStateUseCase getButtonUiStateUseCase() {
    return new GetButtonUiStateUseCase(editorActionsProvider.get(), uploadUtilsWrapperProvider.get());
  }

  private RecommendApiCallsProvider recommendApiCallsProvider() {
    return new RecommendApiCallsProvider(contextProvider.get(), analyticsUtilsWrapperProvider.get(), networkUtilsWrapperProvider.get(), new RestClientProvider(), localeManagerWrapper());
  }

  private SaveInitialPostUseCase saveInitialPostUseCase() {
    return new SaveInitialPostUseCase(postStoreProvider.get(), savePostToDbUseCase());
  }

  private SetUntitledStoryTitleIfTitleEmptyUseCase setUntitledStoryTitleIfTitleEmptyUseCase() {
    return new SetUntitledStoryTitleIfTitleEmptyUseCase(new StoryRepositoryWrapper(), updateStoryPostTitleUseCaseProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private DeviceMediaListBuilder deviceMediaListBuilder() {
    return new DeviceMediaListBuilder(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private PermissionsHandler permissionsHandler() {
    return new PermissionsHandler(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private DeviceMediaLoader deviceMediaLoader() {
    return new DeviceMediaLoader(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), localeManagerWrapper());
  }

  private DeviceListBuilder.DeviceListBuilderFactory deviceListBuilderFactory() {
    return new DeviceListBuilder.DeviceListBuilderFactory(localeManagerWrapper(), deviceMediaLoader(), mediaUtilsWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private MediaLibraryDataSource.MediaLibraryDataSourceFactory mediaLibraryDataSourceFactory() {
    return new MediaLibraryDataSource.MediaLibraryDataSourceFactory(mediaStoreProvider.get(), dispatcherProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), networkUtilsWrapperProvider.get(), dateTimeUtilsWrapper());
  }

  private StockMediaDataSource stockMediaDataSource() {
    return new StockMediaDataSource(stockMediaStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), networkUtilsWrapperProvider.get());
  }

  private TenorGifClient tenorGifClient() {
    return ApplicationModule_ProvideTenorGifClientFactory.provideTenorGifClient(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private GifMediaDataSource gifMediaDataSource() {
    return new GifMediaDataSource(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), tenorGifClient(), uriUtilsWrapperProvider.get(), networkUtilsWrapperProvider.get());
  }

  private MediaLoaderFactory mediaLoaderFactory() {
    return new MediaLoaderFactory(deviceListBuilderFactory(), mediaLibraryDataSourceFactory(), stockMediaDataSource(), gifMediaDataSource(), localeManagerWrapper(), networkUtilsWrapperProvider.get());
  }

  private WPMediaUtilsWrapper wPMediaUtilsWrapper() {
    return new WPMediaUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private DeviceListInsertUseCase.DeviceListInsertUseCaseFactory deviceListInsertUseCaseFactory() {
    return new DeviceListInsertUseCase.DeviceListInsertUseCaseFactory(wPMediaUtilsWrapper());
  }

  private StockMediaInsertUseCase.StockMediaInsertUseCaseFactory stockMediaInsertUseCaseFactory() {
    return new StockMediaInsertUseCase.StockMediaInsertUseCaseFactory(stockMediaStoreProvider.get());
  }

  private GifMediaInsertUseCase.GifMediaInsertUseCaseFactory gifMediaInsertUseCaseFactory() {
    return new GifMediaInsertUseCase.GifMediaInsertUseCaseFactory(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), dispatcherProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), wPMediaUtilsWrapper(), fluxCUtilsWrapperProvider.get(), mimeTypeMapUtilsWrapperProvider.get());
  }

  private MediaInsertHandlerFactory mediaInsertHandlerFactory() {
    return new MediaInsertHandlerFactory(deviceListInsertUseCaseFactory(), stockMediaInsertUseCaseFactory(), gifMediaInsertUseCaseFactory());
  }

  private MediaPickerTracker mediaPickerTracker() {
    return new MediaPickerTracker(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), analyticsTrackerWrapperProvider.get(), analyticsUtilsWrapperProvider.get());
  }

  private DebugUtils debugUtils() {
    return new DebugUtils(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private SuggestionSourceProvider suggestionSourceProvider() {
    return new SuggestionSourceProvider(new SuggestionSourceSubcomponentFactory(singletonC));
  }

  private FetchScanStateUseCase fetchScanStateUseCase() {
    return new FetchScanStateUseCase(networkUtilsWrapperProvider.get(), scanStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private StartScanUseCase startScanUseCase() {
    return new StartScanUseCase(networkUtilsWrapperProvider.get(), scanStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private FixThreatsUseCase fixThreatsUseCase() {
    return new FixThreatsUseCase(networkUtilsWrapperProvider.get(), scanStoreProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private FetchFixThreatsStatusUseCase fetchFixThreatsStatusUseCase() {
    return new FetchFixThreatsStatusUseCase(networkUtilsWrapperProvider.get(), scanStoreProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private FetchScanHistoryUseCase fetchScanHistoryUseCase() {
    return new FetchScanHistoryUseCase(networkUtilsWrapperProvider.get(), scanStoreProvider.get(), scanTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private GetThreatModelUseCase getThreatModelUseCase() {
    return new GetThreatModelUseCase(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), scanStoreProvider.get());
  }

  private IgnoreThreatUseCase ignoreThreatUseCase() {
    return new IgnoreThreatUseCase(networkUtilsWrapperProvider.get(), scanStoreProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private SiteCategoryItemBuilder siteCategoryItemBuilder() {
    return new SiteCategoryItemBuilder(new ThemeBrowserUtils(), siteUtilsWrapperProvider.get());
  }

  private SiteListItemBuilder siteListItemBuilder() {
    return new SiteListItemBuilder(accountStoreProvider.get(), new PluginUtilsWrapper(), siteUtilsWrapperProvider.get(), new org.wordpress.android.util.BuildConfigWrapper(), new ThemeBrowserUtils(), siteDomainsFeatureConfig());
  }

  private SiteItemsBuilder siteItemsBuilder() {
    return new SiteItemsBuilder(siteCategoryItemBuilder(), siteListItemBuilder(), quickStartRepositoryProvider.get());
  }

  private SiteIconUploadHandler siteIconUploadHandler() {
    return new SiteIconUploadHandler(selectedSiteRepositoryProvider.get(), analyticsTrackerWrapperProvider.get(), eventBusWrapperProvider.get());
  }

  private SiteStoriesHandler siteStoriesHandler() {
    return new SiteStoriesHandler(eventBusWrapperProvider.get(), resourceProvider(), new StoriesTrackerHelper(), contextProvider.get(), selectedSiteRepositoryProvider.get(), new StoriesMediaPickerResultHandler());
  }

  private SiteInfoHeaderCardBuilder siteInfoHeaderCardBuilder() {
    return new SiteInfoHeaderCardBuilder(resourceProvider(), quickStartRepositoryProvider.get());
  }

  private QuickLinkRibbonBuilder quickLinkRibbonBuilder() {
    return new QuickLinkRibbonBuilder(quickStartRepositoryProvider.get());
  }

  private TodaysStatsCardBuilder todaysStatsCardBuilder() {
    return new TodaysStatsCardBuilder(statsUtils(), new AppLogWrapper(), htmlMessageUtils());
  }

  private PostCardBuilder postCardBuilder() {
    return new PostCardBuilder(localeManagerWrapper(), new AppLogWrapper());
  }

  private CardsBuilder cardsBuilder2() {
    return new CardsBuilder(todaysStatsCardBuilder(), postCardBuilder(), new BloggingPromptCardBuilder());
  }

  private org.wordpress.android.ui.mysite.cards.CardsBuilder cardsBuilder() {
    return new org.wordpress.android.ui.mysite.cards.CardsBuilder(new org.wordpress.android.util.BuildConfigWrapper(), quickStartDynamicCardsFeatureConfig(), new QuickActionsCardBuilder(), new QuickStartCardBuilder(), quickLinkRibbonBuilder(), cardsBuilder2(), mySiteDefaultTabExperiment());
  }

  private QuickStartItemBuilder quickStartItemBuilder() {
    return new QuickStartItemBuilder(quickStartRepositoryProvider.get());
  }

  private DynamicCardsBuilder dynamicCardsBuilder() {
    return new DynamicCardsBuilder(quickStartDynamicCardsFeatureConfig(), quickStartItemBuilder());
  }

  private LandOnTheEditorFeatureConfig landOnTheEditorFeatureConfig() {
    return new LandOnTheEditorFeatureConfig(appConfigProvider.get());
  }

  private CurrentAvatarSource currentAvatarSource() {
    return new CurrentAvatarSource(accountStoreProvider.get());
  }

  private DomainRegistrationSource domainRegistrationSource() {
    return new DomainRegistrationSource(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), dispatcherProvider.get(), selectedSiteRepositoryProvider.get(), new AppLogWrapper(), siteUtilsWrapperProvider.get());
  }

  private DynamicCardsSource dynamicCardsSource() {
    return new DynamicCardsSource(dynamicCardStoreProvider.get(), selectedSiteRepositoryProvider.get());
  }

  private QuickStartCardSource quickStartCardSource() {
    return new QuickStartCardSource(quickStartRepositoryProvider.get(), quickStartStoreProvider.get(), quickStartUtilsWrapper(), selectedSiteRepositoryProvider.get());
  }

  private ScanAndBackupSource scanAndBackupSource() {
    return new ScanAndBackupSource(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), selectedSiteRepositoryProvider.get(), jetpackCapabilitiesUseCase());
  }

  private SelectedSiteSource selectedSiteSource() {
    return new SelectedSiteSource(selectedSiteRepositoryProvider.get(), dispatcherProvider.get());
  }

  private MySiteDashboardTodaysStatsCardFeatureConfig mySiteDashboardTodaysStatsCardFeatureConfig(
      ) {
    return new MySiteDashboardTodaysStatsCardFeatureConfig(appConfigProvider.get());
  }

  private CardsSource cardsSource() {
    return new CardsSource(selectedSiteRepositoryProvider.get(), cardsStoreProvider.get(), mySiteDashboardTodaysStatsCardFeatureConfig(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private SiteIconProgressSource siteIconProgressSource() {
    return new SiteIconProgressSource(selectedSiteRepositoryProvider.get());
  }

  private BloggingPromptCardSource bloggingPromptCardSource() {
    return new BloggingPromptCardSource(selectedSiteRepositoryProvider.get(), bloggingPromptsStoreProvider.get(), bloggingPromptsFeatureConfig(), appPrefsWrapperProvider.get(), bloggingRemindersStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private MySiteSourceManager mySiteSourceManager() {
    return new MySiteSourceManager(quickStartTracker(), currentAvatarSource(), domainRegistrationSource(), dynamicCardsSource(), quickStartCardSource(), scanAndBackupSource(), selectedSiteSource(), cardsSource(), siteIconProgressSource(), bloggingPromptCardSource(), selectedSiteRepositoryProvider.get());
  }

  private CardsShownTracker cardsShownTracker() {
    return new CardsShownTracker(analyticsTrackerWrapperProvider.get());
  }

  private CardsTracker cardsTracker() {
    return new CardsTracker(cardsShownTracker(), analyticsTrackerWrapperProvider.get(), quickStartTracker());
  }

  private SiteItemsTracker siteItemsTracker() {
    return new SiteItemsTracker(analyticsTrackerWrapperProvider.get());
  }

  private DomainRegistrationCardShownTracker domainRegistrationCardShownTracker() {
    return new DomainRegistrationCardShownTracker(analyticsTrackerWrapperProvider.get());
  }

  private BloggingPromptsCardAnalyticsTracker bloggingPromptsCardAnalyticsTracker() {
    return new BloggingPromptsCardAnalyticsTracker(analyticsTrackerWrapperProvider.get());
  }

  private WizardManager<BackupDownloadStep> wizardManagerOfBackupDownloadStep() {
    return ApplicationModule_ProvideBackupDownloadWizardManagerFactory.provideBackupDownloadWizardManager(backupDownloadStepsProvider.get());
  }

  private GetActivityLogItemUseCase getActivityLogItemUseCase() {
    return new GetActivityLogItemUseCase(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), activityLogStoreProvider.get());
  }

  private CheckboxSpannableLabel checkboxSpannableLabel() {
    return new CheckboxSpannableLabel(resourceProvider());
  }

  private PostBackupDownloadUseCase postBackupDownloadUseCase() {
    return new PostBackupDownloadUseCase(networkUtilsWrapperProvider.get(), activityLogStoreProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private WizardManager<RestoreStep> wizardManagerOfRestoreStep() {
    return ApplicationModule_ProvideRestoreWizardManagerFactory.provideRestoreWizardManager(restoreStepsProvider.get());
  }

  private PostRestoreUseCase postRestoreUseCase() {
    return new PostRestoreUseCase(networkUtilsWrapperProvider.get(), activityLogStoreProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private InviteLinksApiCallsProvider inviteLinksApiCallsProvider() {
    return new InviteLinksApiCallsProvider(contextProvider.get());
  }

  private InviteLinksUseCase inviteLinksUseCase() {
    return new InviteLinksUseCase(networkUtilsWrapperProvider.get(), inviteLinksApiCallsProvider(), accountStoreProvider.get(), analyticsUtilsWrapperProvider.get(), siteStoreProvider.get());
  }

  private InviteLinksHandler inviteLinksHandler() {
    return new InviteLinksHandler(inviteLinksUseCase(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private DeepLinkUriUtils deepLinkUriUtils() {
    return new DeepLinkUriUtils(siteStoreProvider.get(), uriUtilsWrapperProvider.get());
  }

  private EditorLinkHandler editorLinkHandler() {
    return new EditorLinkHandler(deepLinkUriUtils(), postStoreProvider.get());
  }

  private StatsLinkHandler statsLinkHandler() {
    return new StatsLinkHandler(deepLinkUriUtils());
  }

  private StartLinkHandler startLinkHandler() {
    return new StartLinkHandler(accountStoreProvider.get());
  }

  private IntentUtils intentUtils() {
    return new IntentUtils(contextProvider.get());
  }

  private ReaderLinkHandler readerLinkHandler() {
    return new ReaderLinkHandler(intentUtils(), analyticsUtilsWrapperProvider.get());
  }

  private PagesLinkHandler pagesLinkHandler() {
    return new PagesLinkHandler(deepLinkUriUtils());
  }

  private DeepLinkHandlers deepLinkHandlers() {
    return new DeepLinkHandlers(editorLinkHandler(), statsLinkHandler(), startLinkHandler(), readerLinkHandler(), pagesLinkHandler(), new NotificationsLinkHandler(), new QRCodeAuthLinkHandler());
  }

  private ServerTrackingHandler serverTrackingHandler() {
    return new ServerTrackingHandler(new AppLogWrapper(), contextProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private DeepLinkTrackingUtils deepLinkTrackingUtils() {
    return new DeepLinkTrackingUtils(deepLinkUriUtils(), deepLinkHandlers(), analyticsUtilsWrapperProvider.get());
  }

  private CommentListUiModelHelper commentListUiModelHelper() {
    return new CommentListUiModelHelper(resourceProvider(), dateTimeUtilsWrapper(), networkUtilsWrapperProvider.get());
  }

  private UnrepliedCommentsUtils unrepliedCommentsUtils() {
    return new UnrepliedCommentsUtils(accountStoreProvider.get(), selectedSiteRepositoryProvider.get());
  }

  private PaginateCommentsUseCase paginateCommentsUseCase() {
    return new PaginateCommentsUseCase(paginateCommentsResourceProvider.get());
  }

  private BatchModerateCommentsUseCase batchModerateCommentsUseCase() {
    return new BatchModerateCommentsUseCase(moderateCommentsResourceProvider.get());
  }

  private ModerateCommentWithUndoUseCase moderateCommentWithUndoUseCase() {
    return new ModerateCommentWithUndoUseCase(moderateCommentsResourceProvider.get());
  }

  private UnifiedCommentsListHandler unifiedCommentsListHandler() {
    return new UnifiedCommentsListHandler(paginateCommentsUseCase(), batchModerateCommentsUseCase(), moderateCommentWithUndoUseCase());
  }

  private BloggingRemindersFeatureConfig bloggingRemindersFeatureConfig() {
    return new BloggingRemindersFeatureConfig(appConfigProvider.get());
  }

  private BloggingRemindersManager bloggingRemindersManager() {
    return new BloggingRemindersManager(bloggingRemindersFeatureConfig(), appPrefsWrapperProvider.get());
  }

  private PrologueBuilder prologueBuilder() {
    return new PrologueBuilder(bloggingPromptsFeatureConfig());
  }

  private DaysProvider daysProvider() {
    return new DaysProvider(localeManagerWrapper());
  }

  private DayLabelUtils dayLabelUtils() {
    return new DayLabelUtils(resourceProvider());
  }

  private DaySelectionBuilder daySelectionBuilder() {
    return new DaySelectionBuilder(daysProvider(), dayLabelUtils(), localeManagerWrapper(), bloggingPromptsFeatureConfig());
  }

  private EpilogueBuilder epilogueBuilder() {
    return new EpilogueBuilder(dayLabelUtils(), localeManagerWrapper(), new ListFormatterUtils(), htmlMessageUtils());
  }

  private GetCommentUseCase getCommentUseCase() {
    return new GetCommentUseCase(commentsStoreProvider2.get());
  }

  private PostSubscribersApiCallsProvider postSubscribersApiCallsProvider() {
    return new PostSubscribersApiCallsProvider(contextProvider.get());
  }

  private ReaderCommentsFollowUseCase readerCommentsFollowUseCase() {
    return new ReaderCommentsFollowUseCase(networkUtilsWrapperProvider.get(), postSubscribersApiCallsProvider(), accountStoreProvider.get(), readerTrackerProvider.get(), readerPostTableWrapperProvider.get());
  }

  private ReaderFollowCommentsHandler readerFollowCommentsHandler() {
    return new ReaderFollowCommentsHandler(readerCommentsFollowUseCase(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private BloggingPromptsOnboardingAnalyticsTracker bloggingPromptsOnboardingAnalyticsTracker() {
    return new BloggingPromptsOnboardingAnalyticsTracker(analyticsTrackerWrapperProvider.get());
  }

  private TotalLikesDetailUseCase.TotalLikesGranularUseCaseFactory totalLikesGranularUseCaseFactory(
      ) {
    return new TotalLikesDetailUseCase.TotalLikesGranularUseCaseFactory(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), selectedDateProvider.get(), visitsAndViewsStoreProvider.get(), latestPostInsightsStoreProvider.get(), statsSiteProvider.get(), resourceProvider(), totalStatsMapper(), analyticsTrackerWrapperProvider.get(), statsWidgetUpdaters());
  }

  private AuthorsCommentsUseCase authorsCommentsUseCase() {
    return new AuthorsCommentsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), commentsStoreProvider.get(), statsSiteProvider.get(), contentDescriptionHelper());
  }

  private PostsCommentsUseCase postsCommentsUseCase() {
    return new PostsCommentsUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), commentsStoreProvider.get(), statsSiteProvider.get(), resourceProvider(), statsUtils(), contentDescriptionHelper());
  }

  private FollowerTypesUseCase followerTypesUseCase() {
    return new FollowerTypesUseCase(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule), followersStoreProvider.get(), publicizeStoreProvider.get(), statsSiteProvider.get(), contentDescriptionHelper(), statsUtils(), resourceProvider());
  }

  private FetchAccountSettingsUseCase fetchAccountSettingsUseCase() {
    return new FetchAccountSettingsUseCase(dispatcherProvider.get(), provideDefaultContinuationWrapperProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private PushAccountSettingsUseCase pushAccountSettingsUseCase() {
    return new PushAccountSettingsUseCase(dispatcherProvider.get(), provideConcurrentContinuationWrapperProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
  }

  private GetAccountUseCase getAccountUseCase() {
    return new GetAccountUseCase(accountStoreProvider.get());
  }

  private GetSitesUseCase getSitesUseCase() {
    return new GetSitesUseCase(ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule), siteStoreProvider.get());
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
      ) {
    return ImmutableMap.<Class<? extends ViewModel>, Provider<ViewModel>>builderWithExpectedSize(100).put(PluginBrowserViewModel.class, ((Provider) pluginBrowserViewModelProvider)).put(ActivityLogViewModel.class, ((Provider) activityLogViewModelProvider)).put(ActivityLogDetailViewModel.class, ((Provider) activityLogDetailViewModelProvider)).put(PagesViewModel.class, ((Provider) pagesViewModelProvider)).put(SearchListViewModel.class, ((Provider) searchListViewModelProvider)).put(PageListViewModel.class, ((Provider) pageListViewModelProvider)).put(PageParentViewModel.class, ((Provider) pageParentViewModelProvider)).put(ReaderPostListViewModel.class, ((Provider) readerPostListViewModelProvider)).put(ReaderPostDetailViewModel.class, ((Provider) readerPostDetailViewModelProvider)).put(SubFilterViewModel.class, ((Provider) subFilterViewModelProvider)).put(SubfilterPageViewModel.class, ((Provider) subfilterPageViewModelProvider)).put(JetpackRemoteInstallViewModel.class, ((Provider) jetpackRemoteInstallViewModelProvider)).put(QuickStartViewModel.class, ((Provider) quickStartViewModelProvider)).put(InsightsListViewModel.class, ((Provider) insightsListViewModelProvider)).put(DaysListViewModel.class, ((Provider) daysListViewModelProvider)).put(WeeksListViewModel.class, ((Provider) weeksListViewModelProvider)).put(MonthsListViewModel.class, ((Provider) monthsListViewModelProvider)).put(YearsListViewModel.class, ((Provider) yearsListViewModelProvider)).put(StatsDetailViewModel.class, ((Provider) statsDetailViewModelProvider)).put(InsightsDetailListViewModel.class, ((Provider) insightsDetailListViewModelProvider)).put(DetailListViewModel.class, ((Provider) detailListViewModelProvider)).put(StatsWidgetConfigureViewModel.class, ((Provider) statsWidgetConfigureViewModelProvider)).put(StatsSiteSelectionViewModel.class, ((Provider) statsSiteSelectionViewModelProvider)).put(StatsDataTypeSelectionViewModel.class, ((Provider) statsDataTypeSelectionViewModelProvider)).put(StatsMinifiedWidgetConfigureViewModel.class, ((Provider) statsMinifiedWidgetConfigureViewModelProvider)).put(StatsColorSelectionViewModel.class, ((Provider) statsColorSelectionViewModelProvider)).put(InsightsManagementViewModel.class, ((Provider) insightsManagementViewModelProvider)).put(HistoryViewModel.class, ((Provider) historyViewModelProvider)).put(PostListViewModel.class, ((Provider) postListViewModelProvider)).put(PostListMainViewModel.class, ((Provider) postListMainViewModelProvider)).put(PlansViewModel.class, ((Provider) plansViewModelProvider)).put(DomainsDashboardViewModel.class, ((Provider) domainsDashboardViewModelProvider)).put(DomainSuggestionsViewModel.class, ((Provider) domainSuggestionsViewModelProvider)).put(WPWebViewViewModel.class, ((Provider) wPWebViewViewModelProvider)).put(DomainRegistrationDetailsViewModel.class, ((Provider) domainRegistrationDetailsViewModelProvider)).put(DomainRegistrationMainViewModel.class, ((Provider) domainRegistrationMainViewModelProvider)).put(StorePostViewModel.class, ((Provider) storePostViewModelProvider)).put(EditPostPublishSettingsViewModel.class, ((Provider) editPostPublishSettingsViewModelProvider)).put(ReaderCommentListViewModel.class, ((Provider) readerCommentListViewModelProvider)).put(WPMainActivityViewModel.class, ((Provider) wPMainActivityViewModelProvider)).put(ModalLayoutPickerViewModel.class, ((Provider) modalLayoutPickerViewModelProvider)).put(PostSignupInterstitialViewModel.class, ((Provider) postSignupInterstitialViewModelProvider)).put(PageParentSearchViewModel.class, ((Provider) pageParentSearchViewModelProvider)).put(FeatureAnnouncementViewModel.class, ((Provider) featureAnnouncementViewModelProvider)).put(SitePickerViewModel.class, ((Provider) sitePickerViewModelProvider)).put(ReaderViewModel.class, ((Provider) readerViewModelProvider)).put(ReaderDiscoverViewModel.class, ((Provider) readerDiscoverViewModelProvider)).put(ReaderInterestsViewModel.class, ((Provider) readerInterestsViewModelProvider)).put(HomepageSettingsViewModel.class, ((Provider) homepageSettingsViewModelProvider)).put(PrepublishingViewModel.class, ((Provider) prepublishingViewModelProvider)).put(PrepublishingHomeViewModel.class, ((Provider) prepublishingHomeViewModelProvider)).put(PrepublishingTagsViewModel.class, ((Provider) prepublishingTagsViewModelProvider)).put(PrepublishingPublishSettingsViewModel.class, ((Provider) prepublishingPublishSettingsViewModelProvider)).put(MeViewModel.class, ((Provider) meViewModelProvider)).put(PostListCreateMenuViewModel.class, ((Provider) postListCreateMenuViewModelProvider)).put(StoryComposerViewModel.class, ((Provider) storyComposerViewModelProvider)).put(StoriesIntroViewModel.class, ((Provider) storiesIntroViewModelProvider)).put(PhotoPickerViewModel.class, ((Provider) photoPickerViewModelProvider)).put(MediaPickerViewModel.class, ((Provider) mediaPickerViewModelProvider)).put(DebugSettingsViewModel.class, ((Provider) debugSettingsViewModelProvider)).put(PrepublishingCategoriesViewModel.class, ((Provider) prepublishingCategoriesViewModelProvider)).put(PrepublishingAddCategoryViewModel.class, ((Provider) prepublishingAddCategoryViewModelProvider)).put(SuggestionViewModel.class, ((Provider) suggestionViewModelProvider)).put(ActivityLogTypeFilterViewModel.class, ((Provider) activityLogTypeFilterViewModelProvider)).put(ScanViewModel.class, ((Provider) scanViewModelProvider)).put(ScanHistoryViewModel.class, ((Provider) scanHistoryViewModelProvider)).put(ScanHistoryListViewModel.class, ((Provider) scanHistoryListViewModelProvider)).put(ThreatDetailsViewModel.class, ((Provider) threatDetailsViewModelProvider)).put(MySiteViewModel.class, ((Provider) mySiteViewModelProvider)).put(BasicDialogViewModel.class, ((Provider) basicDialogViewModelProvider)).put(BackupDownloadViewModel.class, ((Provider) backupDownloadViewModelProvider)).put(RestoreViewModel.class, ((Provider) restoreViewModelProvider)).put(DynamicCardMenuViewModel.class, ((Provider) dynamicCardMenuViewModelProvider)).put(PeopleInviteViewModel.class, ((Provider) peopleInviteViewModelProvider)).put(EngagedPeopleListViewModel.class, ((Provider) engagedPeopleListViewModelProvider)).put(UserProfileViewModel.class, ((Provider) userProfileViewModelProvider)).put(SiteSettingsTimezoneViewModel.class, ((Provider) siteSettingsTimezoneViewModelProvider)).put(LoginNoSitesViewModel.class, ((Provider) loginNoSitesViewModelProvider)).put(LoginEpilogueViewModel.class, ((Provider) loginEpilogueViewModelProvider)).put(LoginPrologueViewModel.class, ((Provider) loginPrologueViewModelProvider)).put(LoginViewModel.class, ((Provider) loginViewModelProvider)).put(DeepLinkingIntentReceiverViewModel.class, ((Provider) deepLinkingIntentReceiverViewModelProvider)).put(LoginSiteCheckErrorViewModel.class, ((Provider) loginSiteCheckErrorViewModelProvider)).put(StorageUtilsViewModel.class, ((Provider) storageUtilsViewModelProvider)).put(UnifiedCommentListViewModel.class, ((Provider) unifiedCommentListViewModelProvider)).put(BloggingRemindersViewModel.class, ((Provider) bloggingRemindersViewModelProvider)).put(CategoriesListViewModel.class, ((Provider) categoriesListViewModelProvider)).put(LocalePickerViewModel.class, ((Provider) localePickerViewModelProvider)).put(CategoryDetailViewModel.class, ((Provider) categoryDetailViewModelProvider)).put(UnifiedCommentActivityViewModel.class, ((Provider) unifiedCommentActivityViewModelProvider)).put(UnifiedCommentsEditViewModel.class, ((Provider) unifiedCommentsEditViewModelProvider)).put(DebugCookiesViewModel.class, ((Provider) debugCookiesViewModelProvider)).put(ConversationNotificationsViewModel.class, ((Provider) conversationNotificationsViewModelProvider)).put(BloggingPromptsOnboardingViewModel.class, ((Provider) bloggingPromptsOnboardingViewModelProvider)).put(EditorBloggingPromptsViewModel.class, ((Provider) editorBloggingPromptsViewModelProvider)).put(TotalLikesDetailListViewModel.class, ((Provider) totalLikesDetailListViewModelProvider)).put(FeatureIntroductionViewModel.class, ((Provider) featureIntroductionViewModelProvider)).put(TotalCommentsDetailListViewModel.class, ((Provider) totalCommentsDetailListViewModelProvider)).put(TotalFollowersDetailListViewModel.class, ((Provider) totalFollowersDetailListViewModelProvider)).put(AccountSettingsViewModel.class, ((Provider) accountSettingsViewModelProvider)).build();
  }

  private MediaPickerLauncher mediaPickerLauncher() {
    return new MediaPickerLauncher(analyticsTrackerWrapperProvider.get());
  }

  private LocalNotificationScheduler localNotificationScheduler() {
    return new LocalNotificationScheduler(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  private CreateSiteNotificationScheduler createSiteNotificationScheduler() {
    return new CreateSiteNotificationScheduler(localNotificationScheduler(), createSiteNotificationHandler(), appPrefsWrapperProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private CreateSiteUseCase createSiteUseCase() {
    return new CreateSiteUseCase(dispatcherProvider.get(), siteStoreProvider.get(), urlUtilsWrapperProvider.get());
  }

  private SiteCreationServiceManager siteCreationServiceManager() {
    return new SiteCreationServiceManager(createSiteUseCase(), dispatcherProvider.get(), siteCreationTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private Mp4ComposerVideoOptimizationFeatureConfig mp4ComposerVideoOptimizationFeatureConfig() {
    return new Mp4ComposerVideoOptimizationFeatureConfig(appConfigProvider.get());
  }

  private AutoSavePostIfNotDraftUseCase autoSavePostIfNotDraftUseCase() {
    return new AutoSavePostIfNotDraftUseCase(dispatcherProvider.get(), postStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private PostMediaHandler postMediaHandler() {
    return new PostMediaHandler(mediaStoreProvider.get(), dispatcherProvider.get());
  }

  private LoginEpilogueViewModel loginEpilogueViewModel() {
    return new LoginEpilogueViewModel(appPrefsWrapperProvider.get(), new org.wordpress.android.util.BuildConfigWrapper(), siteStoreProvider.get(), mySiteDefaultTabExperiment());
  }

  private UnifiedCommentsCommentEditFeatureConfig unifiedCommentsCommentEditFeatureConfig() {
    return new UnifiedCommentsCommentEditFeatureConfig(appConfigProvider.get());
  }

  private RecommendTheAppFeatureConfig recommendTheAppFeatureConfig() {
    return new RecommendTheAppFeatureConfig(appConfigProvider.get());
  }

  private UnifiedAboutFeatureConfig unifiedAboutFeatureConfig() {
    return new UnifiedAboutFeatureConfig(appConfigProvider.get());
  }

  private QRCodeAuthFlowFeatureConfig qRCodeAuthFlowFeatureConfig() {
    return new QRCodeAuthFlowFeatureConfig(appConfigProvider.get());
  }

  private ManageCategoriesFeatureConfig manageCategoriesFeatureConfig() {
    return new ManageCategoriesFeatureConfig(appConfigProvider.get());
  }

  private ReactNativeRequestHandler reactNativeRequestHandler() {
    return new ReactNativeRequestHandler(reactNativeStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private RemoveMediaUseCase removeMediaUseCase() {
    return new RemoveMediaUseCase(mediaStoreProvider.get(), dispatcherProvider.get(), mediaUtilsWrapperProvider.get(), uploadServiceFacade(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private ReattachUploadingMediaUseCase reattachUploadingMediaUseCase() {
    return new ReattachUploadingMediaUseCase(uploadServiceFacade());
  }

  private EditorMedia editorMedia() {
    return new EditorMedia(updateMediaModelUseCaseProvider.get(), getMediaModelUseCaseProvider.get(), dispatcherProvider.get(), mediaUtilsWrapperProvider.get(), networkUtilsWrapperProvider.get(), addLocalMediaToPostUseCaseProvider.get(), addExistingMediaToPostUseCaseProvider.get(), retryFailedMediaUploadUseCaseProvider.get(), cleanUpMediaToPostAssociationUseCaseProvider.get(), removeMediaUseCase(), reattachUploadingMediaUseCase(), analyticsUtilsWrapperProvider.get(), analyticsTrackerWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(threadModule));
  }

  private PublishPostImmediatelyUseCase publishPostImmediatelyUseCase() {
    return new PublishPostImmediatelyUseCase(dateTimeUtilsWrapper());
  }

  private XPostsStore xPostsStore() {
    return new XPostsStore(coroutineEngine(), xPostsRestClientProvider.get(), new XPostsSqlUtils());
  }

  private XPostsCapabilityChecker xPostsCapabilityChecker() {
    return new XPostsCapabilityChecker(xPostsStore());
  }

  private StoriesEventListener storiesEventListener() {
    return new StoriesEventListener(dispatcherProvider.get(), mediaStoreProvider.get(), eventBusWrapperProvider.get(), editorMedia(), loadStoryFromStoriesPrefsUseCaseProvider.get(), storiesPrefsProvider.get(), new StoryRepositoryWrapper());
  }

  private GlobalStyleSupportFeatureConfig globalStyleSupportFeatureConfig() {
    return new GlobalStyleSupportFeatureConfig(appConfigProvider.get());
  }

  private UpdatePostStatusUseCase updatePostStatusUseCase() {
    return new UpdatePostStatusUseCase(dateTimeUtilsWrapper(), postUtilsWrapperProvider.get());
  }

  private BloggingRemindersViewModel bloggingRemindersViewModel() {
    return new BloggingRemindersViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule), bloggingRemindersManager(), bloggingRemindersStoreProvider.get(), prologueBuilder(), daySelectionBuilder(), epilogueBuilder(), dayLabelUtils(), bloggingRemindersAnalyticsTracker(), reminderScheduler(), new BloggingRemindersModelMapper(), siteStoreProvider.get());
  }

  private FollowedBlogsProvider followedBlogsProvider() {
    return new FollowedBlogsProvider(accountStoreProvider.get(), readerBlogTableWrapper(), new org.wordpress.android.ui.utils.UrlUtilsWrapper());
  }

  private ReaderFileDownloadManager readerFileDownloadManager() {
    return new ReaderFileDownloadManager(authenticationUtilsProvider.get(), downloadManagerWrapperProvider.get());
  }

  private ReaderCssProvider readerCssProvider() {
    return new ReaderCssProvider(networkUtilsWrapperProvider.get(), appPrefsWrapperProvider.get(), new DateProvider());
  }

  private ReaderCommentsModerationFeatureConfig readerCommentsModerationFeatureConfig() {
    return new ReaderCommentsModerationFeatureConfig(appConfigProvider.get());
  }

  private FormattableContentClickHandler formattableContentClickHandler() {
    return new FormattableContentClickHandler(siteStoreProvider.get(), readerTrackerProvider.get());
  }

  private OkHttpClient namedOkHttpClient() {
    return OkHttpClientModule_ProvideNoRedirectsOkHttpClientBuilderFactory.provideNoRedirectsOkHttpClientBuilder(provideMediaOkHttpClientInstanceProvider.get());
  }

  private ViewsWidgetListViewModel viewsWidgetListViewModel() {
    return new ViewsWidgetListViewModel(siteStoreProvider.get(), visitsAndViewsStoreProvider.get(), overviewMapper(), resourceProvider(), statsDateFormatter(), appPrefsWrapperProvider.get());
  }

  private AllTimeWidgetListViewModel allTimeWidgetListViewModel() {
    return new AllTimeWidgetListViewModel(siteStoreProvider.get(), allTimeInsightsStoreProvider.get(), resourceProvider(), appPrefsWrapperProvider.get(), statsUtils());
  }

  private AllTimeWidgetBlockListViewModel allTimeWidgetBlockListViewModel() {
    return new AllTimeWidgetBlockListViewModel(siteStoreProvider.get(), allTimeInsightsStoreProvider.get(), resourceProvider(), allTimeWidgetUpdater(), appPrefsWrapperProvider.get(), statsUtils());
  }

  private TodayWidgetListViewModel todayWidgetListViewModel() {
    return new TodayWidgetListViewModel(siteStoreProvider.get(), todayInsightsStoreProvider.get(), resourceProvider(), appPrefsWrapperProvider.get(), statsUtils());
  }

  private TodayWidgetBlockListViewModel todayWidgetBlockListViewModel() {
    return new TodayWidgetBlockListViewModel(siteStoreProvider.get(), todayInsightsStoreProvider.get(), resourceProvider(), todayWidgetUpdater(), appPrefsWrapperProvider.get(), statsUtils());
  }

  private PublishNotificationReceiverViewModel publishNotificationReceiverViewModel() {
    return new PublishNotificationReceiverViewModel(postSchedulingNotificationStoreProvider.get(), postStoreProvider.get(), resourceProvider());
  }

  private StoryEditorMedia storyEditorMedia() {
    return new StoryEditorMedia(mediaUtilsWrapperProvider.get(), addLocalMediaToPostUseCaseProvider.get(), addExistingMediaToPostUseCaseProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(threadModule));
  }

  private SuggestionViewModel suggestionViewModel() {
    return new SuggestionViewModel(suggestionSourceProvider(), resourceProvider(), networkUtilsWrapperProvider.get(), analyticsTrackerWrapperProvider.get());
  }

  private UnifiedCommentsDetailFeatureConfig unifiedCommentsDetailFeatureConfig() {
    return new UnifiedCommentsDetailFeatureConfig(appConfigProvider.get());
  }

  private BloggingRemindersAdapter bloggingRemindersAdapter() {
    return new BloggingRemindersAdapter(new UiHelpers());
  }

  private SiteNameFeatureConfig siteNameFeatureConfig() {
    return new SiteNameFeatureConfig(appConfigProvider.get());
  }

  private UnifiedAboutViewModel unifiedAboutViewModel() {
    return new UnifiedAboutViewModel(contextProvider.get(), new WpUrlUtilsWrapper(), recommendApiCallsProvider(), new org.wordpress.android.util.BuildConfigWrapper(), unifiedAboutTrackerProvider.get());
  }

  private SiteIntentQuestionFeatureConfig siteIntentQuestionFeatureConfig() {
    return new SiteIntentQuestionFeatureConfig(appConfigProvider.get());
  }

  private WizardManager<SiteCreationStep> wizardManagerOfSiteCreationStep() {
    return ApplicationModule_ProvideWizardManagerFactory.provideWizardManager(siteCreationStepsProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AccountSettingsModule accountSettingsModuleParam,
      final AppConfigModule appConfigModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final DummyInterceptorModule dummyInterceptorModuleParam,
      final ReleaseNetworkModule releaseNetworkModuleParam,
      final DatabaseModule databaseModuleParam,
      final InterceptorModuleTest interceptorModuleTestParam, final LegacyModule legacyModuleParam,
      final LoginAnalyticsModule loginAnalyticsModuleParam, final StatsModule statsModuleParam,
      final SupportModule supportModuleParam, final ThreadModule threadModuleParam,
      final TrackerTestModule trackerTestModuleParam) {
    this.statsListFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 0);
    this.statsViewAllFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 1);
    this.insightsManagementFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 2);
    this.statsDetailFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 3);
    this.countryPickerDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 4);
    this.statePickerDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 5);
    this.statsWidgetConfigureFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 6);
    this.statsWidgetSiteSelectionDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 7);
    this.statsWidgetColorSelectionDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 8);
    this.statsMinifiedWidgetConfigureFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 9);
    this.statsWidgetDataTypeSelectionDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 10);
    this.commentFullScreenDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 11);
    this.usernameChangerFullScreenDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 12);
    this.settingsUsernameChangerFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 13);
    this.readerPostWebViewCachingFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 14);
    this.subfilterPageFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 15);
    this.debugSettingsFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 16);
    this.basicDialogSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 17);
    this.login2FaFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 18);
    this.loginEmailFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 19);
    this.loginEmailPasswordFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 20);
    this.loginGoogleFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 21);
    this.loginMagicLinkRequestFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 22);
    this.loginMagicLinkSentFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 23);
    this.loginSiteAddressFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 24);
    this.loginSiteAddressHelpDialogFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 25);
    this.loginUsernamePasswordFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 26);
    this.signupGoogleFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 27);
    this.signupMagicLinkFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 28);
    this.signupConfirmationFragmentSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 29);
    this.loginWpcomServiceSubcomponentFactoryProvider = new SwitchingProvider<>(singletonC, 30);
    this.wellSqlInitializerProvider = DoubleCheck.provider(new SwitchingProvider<WellSqlInitializer>(singletonC, 32));
    this.dispatcherProvider = DoubleCheck.provider(new SwitchingProvider<Dispatcher>(singletonC, 33));
    this.provideCookieManagerProvider = DoubleCheck.provider(new SwitchingProvider<CookieManager>(singletonC, 39));
    this.provideCookieJarProvider = DoubleCheck.provider(new SwitchingProvider<CookieJar>(singletonC, 38));
    this.provideMediaOkHttpClientInstanceProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 37));
    this.provideRequestQueueProvider = DoubleCheck.provider(new SwitchingProvider<RequestQueue>(singletonC, 36));
    this.accessTokenProvider = DoubleCheck.provider(new SwitchingProvider<AccessToken>(singletonC, 40));
    this.accountRestClientProvider = DoubleCheck.provider(new SwitchingProvider<AccountRestClient>(singletonC, 35));
    this.provideMemorizingTrustManagerProvider = DoubleCheck.provider(new SwitchingProvider<MemorizingTrustManager>(singletonC, 44));
    this.provideMediaOkHttpClientInstanceCustomSSLProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 43));
    this.provideRequestQueueCustomSSLProvider = DoubleCheck.provider(new SwitchingProvider<RequestQueue>(singletonC, 42));
    this.discoveryXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<DiscoveryXMLRPCClient>(singletonC, 41));
    this.discoveryWPAPIRestClientProvider = DoubleCheck.provider(new SwitchingProvider<DiscoveryWPAPIRestClient>(singletonC, 45));
    this.accountStoreProvider = DoubleCheck.provider(new SwitchingProvider<AccountStore>(singletonC, 34));
    this.postSqlUtilsProvider = SingleCheck.provider(new SwitchingProvider<PostSqlUtils>(singletonC, 47));
    this.wPComGsonRequestBuilderProvider = DoubleCheck.provider(new SwitchingProvider<WPComGsonRequestBuilder>(singletonC, 49));
    this.siteRestClientProvider = DoubleCheck.provider(new SwitchingProvider<SiteRestClient>(singletonC, 48));
    this.xMLRPCRequestBuilderProvider = DoubleCheck.provider(new SwitchingProvider<XMLRPCRequestBuilder>(singletonC, 51));
    this.siteXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<SiteXMLRPCClient>(singletonC, 50));
    this.privateAtomicCookieProvider = DoubleCheck.provider(new SwitchingProvider<PrivateAtomicCookie>(singletonC, 52));
    this.siteSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<SiteSqlUtils>(singletonC, 53));
    this.provideCoroutineContextProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineContext>(singletonC, 54));
    this.siteStoreProvider = DoubleCheck.provider(new SwitchingProvider<SiteStore>(singletonC, 46));
    this.mediaRestClientProvider = DoubleCheck.provider(new SwitchingProvider<MediaRestClient>(singletonC, 56));
    this.mediaXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<MediaXMLRPCClient>(singletonC, 57));
    this.wPV2MediaRestClientProvider = DoubleCheck.provider(new SwitchingProvider<WPV2MediaRestClient>(singletonC, 58));
    this.uploadStoreProvider = DoubleCheck.provider(new SwitchingProvider<UploadStore>(singletonC, 59));
    this.mediaStoreProvider = DoubleCheck.provider(new SwitchingProvider<MediaStore>(singletonC, 55));
    this.provideSupportHelperProvider = DoubleCheck.provider(new SwitchingProvider<SupportHelper>(singletonC, 61));
    this.provideZendeskHelperProvider = DoubleCheck.provider(new SwitchingProvider<ZendeskHelper>(singletonC, 60));
    this.postRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PostRestClient>(singletonC, 64));
    this.postXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<PostXMLRPCClient>(singletonC, 65));
    this.postStoreProvider = DoubleCheck.provider(new SwitchingProvider<PostStore>(singletonC, 63));
    this.pageStoreProvider = DoubleCheck.provider(new SwitchingProvider<PageStore>(singletonC, 66));
    this.postUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<PostUtilsWrapper>(singletonC, 68));
    this.uploadActionUseCaseProvider = SingleCheck.provider(new SwitchingProvider<UploadActionUseCase>(singletonC, 67));
    this.analyticsTrackerWrapperProvider = SingleCheck.provider(new SwitchingProvider<AnalyticsTrackerWrapper>(singletonC, 69));
    this.networkUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<NetworkUtilsWrapper>(singletonC, 70));
    this.uploadStarterProvider = DoubleCheck.provider(new SwitchingProvider<UploadStarter>(singletonC, 62));
    this.appPrefsWrapperProvider = DoubleCheck.provider(new SwitchingProvider<AppPrefsWrapper>(singletonC, 71));
    this.contextProvider = DoubleCheck.provider(new SwitchingProvider<ContextProvider>(singletonC, 72));
    this.imagePlaceholderManagerProvider = DoubleCheck.provider(new SwitchingProvider<ImagePlaceholderManager>(singletonC, 74));
    this.authenticationUtilsProvider = DoubleCheck.provider(new SwitchingProvider<AuthenticationUtils>(singletonC, 75));
    this.mediaUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<MediaUtilsWrapper>(singletonC, 76));
    this.imageManagerProvider = DoubleCheck.provider(new SwitchingProvider<ImageManager>(singletonC, 73));
    this.todayInsightsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<TodayInsightsRestClient>(singletonC, 78));
    this.statsSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<StatsSqlUtils>(singletonC, 79));
    this.statsRequestSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<StatsRequestSqlUtils>(singletonC, 80));
    this.todayInsightsStoreProvider = DoubleCheck.provider(new SwitchingProvider<TodayInsightsStore>(singletonC, 77));
    this.insightTypeSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<InsightTypeSqlUtils>(singletonC, 82));
    this.statsStoreProvider = DoubleCheck.provider(new SwitchingProvider<StatsStore>(singletonC, 81));
    this.analyticsUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<AnalyticsUtilsWrapper>(singletonC, 84));
    this.readerTrackerProvider = DoubleCheck.provider(new SwitchingProvider<ReaderTracker>(singletonC, 83));
    this.imageEditorTrackerProvider = SingleCheck.provider(new SwitchingProvider<ImageEditorTracker>(singletonC, 85));
    this.copyMediaToAppStorageUseCaseProvider = SingleCheck.provider(new SwitchingProvider<CopyMediaToAppStorageUseCase>(singletonC, 87));
    this.editorTrackerProvider = SingleCheck.provider(new SwitchingProvider<EditorTracker>(singletonC, 89));
    this.optimizeMediaUseCaseProvider = SingleCheck.provider(new SwitchingProvider<OptimizeMediaUseCase>(singletonC, 88));
    this.fluxCUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<FluxCUtilsWrapper>(singletonC, 91));
    this.fileProvider = SingleCheck.provider(new SwitchingProvider<FileProvider>(singletonC, 92));
    this.getMediaModelUseCaseProvider = SingleCheck.provider(new SwitchingProvider<GetMediaModelUseCase>(singletonC, 90));
    this.updateMediaModelUseCaseProvider = SingleCheck.provider(new SwitchingProvider<UpdateMediaModelUseCase>(singletonC, 93));
    this.appendMediaToEditorUseCaseProvider = SingleCheck.provider(new SwitchingProvider<AppendMediaToEditorUseCase>(singletonC, 94));
    this.uploadMediaUseCaseProvider = SingleCheck.provider(new SwitchingProvider<UploadMediaUseCase>(singletonC, 95));
    this.addLocalMediaToPostUseCaseProvider = SingleCheck.provider(new SwitchingProvider<AddLocalMediaToPostUseCase>(singletonC, 86));
    this.wPSnackbarWrapperProvider = SingleCheck.provider(new SwitchingProvider<WPSnackbarWrapper>(singletonC, 98));
    this.snackbarSequencerProvider = DoubleCheck.provider(new SwitchingProvider<SnackbarSequencer>(singletonC, 97));
    this.uploadUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<UploadUtilsWrapper>(singletonC, 96));
    this.storiesPrefsProvider = DoubleCheck.provider(new SwitchingProvider<StoriesPrefs>(singletonC, 99));
    this.eventBusWrapperProvider = SingleCheck.provider(new SwitchingProvider<EventBusWrapper>(singletonC, 100));
  }

  @SuppressWarnings("unchecked")
  private void initialize2(final AccountSettingsModule accountSettingsModuleParam,
      final AppConfigModule appConfigModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final DummyInterceptorModule dummyInterceptorModuleParam,
      final ReleaseNetworkModule releaseNetworkModuleParam,
      final DatabaseModule databaseModuleParam,
      final InterceptorModuleTest interceptorModuleTestParam, final LegacyModule legacyModuleParam,
      final LoginAnalyticsModule loginAnalyticsModuleParam, final StatsModule statsModuleParam,
      final SupportModule supportModuleParam, final ThreadModule threadModuleParam,
      final TrackerTestModule trackerTestModuleParam) {
    this.provideSharedPrefsProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonC, 102));
    this.encryptedLogRestClientProvider = DoubleCheck.provider(new SwitchingProvider<EncryptedLogRestClient>(singletonC, 105));
    this.encryptedLogSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<EncryptedLogSqlUtils>(singletonC, 106));
    this.logEncrypterProvider = SingleCheck.provider(new SwitchingProvider<LogEncrypter>(singletonC, 107));
    this.encryptedLogStoreProvider = DoubleCheck.provider(new SwitchingProvider<EncryptedLogStore>(singletonC, 104));
    this.encryptedLoggingProvider = DoubleCheck.provider(new SwitchingProvider<EncryptedLogging>(singletonC, 103));
    this.provideCrashLoggingProvider = DoubleCheck.provider(new SwitchingProvider<CrashLogging>(singletonC, 101));
    this.appConfigProvider = DoubleCheck.provider(new SwitchingProvider<AppConfig>(singletonC, 108));
    this.experimentRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ExperimentRestClient>(singletonC, 111));
    this.experimentStoreProvider = DoubleCheck.provider(new SwitchingProvider<ExperimentStore>(singletonC, 110));
    this.exPlatProvider = DoubleCheck.provider(new SwitchingProvider<ExPlat>(singletonC, 109));
    this.siteUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<SiteUtilsWrapper>(singletonC, 112));
    this.visitAndViewsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<VisitAndViewsRestClient>(singletonC, 114));
    this.provideGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonC, 115));
    this.visitsAndViewsStoreProvider = DoubleCheck.provider(new SwitchingProvider<VisitsAndViewsStore>(singletonC, 113));
    this.bloggingPromptsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<BloggingPromptsRestClient>(singletonC, 117));
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<WPAndroidDatabase>(singletonC, 119));
    this.provideBloggingPromptsDaoProvider = DoubleCheck.provider(new SwitchingProvider<BloggingPromptsDao>(singletonC, 118));
    this.bloggingPromptsStoreProvider = DoubleCheck.provider(new SwitchingProvider<BloggingPromptsStore>(singletonC, 116));
    this.provideBloggingRemindersDaoProvider = DoubleCheck.provider(new SwitchingProvider<BloggingRemindersDao>(singletonC, 121));
    this.bloggingRemindersStoreProvider = DoubleCheck.provider(new SwitchingProvider<BloggingRemindersStore>(singletonC, 120));
    this.selectedSiteRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SelectedSiteRepository>(singletonC, 122));
    this.provideImageCacheProvider = DoubleCheck.provider(new SwitchingProvider<ImageLoader.ImageCache>(singletonC, 123));
    this.provideOAuthAuthenicatorProvider = DoubleCheck.provider(new SwitchingProvider<OAuthAuthenticator>(singletonC, 124));
    this.appInitializerProvider = DoubleCheck.provider(new SwitchingProvider<AppInitializer>(singletonC, 31));
    this.unifiedLoginTrackerProvider = DoubleCheck.provider(new SwitchingProvider<UnifiedLoginTracker>(singletonC, 125));
    this.quickStartSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<QuickStartSqlUtils>(singletonC, 127));
    this.quickStartStoreProvider = DoubleCheck.provider(new SwitchingProvider<QuickStartStore>(singletonC, 126));
    this.gCMMessageHandlerProvider = DoubleCheck.provider(new SwitchingProvider<GCMMessageHandler>(singletonC, 128));
    this.pluginRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PluginRestClient>(singletonC, 132));
    this.pluginWPOrgClientProvider = DoubleCheck.provider(new SwitchingProvider<PluginWPOrgClient>(singletonC, 133));
    this.pluginWPAPIRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PluginWPAPIRestClient>(singletonC, 134));
    this.nonceRestClientProvider = DoubleCheck.provider(new SwitchingProvider<NonceRestClient>(singletonC, 135));
    this.pluginJetpackTunnelRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PluginJetpackTunnelRestClient>(singletonC, 136));
    this.pluginStoreProvider = DoubleCheck.provider(new SwitchingProvider<PluginStore>(singletonC, 131));
    this.pluginBrowserViewModelProvider = new SwitchingProvider<>(singletonC, 130);
    this.activityLogRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ActivityLogRestClient>(singletonC, 139));
    this.activityLogSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ActivityLogSqlUtils>(singletonC, 140));
    this.activityLogStoreProvider = DoubleCheck.provider(new SwitchingProvider<ActivityLogStore>(singletonC, 138));
    this.activityLogTrackerProvider = DoubleCheck.provider(new SwitchingProvider<ActivityLogTracker>(singletonC, 141));
    this.activityLogViewModelProvider = new SwitchingProvider<>(singletonC, 137);
    this.activityLogDetailViewModelProvider = new SwitchingProvider<>(singletonC, 142);
    this.previewStateHelperProvider = SingleCheck.provider(new SwitchingProvider<PreviewStateHelper>(singletonC, 144));
    this.siteHomepageRestClientProvider = DoubleCheck.provider(new SwitchingProvider<SiteHomepageRestClient>(singletonC, 145));
    this.pagesViewModelProvider = new SwitchingProvider<>(singletonC, 143);
    this.searchListViewModelProvider = new SwitchingProvider<>(singletonC, 146);
    this.pageListViewModelProvider = new SwitchingProvider<>(singletonC, 147);
    this.pageParentViewModelProvider = new SwitchingProvider<>(singletonC, 148);
    this.reblogUseCaseProvider = SingleCheck.provider(new SwitchingProvider<ReblogUseCase>(singletonC, 150));
    this.readerPostActionsWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostActionsWrapper>(singletonC, 151));
    this.readerPostTableWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostTableWrapper>(singletonC, 152));
    this.readerUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderUtilsWrapper>(singletonC, 153));
    this.readerPostListViewModelProvider = new SwitchingProvider<>(singletonC, 149);
    this.readerPostMoreButtonUiStateBuilderProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostMoreButtonUiStateBuilder>(singletonC, 155));
    this.urlUtilsWrapperProvider = DoubleCheck.provider(new SwitchingProvider<UrlUtilsWrapper>(singletonC, 159));
    this.gravatarUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<GravatarUtilsWrapper>(singletonC, 160));
    this.readerImageScannerProvider = SingleCheck.provider(new SwitchingProvider<ReaderImageScannerProvider>(singletonC, 161));
    this.readerPostTagsUiStateBuilderProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostTagsUiStateBuilder>(singletonC, 162));
    this.readerPostUiStateBuilderProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostUiStateBuilder>(singletonC, 158));
    this.readerPostDetailsHeaderViewUiStateBuilderProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostDetailsHeaderViewUiStateBuilder>(singletonC, 157));
    this.photonUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<PhotonUtilsWrapper>(singletonC, 163));
    this.displayUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<DisplayUtilsWrapper>(singletonC, 164));
    this.threadedCommentsUtilsProvider = SingleCheck.provider(new SwitchingProvider<ThreadedCommentsUtils>(singletonC, 165));
    this.readerPostDetailUiStateBuilderProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostDetailUiStateBuilder>(singletonC, 156));
    this.commentRestClientProvider = DoubleCheck.provider(new SwitchingProvider<CommentRestClient>(singletonC, 167));
    this.commentXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<CommentXMLRPCClient>(singletonC, 168));
    this.commentStoreProvider = DoubleCheck.provider(new SwitchingProvider<CommentStore>(singletonC, 166));
    this.engagementUtilsProvider = SingleCheck.provider(new SwitchingProvider<EngagementUtils>(singletonC, 169));
    this.readerCommentTableWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderCommentTableWrapper>(singletonC, 170));
    this.readerCommentServiceStarterWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderCommentServiceStarterWrapper>(singletonC, 171));
    this.readerPostDetailViewModelProvider = new SwitchingProvider<>(singletonC, 154);
    this.subFilterViewModelProvider = new SwitchingProvider<>(singletonC, 172);
    this.subfilterPageViewModelProvider = new SwitchingProvider<>(singletonC, 173);
    this.jetpackTunnelGsonRequestBuilderProvider = DoubleCheck.provider(new SwitchingProvider<JetpackTunnelGsonRequestBuilder>(singletonC, 177));
    this.jetpackRestClientProvider = DoubleCheck.provider(new SwitchingProvider<JetpackRestClient>(singletonC, 176));
    this.jetpackStoreProvider = DoubleCheck.provider(new SwitchingProvider<JetpackStore>(singletonC, 175));
    this.jetpackRemoteInstallViewModelProvider = new SwitchingProvider<>(singletonC, 174);
    this.quickStartViewModelProvider = new SwitchingProvider<>(singletonC, 178);
    this.statsSiteProvider = DoubleCheck.provider(new SwitchingProvider<StatsSiteProvider>(singletonC, 181));
    this.selectedDateProvider = DoubleCheck.provider(new SwitchingProvider<SelectedDateProvider>(singletonC, 183));
    this.allTimeInsightsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<AllTimeInsightsRestClient>(singletonC, 185));
    this.allTimeInsightsStoreProvider = DoubleCheck.provider(new SwitchingProvider<AllTimeInsightsStore>(singletonC, 184));
    this.itemPopupMenuHandlerProvider = DoubleCheck.provider(new SwitchingProvider<ItemPopupMenuHandler>(singletonC, 186));
    this.latestPostInsightsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<LatestPostInsightsRestClient>(singletonC, 188));
    this.latestPostInsightsStoreProvider = DoubleCheck.provider(new SwitchingProvider<LatestPostInsightsStore>(singletonC, 187));
    this.followersRestClientProvider = DoubleCheck.provider(new SwitchingProvider<FollowersRestClient>(singletonC, 190));
    this.followersStoreProvider = DoubleCheck.provider(new SwitchingProvider<FollowersStore>(singletonC, 189));
    this.commentsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<CommentsRestClient>(singletonC, 192));
    this.commentsStoreProvider = DoubleCheck.provider(new SwitchingProvider<CommentsStore>(singletonC, 191));
    this.mostPopularRestClientProvider = DoubleCheck.provider(new SwitchingProvider<MostPopularRestClient>(singletonC, 194));
    this.mostPopularInsightsStoreProvider = DoubleCheck.provider(new SwitchingProvider<MostPopularInsightsStore>(singletonC, 193));
    this.actionCardHandlerProvider = DoubleCheck.provider(new SwitchingProvider<ActionCardHandler>(singletonC, 195));
    this.tagsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<TagsRestClient>(singletonC, 197));
    this.tagsStoreProvider = DoubleCheck.provider(new SwitchingProvider<TagsStore>(singletonC, 196));
    this.publicizeRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PublicizeRestClient>(singletonC, 199));
    this.publicizeStoreProvider = DoubleCheck.provider(new SwitchingProvider<PublicizeStore>(singletonC, 198));
    this.postingActivityRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PostingActivityRestClient>(singletonC, 201));
    this.postingActivityStoreProvider = DoubleCheck.provider(new SwitchingProvider<PostingActivityStore>(singletonC, 200));
    this.summaryRestClientProvider = DoubleCheck.provider(new SwitchingProvider<SummaryRestClient>(singletonC, 203));
    this.summaryStoreProvider = DoubleCheck.provider(new SwitchingProvider<SummaryStore>(singletonC, 202));
  }

  @SuppressWarnings("unchecked")
  private void initialize3(final AccountSettingsModule accountSettingsModuleParam,
      final AppConfigModule appConfigModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final DummyInterceptorModule dummyInterceptorModuleParam,
      final ReleaseNetworkModule releaseNetworkModuleParam,
      final DatabaseModule databaseModuleParam,
      final InterceptorModuleTest interceptorModuleTestParam, final LegacyModule legacyModuleParam,
      final LoginAnalyticsModule loginAnalyticsModuleParam, final StatsModule statsModuleParam,
      final SupportModule supportModuleParam, final ThreadModule threadModuleParam,
      final TrackerTestModule trackerTestModuleParam) {
    this.newsCardHandlerProvider = DoubleCheck.provider(new SwitchingProvider<NewsCardHandler>(singletonC, 204));
    this.provideBlockInsightsUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<BaseStatsUseCase<?, ?>>>(singletonC, 182));
    this.provideInsightsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 180));
    this.insightsListViewModelProvider = new SwitchingProvider<>(singletonC, 179);
    this.postAndPageViewsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PostAndPageViewsRestClient>(singletonC, 209));
    this.postAndPageViewsStoreProvider = DoubleCheck.provider(new SwitchingProvider<PostAndPageViewsStore>(singletonC, 208));
    this.referrersRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ReferrersRestClient>(singletonC, 211));
    this.referrersStoreProvider = DoubleCheck.provider(new SwitchingProvider<ReferrersStore>(singletonC, 210));
    this.referrerPopupMenuHandlerProvider = DoubleCheck.provider(new SwitchingProvider<ReferrerPopupMenuHandler>(singletonC, 212));
    this.clicksRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ClicksRestClient>(singletonC, 214));
    this.clicksStoreProvider = DoubleCheck.provider(new SwitchingProvider<ClicksStore>(singletonC, 213));
    this.countryViewsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<CountryViewsRestClient>(singletonC, 216));
    this.countryViewsStoreProvider = DoubleCheck.provider(new SwitchingProvider<CountryViewsStore>(singletonC, 215));
    this.videoPlaysRestClientProvider = DoubleCheck.provider(new SwitchingProvider<VideoPlaysRestClient>(singletonC, 218));
    this.videoPlaysStoreProvider = DoubleCheck.provider(new SwitchingProvider<VideoPlaysStore>(singletonC, 217));
    this.searchTermsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<SearchTermsRestClient>(singletonC, 220));
    this.searchTermsStoreProvider = DoubleCheck.provider(new SwitchingProvider<SearchTermsStore>(singletonC, 219));
    this.authorsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<AuthorsRestClient>(singletonC, 222));
    this.authorsStoreProvider = DoubleCheck.provider(new SwitchingProvider<AuthorsStore>(singletonC, 221));
    this.fileDownloadsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<FileDownloadsRestClient>(singletonC, 224));
    this.fileDownloadsStoreProvider = DoubleCheck.provider(new SwitchingProvider<FileDownloadsStore>(singletonC, 223));
    this.provideGranularUseCaseFactoriesProvider = DoubleCheck.provider(new SwitchingProvider<List<GranularUseCaseFactory>>(singletonC, 207));
    this.provideDayStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 206));
    this.daysListViewModelProvider = new SwitchingProvider<>(singletonC, 205);
    this.provideWeekStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 226));
    this.weeksListViewModelProvider = new SwitchingProvider<>(singletonC, 225);
    this.provideMonthStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 228));
    this.monthsListViewModelProvider = new SwitchingProvider<>(singletonC, 227);
    this.provideYearStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 230));
    this.yearsListViewModelProvider = new SwitchingProvider<>(singletonC, 229);
    this.statsPostProvider = DoubleCheck.provider(new SwitchingProvider<StatsPostProvider>(singletonC, 234));
    this.postDetailStoreProvider = DoubleCheck.provider(new SwitchingProvider<PostDetailStore>(singletonC, 235));
    this.provideDetailUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<BaseStatsUseCase<?, ?>>>(singletonC, 233));
    this.provideDetailStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 232));
    this.statsDetailViewModelProvider = new SwitchingProvider<>(singletonC, 231);
    this.provideViewsAndVisitorsDetailUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<GranularUseCaseFactory>>(singletonC, 238));
    this.provideViewsAndVisitorsDetailUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 237));
    this.insightsDetailListViewModelProvider = new SwitchingProvider<>(singletonC, 236);
    this.detailListViewModelProvider = new SwitchingProvider<>(singletonC, 239);
    this.statsWidgetConfigureViewModelProvider = new SwitchingProvider<>(singletonC, 240);
    this.statsSiteSelectionViewModelProvider = new SwitchingProvider<>(singletonC, 241);
    this.statsDataTypeSelectionViewModelProvider = new SwitchingProvider<>(singletonC, 242);
    this.statsMinifiedWidgetConfigureViewModelProvider = new SwitchingProvider<>(singletonC, 243);
    this.statsColorSelectionViewModelProvider = new SwitchingProvider<>(singletonC, 244);
    this.insightsManagementViewModelProvider = new SwitchingProvider<>(singletonC, 245);
    this.historyViewModelProvider = new SwitchingProvider<>(singletonC, 246);
    this.listSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ListSqlUtils>(singletonC, 249));
    this.listItemSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ListItemSqlUtils>(singletonC, 250));
    this.listStoreProvider = DoubleCheck.provider(new SwitchingProvider<ListStore>(singletonC, 248));
    this.postListViewModelProvider = new SwitchingProvider<>(singletonC, 247);
    this.postListMainViewModelProvider = new SwitchingProvider<>(singletonC, 251);
    this.planOffersRestClientProvider = DoubleCheck.provider(new SwitchingProvider<PlanOffersRestClient>(singletonC, 254));
    this.providePlanOffersDaoProvider = DoubleCheck.provider(new SwitchingProvider<PlanOffersDao>(singletonC, 256));
    this.planOffersMapperProvider = SingleCheck.provider(new SwitchingProvider<PlanOffersMapper>(singletonC, 257));
    this.planOffersSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<PlanOffersSqlUtils>(singletonC, 255));
    this.planOffersStoreProvider = DoubleCheck.provider(new SwitchingProvider<PlanOffersStore>(singletonC, 253));
    this.plansViewModelProvider = new SwitchingProvider<>(singletonC, 252);
    this.domainsDashboardViewModelProvider = new SwitchingProvider<>(singletonC, 258);
    this.productsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ProductsRestClient>(singletonC, 261));
    this.productsStoreProvider = DoubleCheck.provider(new SwitchingProvider<ProductsStore>(singletonC, 260));
    this.transactionsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<TransactionsRestClient>(singletonC, 263));
    this.transactionsStoreProvider = DoubleCheck.provider(new SwitchingProvider<TransactionsStore>(singletonC, 262));
    this.domainSuggestionsViewModelProvider = new SwitchingProvider<>(singletonC, 259);
    this.wPWebViewViewModelProvider = new SwitchingProvider<>(singletonC, 264);
    this.domainRegistrationDetailsViewModelProvider = new SwitchingProvider<>(singletonC, 265);
    this.domainRegistrationMainViewModelProvider = new SwitchingProvider<>(singletonC, 266);
    this.storePostViewModelProvider = new SwitchingProvider<>(singletonC, 267);
    this.postSchedulingNotificationSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<PostSchedulingNotificationSqlUtils>(singletonC, 270));
    this.postSchedulingNotificationStoreProvider = DoubleCheck.provider(new SwitchingProvider<PostSchedulingNotificationStore>(singletonC, 269));
    this.editPostPublishSettingsViewModelProvider = new SwitchingProvider<>(singletonC, 268);
    this.readerCommentListViewModelProvider = new SwitchingProvider<>(singletonC, 271);
    this.whatsNewRestClientProvider = DoubleCheck.provider(new SwitchingProvider<WhatsNewRestClient>(singletonC, 274));
    this.whatsNewSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<WhatsNewSqlUtils>(singletonC, 275));
    this.whatsNewStoreProvider = DoubleCheck.provider(new SwitchingProvider<WhatsNewStore>(singletonC, 273));
    this.dynamicCardSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<DynamicCardSqlUtils>(singletonC, 278));
    this.dynamicCardStoreProvider = DoubleCheck.provider(new SwitchingProvider<DynamicCardStore>(singletonC, 277));
    this.quickStartRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<QuickStartRepository>(singletonC, 276));
    this.wPMainActivityViewModelProvider = new SwitchingProvider<>(singletonC, 272);
    this.modalLayoutPickerTrackerProvider = DoubleCheck.provider(new SwitchingProvider<ModalLayoutPickerTracker>(singletonC, 280));
    this.modalLayoutPickerViewModelProvider = new SwitchingProvider<>(singletonC, 279);
    this.postSignupInterstitialViewModelProvider = new SwitchingProvider<>(singletonC, 281);
    this.pageParentSearchViewModelProvider = new SwitchingProvider<>(singletonC, 282);
    this.featureAnnouncementViewModelProvider = new SwitchingProvider<>(singletonC, 283);
    this.sitePickerViewModelProvider = new SwitchingProvider<>(singletonC, 284);
    this.loadReaderTabsUseCaseProvider = SingleCheck.provider(new SwitchingProvider<LoadReaderTabsUseCase>(singletonC, 286));
    this.readerViewModelProvider = new SwitchingProvider<>(singletonC, 285);
    this.readerTagWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderTagWrapper>(singletonC, 288));
    this.parseDiscoverCardsJsonUseCaseProvider = SingleCheck.provider(new SwitchingProvider<ParseDiscoverCardsJsonUseCase>(singletonC, 290));
    this.readerDiscoverCardsTableWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderDiscoverCardsTableWrapper>(singletonC, 291));
    this.getDiscoverCardsUseCaseProvider = SingleCheck.provider(new SwitchingProvider<GetDiscoverCardsUseCase>(singletonC, 289));
    this.readerTagTableWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderTagTableWrapper>(singletonC, 292));
    this.readerDiscoverViewModelProvider = new SwitchingProvider<>(singletonC, 287);
    this.readerUpdateServiceStarterWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderUpdateServiceStarterWrapper>(singletonC, 294));
    this.readerInterestsViewModelProvider = new SwitchingProvider<>(singletonC, 293);
    this.homepageSettingsViewModelProvider = new SwitchingProvider<>(singletonC, 295);
    this.prepublishingViewModelProvider = new SwitchingProvider<>(singletonC, 296);
    this.getPostTagsUseCaseProvider = SingleCheck.provider(new SwitchingProvider<GetPostTagsUseCase>(singletonC, 298));
    this.editorActionsProvider = SingleCheck.provider(new SwitchingProvider<EditorActionsProvider>(singletonC, 299));
    this.updateStoryPostTitleUseCaseProvider = SingleCheck.provider(new SwitchingProvider<UpdateStoryPostTitleUseCase>(singletonC, 300));
    this.taxonomyRestClientProvider = DoubleCheck.provider(new SwitchingProvider<TaxonomyRestClient>(singletonC, 303));
  }

  @SuppressWarnings("unchecked")
  private void initialize4(final AccountSettingsModule accountSettingsModuleParam,
      final AppConfigModule appConfigModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final DummyInterceptorModule dummyInterceptorModuleParam,
      final ReleaseNetworkModule releaseNetworkModuleParam,
      final DatabaseModule databaseModuleParam,
      final InterceptorModuleTest interceptorModuleTestParam, final LegacyModule legacyModuleParam,
      final LoginAnalyticsModule loginAnalyticsModuleParam, final StatsModule statsModuleParam,
      final SupportModule supportModuleParam, final ThreadModule threadModuleParam,
      final TrackerTestModule trackerTestModuleParam) {
    this.taxonomyXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<TaxonomyXMLRPCClient>(singletonC, 304));
    this.taxonomyStoreProvider = DoubleCheck.provider(new SwitchingProvider<TaxonomyStore>(singletonC, 302));
    this.categoryNodeWrapperProvider = SingleCheck.provider(new SwitchingProvider<CategoryNodeWrapper>(singletonC, 305));
    this.getCategoriesUseCaseProvider = SingleCheck.provider(new SwitchingProvider<GetCategoriesUseCase>(singletonC, 301));
    this.prepublishingHomeViewModelProvider = new SwitchingProvider<>(singletonC, 297);
    this.updatePostTagsUseCaseProvider = SingleCheck.provider(new SwitchingProvider<UpdatePostTagsUseCase>(singletonC, 307));
    this.prepublishingTagsViewModelProvider = new SwitchingProvider<>(singletonC, 306);
    this.prepublishingPublishSettingsViewModelProvider = new SwitchingProvider<>(singletonC, 308);
    this.meViewModelProvider = new SwitchingProvider<>(singletonC, 309);
    this.postListCreateMenuViewModelProvider = new SwitchingProvider<>(singletonC, 310);
    this.storyComposerViewModelProvider = new SwitchingProvider<>(singletonC, 311);
    this.storiesIntroViewModelProvider = new SwitchingProvider<>(singletonC, 312);
    this.photoPickerViewModelProvider = new SwitchingProvider<>(singletonC, 313);
    this.stockMediaRestClientProvider = DoubleCheck.provider(new SwitchingProvider<StockMediaRestClient>(singletonC, 316));
    this.stockMediaSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<StockMediaSqlUtils>(singletonC, 317));
    this.stockMediaStoreProvider = DoubleCheck.provider(new SwitchingProvider<StockMediaStore>(singletonC, 315));
    this.uriUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<UriUtilsWrapper>(singletonC, 318));
    this.mimeTypeMapUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<MimeTypeMapUtilsWrapper>(singletonC, 319));
    this.mediaPickerViewModelProvider = new SwitchingProvider<>(singletonC, 314);
    this.debugSettingsViewModelProvider = new SwitchingProvider<>(singletonC, 320);
    this.addCategoryUseCaseProvider = SingleCheck.provider(new SwitchingProvider<AddCategoryUseCase>(singletonC, 322));
    this.prepublishingCategoriesViewModelProvider = new SwitchingProvider<>(singletonC, 321);
    this.prepublishingAddCategoryViewModelProvider = new SwitchingProvider<>(singletonC, 323);
    this.suggestionViewModelProvider = new SwitchingProvider<>(singletonC, 324);
    this.activityLogTypeFilterViewModelProvider = new SwitchingProvider<>(singletonC, 325);
    this.dateFormatWrapperProvider = SingleCheck.provider(new SwitchingProvider<DateFormatWrapper>(singletonC, 329));
    this.threatItemBuilderProvider = SingleCheck.provider(new SwitchingProvider<ThreatItemBuilder>(singletonC, 328));
    this.threatDetailsListItemsBuilderProvider = SingleCheck.provider(new SwitchingProvider<ThreatDetailsListItemsBuilder>(singletonC, 330));
    this.scanRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ScanRestClient>(singletonC, 332));
    this.scanSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ScanSqlUtils>(singletonC, 333));
    this.threatSqlUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ThreatSqlUtils>(singletonC, 334));
    this.buildConfigWrapperProvider = SingleCheck.provider(new SwitchingProvider<BuildConfigWrapper>(singletonC, 335));
    this.scanStoreProvider = DoubleCheck.provider(new SwitchingProvider<ScanStore>(singletonC, 331));
    this.scanStateListItemsBuilderProvider = SingleCheck.provider(new SwitchingProvider<ScanStateListItemsBuilder>(singletonC, 327));
    this.scanTrackerProvider = SingleCheck.provider(new SwitchingProvider<ScanTracker>(singletonC, 336));
    this.scanViewModelProvider = new SwitchingProvider<>(singletonC, 326);
    this.scanHistoryViewModelProvider = new SwitchingProvider<>(singletonC, 337);
    this.scanHistoryListViewModelProvider = new SwitchingProvider<>(singletonC, 338);
    this.threatDetailsViewModelProvider = new SwitchingProvider<>(singletonC, 339);
    this.homePageDataLoaderProvider = DoubleCheck.provider(new SwitchingProvider<HomePageDataLoader>(singletonC, 341));
    this.cardsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<CardsRestClient>(singletonC, 343));
    this.provideDashboardCardsDaoProvider = DoubleCheck.provider(new SwitchingProvider<CardsDao>(singletonC, 344));
    this.cardsStoreProvider = DoubleCheck.provider(new SwitchingProvider<CardsStore>(singletonC, 342));
    this.mySiteViewModelProvider = new SwitchingProvider<>(singletonC, 340);
    this.basicDialogViewModelProvider = new SwitchingProvider<>(singletonC, 345);
    this.backupDownloadStepsProvider = DoubleCheck.provider(new SwitchingProvider<BackupDownloadStepsProvider>(singletonC, 347));
    this.jetpackAvailableItemsProvider = DoubleCheck.provider(new SwitchingProvider<JetpackAvailableItemsProvider>(singletonC, 348));
    this.backupDownloadStateListItemBuilderProvider = SingleCheck.provider(new SwitchingProvider<BackupDownloadStateListItemBuilder>(singletonC, 349));
    this.backupDownloadViewModelProvider = new SwitchingProvider<>(singletonC, 346);
    this.restoreStepsProvider = DoubleCheck.provider(new SwitchingProvider<RestoreStepsProvider>(singletonC, 351));
    this.restoreStateListItemBuilderProvider = SingleCheck.provider(new SwitchingProvider<RestoreStateListItemBuilder>(singletonC, 352));
    this.restoreViewModelProvider = new SwitchingProvider<>(singletonC, 350);
    this.dynamicCardMenuViewModelProvider = new SwitchingProvider<>(singletonC, 353);
    this.roleUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<RoleUtilsWrapper>(singletonC, 356));
    this.simpleDateFormatWrapperProvider = SingleCheck.provider(new SwitchingProvider<SimpleDateFormatWrapper>(singletonC, 357));
    this.invitePeopleUtilsProvider = SingleCheck.provider(new SwitchingProvider<InvitePeopleUtils>(singletonC, 355));
    this.peopleInviteViewModelProvider = new SwitchingProvider<>(singletonC, 354);
    this.engagedPeopleListViewModelProvider = new SwitchingProvider<>(singletonC, 358);
    this.userProfileViewModelProvider = new SwitchingProvider<>(singletonC, 359);
    this.siteSettingsTimezoneViewModelProvider = new SwitchingProvider<>(singletonC, 360);
    this.loginNoSitesViewModelProvider = new SwitchingProvider<>(singletonC, 361);
    this.loginEpilogueViewModelProvider = new SwitchingProvider<>(singletonC, 362);
    this.loginPrologueViewModelProvider = new SwitchingProvider<>(singletonC, 363);
    this.loginViewModelProvider = new SwitchingProvider<>(singletonC, 364);
    this.deepLinkingIntentReceiverViewModelProvider = new SwitchingProvider<>(singletonC, 365);
    this.loginSiteCheckErrorViewModelProvider = new SwitchingProvider<>(singletonC, 366);
    this.storageUtilsProvider = DoubleCheck.provider(new SwitchingProvider<StorageUtilsProvider>(singletonC, 368));
    this.storageUtilsViewModelProvider = new SwitchingProvider<>(singletonC, 367);
    this.commentErrorUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<CommentErrorUtilsWrapper>(singletonC, 373));
    this.dateTimeUtilsWrapperProvider = SingleCheck.provider(new SwitchingProvider<DateTimeUtilsWrapper>(singletonC, 375));
    this.commentsMapperProvider = SingleCheck.provider(new SwitchingProvider<CommentsMapper>(singletonC, 374));
    this.commentsRestClientProvider2 = DoubleCheck.provider(new SwitchingProvider<org.wordpress.android.fluxc.network.rest.wpcom.comment.CommentsRestClient>(singletonC, 372));
    this.commentsXMLRPCClientProvider = DoubleCheck.provider(new SwitchingProvider<CommentsXMLRPCClient>(singletonC, 376));
    this.provideCommentsDaoProvider = DoubleCheck.provider(new SwitchingProvider<CommentsDao>(singletonC, 377));
    this.commentsStoreProvider2 = DoubleCheck.provider(new SwitchingProvider<org.wordpress.android.fluxc.store.CommentsStore>(singletonC, 371));
    this.paginateCommentsResourceProvider = SingleCheck.provider(new SwitchingProvider<PaginateCommentsResourceProvider>(singletonC, 370));
    this.localCommentCacheUpdateHandlerProvider = DoubleCheck.provider(new SwitchingProvider<LocalCommentCacheUpdateHandler>(singletonC, 379));
    this.moderateCommentsResourceProvider = SingleCheck.provider(new SwitchingProvider<ModerateCommentsResourceProvider>(singletonC, 378));
    this.unifiedCommentListViewModelProvider = new SwitchingProvider<>(singletonC, 369);
    this.bloggingRemindersViewModelProvider = new SwitchingProvider<>(singletonC, 380);
    this.categoriesListViewModelProvider = new SwitchingProvider<>(singletonC, 381);
    this.localePickerViewModelProvider = new SwitchingProvider<>(singletonC, 382);
    this.categoryDetailViewModelProvider = new SwitchingProvider<>(singletonC, 383);
    this.unifiedCommentActivityViewModelProvider = new SwitchingProvider<>(singletonC, 384);
    this.notificationsActionsWrapperProvider = SingleCheck.provider(new SwitchingProvider<NotificationsActionsWrapper>(singletonC, 386));
    this.unifiedCommentsEditViewModelProvider = new SwitchingProvider<>(singletonC, 385);
    this.debugCookiesViewModelProvider = new SwitchingProvider<>(singletonC, 387);
    this.conversationNotificationsViewModelProvider = new SwitchingProvider<>(singletonC, 388);
    this.bloggingPromptsOnboardingViewModelProvider = new SwitchingProvider<>(singletonC, 389);
    this.editorBloggingPromptsViewModelProvider = new SwitchingProvider<>(singletonC, 390);
    this.provideLikesDetailUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<GranularUseCaseFactory>>(singletonC, 393));
    this.provideLikesDetailStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 392));
    this.totalLikesDetailListViewModelProvider = new SwitchingProvider<>(singletonC, 391);
    this.featureIntroductionViewModelProvider = new SwitchingProvider<>(singletonC, 394);
    this.provideCommentsDetailUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<BaseStatsUseCase<?, ?>>>(singletonC, 397));
    this.provideCommentsDetailStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 396));
    this.totalCommentsDetailListViewModelProvider = new SwitchingProvider<>(singletonC, 395);
    this.provideFollowersDetailUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<BaseStatsUseCase<?, ?>>>(singletonC, 400));
    this.provideFollowersDetailStatsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BaseListUseCase>(singletonC, 399));
    this.totalFollowersDetailListViewModelProvider = new SwitchingProvider<>(singletonC, 398);
  }

  @SuppressWarnings("unchecked")
  private void initialize5(final AccountSettingsModule accountSettingsModuleParam,
      final AppConfigModule appConfigModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final DummyInterceptorModule dummyInterceptorModuleParam,
      final ReleaseNetworkModule releaseNetworkModuleParam,
      final DatabaseModule databaseModuleParam,
      final InterceptorModuleTest interceptorModuleTestParam, final LegacyModule legacyModuleParam,
      final LoginAnalyticsModule loginAnalyticsModuleParam, final StatsModule statsModuleParam,
      final SupportModule supportModuleParam, final ThreadModule threadModuleParam,
      final TrackerTestModule trackerTestModuleParam) {
    this.provideDefaultContinuationWrapperProvider = DoubleCheck.provider(new SwitchingProvider<ContinuationWrapper<AccountStore.OnAccountChanged>>(singletonC, 402));
    this.provideConcurrentContinuationWrapperProvider = DoubleCheck.provider(new SwitchingProvider<ContinuationWrapper<AccountStore.OnAccountChanged>>(singletonC, 403));
    this.accountSettingsViewModelProvider = new SwitchingProvider<>(singletonC, 401);
    this.viewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider<ViewModelFactory>(singletonC, 129));
    this.siteCreationTrackerProvider = DoubleCheck.provider(new SwitchingProvider<SiteCreationTracker>(singletonC, 404));
    this.commentsStoreAdapterProvider = DoubleCheck.provider(new SwitchingProvider<CommentsStoreAdapter>(singletonC, 405));
    this.meGravatarLoaderProvider = DoubleCheck.provider(new SwitchingProvider<MeGravatarLoader>(singletonC, 406));
    this.exoPlayerUtilsProvider = SingleCheck.provider(new SwitchingProvider<ExoPlayerUtils>(singletonC, 407));
    this.featuredImageHelperProvider = SingleCheck.provider(new SwitchingProvider<FeaturedImageHelper>(singletonC, 408));
    this.reactNativeWPComRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ReactNativeWPComRestClient>(singletonC, 411));
    this.reactNativeWPAPIRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ReactNativeWPAPIRestClient>(singletonC, 412));
    this.reactNativeStoreProvider = DoubleCheck.provider(new SwitchingProvider<ReactNativeStore>(singletonC, 410));
    this.editorThemeStoreProvider = DoubleCheck.provider(new SwitchingProvider<EditorThemeStore>(singletonC, 409));
    this.activityLauncherWrapperProvider = SingleCheck.provider(new SwitchingProvider<ActivityLauncherWrapper>(singletonC, 414));
    this.remotePreviewLogicHelperProvider = SingleCheck.provider(new SwitchingProvider<RemotePreviewLogicHelper>(singletonC, 413));
    this.progressDialogHelperProvider = SingleCheck.provider(new SwitchingProvider<ProgressDialogHelper>(singletonC, 415));
    this.addExistingMediaToPostUseCaseProvider = SingleCheck.provider(new SwitchingProvider<AddExistingMediaToPostUseCase>(singletonC, 416));
    this.retryFailedMediaUploadUseCaseProvider = SingleCheck.provider(new SwitchingProvider<RetryFailedMediaUploadUseCase>(singletonC, 417));
    this.aztecEditorFragmentStaticWrapperProvider = SingleCheck.provider(new SwitchingProvider<AztecEditorFragmentStaticWrapper>(singletonC, 419));
    this.cleanUpMediaToPostAssociationUseCaseProvider = SingleCheck.provider(new SwitchingProvider<CleanUpMediaToPostAssociationUseCase>(singletonC, 418));
    this.reblogUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ReblogUtils>(singletonC, 420));
    this.xPostsRestClientProvider = DoubleCheck.provider(new SwitchingProvider<XPostsRestClient>(singletonC, 421));
    this.loadStoryFromStoriesPrefsUseCaseProvider = SingleCheck.provider(new SwitchingProvider<LoadStoryFromStoriesPrefsUseCase>(singletonC, 422));
    this.notificationsUtilsWrapperProvider = DoubleCheck.provider(new SwitchingProvider<NotificationsUtilsWrapper>(singletonC, 424));
    this.listScenarioUtilsProvider = SingleCheck.provider(new SwitchingProvider<ListScenarioUtils>(singletonC, 423));
    this.downloadManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider<DownloadManagerWrapper>(singletonC, 425));
    this.readerRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ReaderRestClient>(singletonC, 427));
    this.readerStoreProvider = DoubleCheck.provider(new SwitchingProvider<ReaderStore>(singletonC, 426));
    this.readerPostSeenStatusWrapperProvider = SingleCheck.provider(new SwitchingProvider<ReaderPostSeenStatusWrapper>(singletonC, 428));
    this.themeRestClientProvider = DoubleCheck.provider(new SwitchingProvider<ThemeRestClient>(singletonC, 430));
    this.themeStoreProvider = DoubleCheck.provider(new SwitchingProvider<ThemeStore>(singletonC, 429));
    this.provideNoRedirectsRequestQueueProvider = DoubleCheck.provider(new SwitchingProvider<RequestQueue>(singletonC, 431));
    this.glideRequestFactoryProvider = DoubleCheck.provider(new SwitchingProvider<GlideRequestFactory>(singletonC, 432));
    this.statsNavigatorProvider = DoubleCheck.provider(new SwitchingProvider<StatsNavigator>(singletonC, 433));
    this.unifiedAboutTrackerProvider = DoubleCheck.provider(new SwitchingProvider<UnifiedAboutTracker>(singletonC, 434));
    this.qRCodeAuthRestClientProvider = DoubleCheck.provider(new SwitchingProvider<QRCodeAuthRestClient>(singletonC, 436));
    this.qRCodeAuthStoreProvider = DoubleCheck.provider(new SwitchingProvider<QRCodeAuthStore>(singletonC, 435));
    this.siteCreationStepsProvider = DoubleCheck.provider(new SwitchingProvider<SiteCreationStepsProvider>(singletonC, 437));
    this.provideListStatsUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<Map<StatsListViewModel.StatsSection, BaseListUseCase>>(singletonC, 438));
    this.provideViewAllInsightsUseCasesProvider = DoubleCheck.provider(new SwitchingProvider<List<BaseStatsUseCase<?, ?>>>(singletonC, 439));
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return ImmutableSet.<Boolean>of();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public DispatchingAndroidInjector<Object> injector() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>of());
  }

  @Override
  public AppInitializer appInitializer() {
    return appInitializerProvider.get();
  }

  @Override
  public void injectTest(UserAgentTest userAgentTest) {
  }

  @Override
  public void injectTest(BlockEditorTests blockEditorTests) {
  }

  @Override
  public void injectTest(ContactUsTests contactUsTests) {
  }

  @Override
  public void injectTest(EditorTests editorTests) {
  }

  @Override
  public void injectTest(LoginTests loginTests) {
  }

  @Override
  public void injectTest(ReaderTests readerTests) {
  }

  @Override
  public void injectTest(SignUpTests signUpTests) {
  }

  @Override
  public void injectTest(StatsTests statsTests) {
  }

  @Override
  public void injectTest(AuthenticatorRequestTest authenticatorRequestTest) {
  }

  @Override
  public void injectTest(GravatarApiTest gravatarApiTest) {
    injectGravatarApiTest(gravatarApiTest);
  }

  @Override
  public void injectTest(WPNetworkImageViewTest wPNetworkImageViewTest) {
  }

  @Override
  public void injectTest(NotesParseTest notesParseTest) {
  }

  @Override
  public void injectTest(NotificationsUtilsTest notificationsUtilsTest) {
  }

  @Override
  public void injectTest(PostUtilsTest postUtilsTest) {
  }

  @Override
  public void injectTest(JPScreenshotTest jPScreenshotTest) {
  }

  @Override
  public void injectTest(WPScreenshotTest wPScreenshotTest) {
  }

  @Override
  public void injectTest(AutolinkUtilsTest autolinkUtilsTest) {
  }

  @Override
  public void injectTest(SupportedBlocksProviderTest supportedBlocksProviderTest) {
    injectSupportedBlocksProviderTest(supportedBlocksProviderTest);
  }

  @Override
  public void injectTest(UploadWorkerTest uploadWorkerTest) {
    injectUploadWorkerTest(uploadWorkerTest);
  }

  @Override
  public void injectTest(UrlUtilsTest urlUtilsTest) {
  }

  @Override
  public void injectTest(WPUrlUtilsTest wPUrlUtilsTest) {
  }

  @Override
  public void injectWordPressDebug(WordPressDebug wordPressDebug) {
    injectWordPressDebug2(wordPressDebug);
  }

  @Override
  public void inject(WPMainActivity object) {
    injectWPMainActivity(object);
  }

  @Override
  public void inject(SiteCreationService object) {
    injectSiteCreationService(object);
  }

  @Override
  public void inject(UploadService object) {
    injectUploadService(object);
  }

  @Override
  public void inject(MediaUploadHandler object) {
    injectMediaUploadHandler(object);
  }

  @Override
  public void inject(PostUploadHandler object) {
    injectPostUploadHandler(object);
  }

  @Override
  public void inject(LoginActivity object) {
    injectLoginActivity(object);
  }

  @Override
  public void inject(LoginEpilogueActivity object) {
    injectLoginEpilogueActivity(object);
  }

  @Override
  public void inject(LoginEpilogueFragment object) {
    injectLoginEpilogueFragment(object);
  }

  @Override
  public void inject(LoginMagicLinkInterceptActivity object) {
    injectLoginMagicLinkInterceptActivity(object);
  }

  @Override
  public void inject(SignupEpilogueActivity object) {
    injectSignupEpilogueActivity(object);
  }

  @Override
  public void inject(SignupEpilogueFragment object) {
    injectSignupEpilogueFragment(object);
  }

  @Override
  public void inject(PostSignupInterstitialActivity object) {
    injectPostSignupInterstitialActivity(object);
  }

  @Override
  public void inject(JetpackConnectionResultActivity object) {
    injectJetpackConnectionResultActivity(object);
  }

  @Override
  public void inject(StatsConnectJetpackActivity object) {
    injectStatsConnectJetpackActivity(object);
  }

  @Override
  public void inject(GCMMessageService object) {
    injectGCMMessageService(object);
  }

  @Override
  public void inject(GCMRegistrationIntentService object) {
    injectGCMRegistrationIntentService(object);
  }

  @Override
  public void inject(DeepLinkingIntentReceiverActivity object) {
    injectDeepLinkingIntentReceiverActivity(object);
  }

  @Override
  public void inject(ShareIntentReceiverActivity object) {
    injectShareIntentReceiverActivity(object);
  }

  @Override
  public void inject(ShareIntentReceiverFragment object) {
    injectShareIntentReceiverFragment(object);
  }

  @Override
  public void inject(AddQuickPressShortcutActivity object) {
    injectAddQuickPressShortcutActivity(object);
  }

  @Override
  public void inject(HelpActivity object) {
    injectHelpActivity(object);
  }

  @Override
  public void inject(CommentDetailFragment object) {
    injectCommentDetailFragment(object);
  }

  @Override
  public void inject(CommentFullScreenDialogFragment object) {
    injectCommentFullScreenDialogFragment(object);
  }

  @Override
  public void inject(EditCommentActivity object) {
    injectEditCommentActivity(object);
  }

  @Override
  public void inject(CommentsDetailActivity object) {
    injectCommentsDetailActivity(object);
  }

  @Override
  public void inject(MeFragment object) {
    injectMeFragment(object);
  }

  @Override
  public void inject(MyProfileActivity object) {
    injectMyProfileActivity(object);
  }

  @Override
  public void inject(MyProfileFragment object) {
    injectMyProfileFragment(object);
  }

  @Override
  public void inject(AccountSettingsFragment object) {
    injectAccountSettingsFragment(object);
  }

  @Override
  public void inject(SitePickerActivity object) {
    injectSitePickerActivity(object);
  }

  @Override
  public void inject(SitePickerAdapter object) {
    injectSitePickerAdapter(object);
  }

  @Override
  public void inject(SiteSettingsFragment object) {
    injectSiteSettingsFragment(object);
  }

  @Override
  public void inject(SiteSettingsInterface object) {
    injectSiteSettingsInterface(object);
  }

  @Override
  public void inject(BlogPreferencesActivity object) {
    injectBlogPreferencesActivity(object);
  }

  @Override
  public void inject(AppSettingsFragment object) {
    injectAppSettingsFragment(object);
  }

  @Override
  public void inject(PeopleManagementActivity object) {
    injectPeopleManagementActivity(object);
  }

  @Override
  public void inject(PeopleListFragment object) {
    injectPeopleListFragment(object);
  }

  @Override
  public void inject(PersonDetailFragment object) {
    injectPersonDetailFragment(object);
  }

  @Override
  public void inject(RoleChangeDialogFragment object) {
    injectRoleChangeDialogFragment(object);
  }

  @Override
  public void inject(PeopleInviteFragment object) {
    injectPeopleInviteFragment(object);
  }

  @Override
  public void inject(RoleSelectDialogFragment object) {
    injectRoleSelectDialogFragment(object);
  }

  @Override
  public void inject(PeopleInviteDialogFragment object) {
    injectPeopleInviteDialogFragment(object);
  }

  @Override
  public void inject(PlansActivity object) {
  }

  @Override
  public void inject(MediaBrowserActivity object) {
    injectMediaBrowserActivity(object);
  }

  @Override
  public void inject(MediaGridFragment object) {
    injectMediaGridFragment(object);
  }

  @Override
  public void inject(MediaPreviewActivity object) {
    injectMediaPreviewActivity(object);
  }

  @Override
  public void inject(MediaPreviewFragment object) {
    injectMediaPreviewFragment(object);
  }

  @Override
  public void inject(MediaSettingsActivity object) {
    injectMediaSettingsActivity(object);
  }

  @Override
  public void inject(PhotoPickerActivity object) {
    injectPhotoPickerActivity(object);
  }

  @Override
  public void inject(StockMediaPickerActivity object) {
    injectStockMediaPickerActivity(object);
  }

  @Override
  public void inject(SiteSettingsTagListActivity object) {
    injectSiteSettingsTagListActivity(object);
  }

  @Override
  public void inject(SiteSettingsTagDetailFragment object) {
  }

  @Override
  public void inject(PublicizeListActivity object) {
    injectPublicizeListActivity(object);
  }

  @Override
  public void inject(PublicizeWebViewFragment object) {
    injectPublicizeWebViewFragment(object);
  }

  @Override
  public void inject(PublicizeDetailFragment object) {
    injectPublicizeDetailFragment(object);
  }

  @Override
  public void inject(PublicizeListFragment object) {
    injectPublicizeListFragment(object);
  }

  @Override
  public void inject(PublicizeButtonPrefsFragment object) {
    injectPublicizeButtonPrefsFragment(object);
  }

  @Override
  public void inject(EditPostActivity object) {
    injectEditPostActivity(object);
  }

  @Override
  public void inject(EditPostSettingsFragment object) {
    injectEditPostSettingsFragment(object);
  }

  @Override
  public void inject(PostsListActivity object) {
    injectPostsListActivity(object);
  }

  @Override
  public void inject(PagesActivity object) {
    injectPagesActivity(object);
  }

  @Override
  public void inject(AuthorSelectionAdapter object) {
    injectAuthorSelectionAdapter(object);
  }

  @Override
  public void inject(PostListFragment object) {
    injectPostListFragment(object);
  }

  @Override
  public void inject(HistoryListFragment object) {
    injectHistoryListFragment(object);
  }

  @Override
  public void inject(HistoryAdapter object) {
    injectHistoryAdapter(object);
  }

  @Override
  public void inject(HistoryDetailContainerFragment object) {
    injectHistoryDetailContainerFragment(object);
  }

  @Override
  public void inject(NotificationsListFragment object) {
    injectNotificationsListFragment(object);
  }

  @Override
  public void inject(NotificationsListFragmentPage object) {
    injectNotificationsListFragmentPage(object);
  }

  @Override
  public void inject(NotificationsSettingsFragment object) {
    injectNotificationsSettingsFragment(object);
  }

  @Override
  public void inject(NotificationsDetailActivity object) {
    injectNotificationsDetailActivity(object);
  }

  @Override
  public void inject(NotificationsProcessingService object) {
    injectNotificationsProcessingService(object);
  }

  @Override
  public void inject(NotificationsPendingDraftsReceiver object) {
    injectNotificationsPendingDraftsReceiver(object);
  }

  @Override
  public void inject(NotificationsDetailListFragment object) {
    injectNotificationsDetailListFragment(object);
  }

  @Override
  public void inject(ReaderCommentListActivity object) {
    injectReaderCommentListActivity(object);
  }

  @Override
  public void inject(ReaderSubsActivity object) {
    injectReaderSubsActivity(object);
  }

  @Override
  public void inject(ReaderUpdateLogic object) {
    injectReaderUpdateLogic(object);
  }

  @Override
  public void inject(ReaderPostDetailFragment object) {
    injectReaderPostDetailFragment(object);
  }

  @Override
  public void inject(ReaderPostListFragment object) {
    injectReaderPostListFragment(object);
  }

  @Override
  public void inject(ReaderCommentAdapter object) {
    injectReaderCommentAdapter(object);
  }

  @Override
  public void inject(ReaderPostAdapter object) {
    injectReaderPostAdapter(object);
  }

  @Override
  public void inject(ReaderTagAdapter object) {
    injectReaderTagAdapter(object);
  }

  @Override
  public void inject(PlansListFragment object) {
    injectPlansListFragment(object);
  }

  @Override
  public void inject(ReaderSiteHeaderView object) {
    injectReaderSiteHeaderView(object);
  }

  @Override
  public void inject(ReaderSiteSearchResultView object) {
    injectReaderSiteSearchResultView(object);
  }

  @Override
  public void inject(ReaderTagHeaderView object) {
    injectReaderTagHeaderView(object);
  }

  @Override
  public void inject(ReaderPostDetailHeaderView object) {
    injectReaderPostDetailHeaderView(object);
  }

  @Override
  public void inject(ReaderExpandableTagsView object) {
    injectReaderExpandableTagsView(object);
  }

  @Override
  public void inject(ReaderLikingUsersView object) {
    injectReaderLikingUsersView(object);
  }

  @Override
  public void inject(ReaderWebView object) {
    injectReaderWebView(object);
  }

  @Override
  public void inject(ReaderSimplePostContainerView object) {
    injectReaderSimplePostContainerView(object);
  }

  @Override
  public void inject(ReaderPostPagerActivity object) {
    injectReaderPostPagerActivity(object);
  }

  @Override
  public void inject(ReaderPostListActivity object) {
    injectReaderPostListActivity(object);
  }

  @Override
  public void inject(ReaderBlogFragment object) {
    injectReaderBlogFragment(object);
  }

  @Override
  public void inject(ReaderBlogAdapter object) {
    injectReaderBlogAdapter(object);
  }

  @Override
  public void inject(ReaderCommentsPostHeaderView object) {
  }

  @Override
  public void inject(ReleaseNotesActivity object) {
    injectReleaseNotesActivity(object);
  }

  @Override
  public void inject(WPWebViewActivity object) {
    injectWPWebViewActivity(object);
  }

  @Override
  public void inject(WPWebViewClient object) {
    injectWPWebViewClient(object);
  }

  @Override
  public void inject(ThemeBrowserActivity object) {
    injectThemeBrowserActivity(object);
  }

  @Override
  public void inject(NotesAdapter object) {
    injectNotesAdapter(object);
  }

  @Override
  public void inject(ThemeBrowserFragment object) {
    injectThemeBrowserFragment(object);
  }

  @Override
  public void inject(MediaDeleteService object) {
    injectMediaDeleteService(object);
  }

  @Override
  public void inject(SelectCategoriesActivity object) {
    injectSelectCategoriesActivity(object);
  }

  @Override
  public void inject(ReaderUserAdapter object) {
    injectReaderUserAdapter(object);
  }

  @Override
  public void inject(AddCategoryFragment object) {
    injectAddCategoryFragment(object);
  }

  @Override
  public void inject(PluginBrowserActivity object) {
    injectPluginBrowserActivity(object);
  }

  @Override
  public void inject(ActivityLogListActivity object) {
  }

  @Override
  public void inject(ActivityLogListFragment object) {
    injectActivityLogListFragment(object);
  }

  @Override
  public void inject(ActivityLogDetailFragment object) {
    injectActivityLogDetailFragment(object);
  }

  @Override
  public void inject(ScanFragment object) {
    injectScanFragment(object);
  }

  @Override
  public void inject(ScanHistoryFragment object) {
    injectScanHistoryFragment(object);
  }

  @Override
  public void inject(ScanHistoryListFragment object) {
    injectScanHistoryListFragment(object);
  }

  @Override
  public void inject(ThreatDetailsFragment object) {
    injectThreatDetailsFragment(object);
  }

  @Override
  public void inject(PluginListFragment object) {
    injectPluginListFragment(object);
  }

  @Override
  public void inject(PluginDetailActivity object) {
    injectPluginDetailActivity(object);
  }

  @Override
  public void inject(SuggestionAdapter object) {
    injectSuggestionAdapter(object);
  }

  @Override
  public void inject(WordPressGlideModule object) {
    injectWordPressGlideModule(object);
  }

  @Override
  public void inject(QuickStartFullScreenDialogFragment object) {
    injectQuickStartFullScreenDialogFragment(object);
  }

  @Override
  public void inject(QuickStartReminderReceiver object) {
    injectQuickStartReminderReceiver(object);
  }

  @Override
  public void inject(MediaGridAdapter object) {
    injectMediaGridAdapter(object);
  }

  @Override
  public void inject(PagesFragment object) {
    injectPagesFragment(object);
  }

  @Override
  public void inject(PageListFragment object) {
    injectPageListFragment(object);
  }

  @Override
  public void inject(SearchListFragment object) {
    injectSearchListFragment(object);
  }

  @Override
  public void inject(PageParentFragment object) {
    injectPageParentFragment(object);
  }

  @Override
  public void inject(WPCustomImageGetter object) {
    injectWPCustomImageGetter(object);
  }

  @Override
  public void inject(PublicizeAccountChooserListAdapter object) {
    injectPublicizeAccountChooserListAdapter(object);
  }

  @Override
  public void inject(PublicizeConnectionAdapter object) {
    injectPublicizeConnectionAdapter(object);
  }

  @Override
  public void inject(PublicizeServiceAdapter object) {
    injectPublicizeServiceAdapter(object);
  }

  @Override
  public void inject(JetpackRemoteInstallFragment jetpackRemoteInstallFragment) {
    injectJetpackRemoteInstallFragment(jetpackRemoteInstallFragment);
  }

  @Override
  public void inject(PlansListAdapter object) {
    injectPlansListAdapter(object);
  }

  @Override
  public void inject(PlanDetailsFragment object) {
    injectPlanDetailsFragment(object);
  }

  @Override
  public void inject(DomainsDashboardFragment object) {
    injectDomainsDashboardFragment(object);
  }

  @Override
  public void inject(DomainSuggestionsFragment object) {
    injectDomainSuggestionsFragment(object);
  }

  @Override
  public void inject(DomainRegistrationDetailsFragment object) {
    injectDomainRegistrationDetailsFragment(object);
  }

  @Override
  public void inject(StatsViewsWidget object) {
    injectStatsViewsWidget(object);
  }

  @Override
  public void inject(StatsAllTimeWidget object) {
    injectStatsAllTimeWidget(object);
  }

  @Override
  public void inject(StatsTodayWidget object) {
    injectStatsTodayWidget(object);
  }

  @Override
  public void inject(StatsMinifiedWidget object) {
    injectStatsMinifiedWidget(object);
  }

  @Override
  public void inject(ViewsWidgetListProvider object) {
    injectViewsWidgetListProvider(object);
  }

  @Override
  public void inject(AllTimeWidgetListProvider object) {
    injectAllTimeWidgetListProvider(object);
  }

  @Override
  public void inject(AllTimeWidgetBlockListProviderFactory object) {
    injectAllTimeWidgetBlockListProviderFactory(object);
  }

  @Override
  public void inject(TodayWidgetListProvider object) {
    injectTodayWidgetListProvider(object);
  }

  @Override
  public void inject(TodayWidgetBlockListProviderFactory object) {
    injectTodayWidgetBlockListProviderFactory(object);
  }

  @Override
  public void inject(StatsListFragment object) {
    injectStatsListFragment(object);
  }

  @Override
  public void inject(DomainRegistrationActivity object) {
    injectDomainRegistrationActivity(object);
  }

  @Override
  public void inject(EditPostPublishSettingsFragment object) {
    injectEditPostPublishSettingsFragment(object);
  }

  @Override
  public void inject(PostDatePickerDialogFragment object) {
    injectPostDatePickerDialogFragment(object);
  }

  @Override
  public void inject(PostTimePickerDialogFragment object) {
    injectPostTimePickerDialogFragment(object);
  }

  @Override
  public void inject(PostNotificationScheduleTimeDialogFragment object) {
    injectPostNotificationScheduleTimeDialogFragment(object);
  }

  @Override
  public void inject(PublishNotificationReceiver object) {
    injectPublishNotificationReceiver(object);
  }

  @Override
  public void inject(MainBottomSheetFragment object) {
    injectMainBottomSheetFragment(object);
  }

  @Override
  public void inject(ModalLayoutPickerFragment object) {
    injectModalLayoutPickerFragment(object);
  }

  @Override
  public void inject(SubfilterBottomSheetFragment object) {
    injectSubfilterBottomSheetFragment(object);
  }

  @Override
  public void inject(AddContentAdapter object) {
    injectAddContentAdapter(object);
  }

  @Override
  public void inject(LayoutsAdapter object) {
    injectLayoutsAdapter(object);
  }

  @Override
  public void inject(PageParentSearchFragment object) {
    injectPageParentSearchFragment(object);
  }

  @Override
  public void inject(PrepublishingBottomSheetFragment object) {
    injectPrepublishingBottomSheetFragment(object);
  }

  @Override
  public void inject(PrepublishingHomeFragment object) {
    injectPrepublishingHomeFragment(object);
  }

  @Override
  public void inject(PrepublishingHomeAdapter object) {
    injectPrepublishingHomeAdapter(object);
  }

  @Override
  public void inject(PrepublishingTagsFragment object) {
    injectPrepublishingTagsFragment(object);
  }

  @Override
  public void inject(PostSettingsTagsFragment object) {
    injectPostSettingsTagsFragment(object);
  }

  @Override
  public void inject(PrepublishingPublishSettingsFragment object) {
    injectPrepublishingPublishSettingsFragment(object);
  }

  @Override
  public void inject(AppSettingsActivity object) {
  }

  @Override
  public void inject(FeatureAnnouncementDialogFragment object) {
    injectFeatureAnnouncementDialogFragment(object);
  }

  @Override
  public void inject(FeatureAnnouncementListAdapter object) {
    injectFeatureAnnouncementListAdapter(object);
  }

  @Override
  public void inject(StoryComposerActivity object) {
    injectStoryComposerActivity(object);
  }

  @Override
  public void inject(StoriesIntroDialogFragment object) {
    injectStoriesIntroDialogFragment(object);
  }

  @Override
  public void inject(ReaderFragment object) {
    injectReaderFragment(object);
  }

  @Override
  public void inject(ReaderDiscoverFragment object) {
    injectReaderDiscoverFragment(object);
  }

  @Override
  public void inject(ReaderSearchActivity object) {
    injectReaderSearchActivity(object);
  }

  @Override
  public void inject(ReaderInterestsFragment object) {
    injectReaderInterestsFragment(object);
  }

  @Override
  public void inject(HomepageSettingsDialog object) {
    injectHomepageSettingsDialog(object);
  }

  @Override
  public void inject(CrashLogging object) {
  }

  @Override
  public void inject(AztecVideoLoader object) {
    injectAztecVideoLoader(object);
  }

  @Override
  public void inject(PhotoPickerFragment object) {
    injectPhotoPickerFragment(object);
  }

  @Override
  public void inject(LoginPrologueFragment object) {
    injectLoginPrologueFragment(object);
  }

  @Override
  public void inject(ReaderDiscoverLogic object) {
    injectReaderDiscoverLogic(object);
  }

  @Override
  public void inject(PostListCreateMenuFragment object) {
    injectPostListCreateMenuFragment(object);
  }

  @Override
  public void inject(ReaderDiscoverJobService object) {
    injectReaderDiscoverJobService(object);
  }

  @Override
  public void inject(ReaderDiscoverService object) {
    injectReaderDiscoverService(object);
  }

  @Override
  public void inject(SuggestionActivity object) {
    injectSuggestionActivity(object);
  }

  @Override
  public void inject(MediaPickerActivity object) {
    injectMediaPickerActivity(object);
  }

  @Override
  public void inject(MediaPickerFragment object) {
    injectMediaPickerFragment(object);
  }

  @Override
  public void inject(MediaUploadReadyProcessor object) {
    injectMediaUploadReadyProcessor(object);
  }

  @Override
  public void inject(PrepublishingCategoriesFragment object) {
    injectPrepublishingCategoriesFragment(object);
  }

  @Override
  public void inject(PrepublishingAddCategoryFragment object) {
    injectPrepublishingAddCategoryFragment(object);
  }

  @Override
  public void inject(ActivityLogTypeFilterFragment object) {
    injectActivityLogTypeFilterFragment(object);
  }

  @Override
  public void inject(MySiteFragment object) {
    injectMySiteFragment(object);
  }

  @Override
  public void inject(MySiteTabFragment object) {
    injectMySiteTabFragment(object);
  }

  @Override
  public void inject(BackupDownloadActivity object) {
  }

  @Override
  public void inject(RestoreActivity object) {
  }

  @Override
  public void inject(DynamicCardMenuFragment object) {
    injectDynamicCardMenuFragment(object);
  }

  @Override
  public void inject(BackupDownloadFragment object) {
    injectBackupDownloadFragment(object);
  }

  @Override
  public void inject(RestoreFragment object) {
    injectRestoreFragment(object);
  }

  @Override
  public void inject(EngagedPeopleListFragment object) {
    injectEngagedPeopleListFragment(object);
  }

  @Override
  public void inject(SiteSettingsTimezoneBottomSheet object) {
    injectSiteSettingsTimezoneBottomSheet(object);
  }

  @Override
  public void inject(LoginSiteCheckErrorFragment object) {
    injectLoginSiteCheckErrorFragment(object);
  }

  @Override
  public void inject(LoginNoSitesFragment object) {
    injectLoginNoSitesFragment(object);
  }

  @Override
  public void inject(UserProfileBottomSheetFragment object) {
    injectUserProfileBottomSheetFragment(object);
  }

  @Override
  public void inject(EngagedPeopleListActivity object) {
    injectEngagedPeopleListActivity(object);
  }

  @Override
  public void inject(UnifiedCommentsActivity object) {
    injectUnifiedCommentsActivity(object);
  }

  @Override
  public void inject(UnifiedCommentListFragment object) {
    injectUnifiedCommentListFragment(object);
  }

  @Override
  public void inject(UnifiedCommentListAdapter object) {
    injectUnifiedCommentListAdapter(object);
  }

  @Override
  public void inject(UnifiedCommentsEditFragment object) {
    injectUnifiedCommentsEditFragment(object);
  }

  @Override
  public void inject(EditCancelDialogFragment object) {
    injectEditCancelDialogFragment(object);
  }

  @Override
  public void inject(BloggingReminderBottomSheetFragment object) {
    injectBloggingReminderBottomSheetFragment(object);
  }

  @Override
  public void inject(LocalePickerBottomSheet object) {
    injectLocalePickerBottomSheet(object);
  }

  @Override
  public void inject(CategoriesListFragment object) {
    injectCategoriesListFragment(object);
  }

  @Override
  public void inject(CategoryDetailFragment object) {
    injectCategoryDetailFragment(object);
  }

  @Override
  public void inject(LayoutPreviewFragment object) {
    injectLayoutPreviewFragment(object);
  }

  @Override
  public void inject(DesignPreviewFragment object) {
    injectDesignPreviewFragment(object);
  }

  @Override
  public void inject(QuickStartPromptDialogFragment object) {
    injectQuickStartPromptDialogFragment(object);
  }

  @Override
  public void inject(BloggingReminderTimePicker object) {
    injectBloggingReminderTimePicker(object);
  }

  @Override
  public void inject(DebugCookiesFragment object) {
    injectDebugCookiesFragment(object);
  }

  @Override
  public void inject(DomainRegistrationResultFragment object) {
    injectDomainRegistrationResultFragment(object);
  }

  @Override
  public void inject(CommentNotificationsBottomSheetFragment object) {
    injectCommentNotificationsBottomSheetFragment(object);
  }

  @Override
  public void inject(UnifiedCommentsDetailsActivity object) {
  }

  @Override
  public void inject(UnifiedCommentDetailsFragment object) {
  }

  @Override
  public void inject(UnifiedAboutActivity object) {
    injectUnifiedAboutActivity(object);
  }

  @Override
  public void inject(CommentSnippetAdapter object) {
    injectCommentSnippetAdapter(object);
  }

  @Override
  public void inject(BloggingPromptsOnboardingDialogFragment object) {
    injectBloggingPromptsOnboardingDialogFragment(object);
  }

  @Override
  public void inject(DismissNotificationReceiver object) {
    injectDismissNotificationReceiver(object);
  }

  @CanIgnoreReturnValue
  private MediaStore injectMediaStore(MediaStore instance) {
    MediaStore_MembersInjector.injectMUploadStore(instance, uploadStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostStore injectPostStore(PostStore instance) {
    PostStore_MembersInjector.injectMUploadStore(instance, uploadStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StoryMediaSaveUploadBridge injectStoryMediaSaveUploadBridge(
      StoryMediaSaveUploadBridge instance) {
    StoryMediaSaveUploadBridge_MembersInjector.injectEditPostRepository(instance, editPostRepository());
    StoryMediaSaveUploadBridge_MembersInjector.injectStoriesTrackerHelper(instance, new StoriesTrackerHelper());
    StoryMediaSaveUploadBridge_MembersInjector.injectSaveStoryGutenbergBlockUseCase(instance, saveStoryGutenbergBlockUseCase());
    return instance;
  }

  @CanIgnoreReturnValue
  private AppInitializer injectAppInitializer(AppInitializer instance) {
    AppInitializer_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    AppInitializer_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    AppInitializer_MembersInjector.injectSiteStore(instance, siteStoreProvider.get());
    AppInitializer_MembersInjector.injectMediaStore(instance, mediaStoreProvider.get());
    AppInitializer_MembersInjector.injectZendeskHelper(instance, provideZendeskHelperProvider.get());
    AppInitializer_MembersInjector.injectUploadStarter(instance, uploadStarterProvider.get());
    AppInitializer_MembersInjector.injectStatsWidgetUpdaters(instance, statsWidgetUpdaters());
    AppInitializer_MembersInjector.injectStatsStore(instance, statsStoreProvider.get());
    AppInitializer_MembersInjector.injectSystemNotificationsTracker(instance, systemNotificationsTracker());
    AppInitializer_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    AppInitializer_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    AppInitializer_MembersInjector.injectPrivateAtomicCookie(instance, privateAtomicCookieProvider.get());
    AppInitializer_MembersInjector.injectImageEditorTracker(instance, imageEditorTrackerProvider.get());
    AppInitializer_MembersInjector.injectStoryMediaSaveUploadBridge(instance, storyMediaSaveUploadBridge());
    AppInitializer_MembersInjector.injectCrashLogging(instance, provideCrashLoggingProvider.get());
    AppInitializer_MembersInjector.injectEncryptedLogging(instance, encryptedLoggingProvider.get());
    AppInitializer_MembersInjector.injectAppConfig(instance, appConfigProvider.get());
    AppInitializer_MembersInjector.injectImageEditorFileUtils(instance, new ImageEditorFileUtils());
    AppInitializer_MembersInjector.injectExPlat(instance, exPlatProvider.get());
    AppInitializer_MembersInjector.injectWordPressWorkerFactory(instance, wordPressWorkersFactory());
    AppInitializer_MembersInjector.injectDebugCookieManager(instance, debugCookieManager());
    AppInitializer_MembersInjector.injectAppScope(instance, ThreadModule_ProvideApplicationScopeFactory.provideApplicationScope(threadModule));
    AppInitializer_MembersInjector.injectSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    AppInitializer_MembersInjector.injectMySiteDefaultTabExperiment(instance, mySiteDefaultTabExperiment());
    AppInitializer_MembersInjector.injectTracker(instance, TrackerTestModule_ProvideTrackerFactory.provideTracker(trackerTestModule));
    AppInitializer_MembersInjector.injectRequestQueue(instance, provideRequestQueueCustomSSLProvider.get());
    AppInitializer_MembersInjector.injectImageLoader(instance, fluxCImageLoader());
    AppInitializer_MembersInjector.injectOAuthAuthenticator(instance, provideOAuthAuthenicatorProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GravatarApiTest injectGravatarApiTest(GravatarApiTest instance) {
    GravatarApiTest_MembersInjector.injectMContext(instance, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private SupportedBlocksProviderTest injectSupportedBlocksProviderTest(
      SupportedBlocksProviderTest instance) {
    SupportedBlocksProviderTest_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private UploadWorkerTest injectUploadWorkerTest(UploadWorkerTest instance) {
    UploadWorkerTest_MembersInjector.injectContext(instance, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private WordPressDebug injectWordPressDebug2(WordPressDebug instance) {
    WordPressApp_MembersInjector.injectMDispatchingAndroidInjector(instance, injector());
    WordPressApp_MembersInjector.injectMAppInitializer(instance, appInitializerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private WPMainActivity injectWPMainActivity(WPMainActivity instance) {
    WPMainActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    WPMainActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    WPMainActivity_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    WPMainActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    WPMainActivity_MembersInjector.injectMLoginAnalyticsListener(instance, loginAnalyticsListener());
    WPMainActivity_MembersInjector.injectMShortcutsNavigator(instance, ShortcutsNavigator_Factory.newInstance());
    WPMainActivity_MembersInjector.injectMShortcutUtils(instance, shortcutUtils());
    WPMainActivity_MembersInjector.injectMQuickStartStore(instance, quickStartStoreProvider.get());
    WPMainActivity_MembersInjector.injectMUploadActionUseCase(instance, uploadActionUseCaseProvider.get());
    WPMainActivity_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    WPMainActivity_MembersInjector.injectMGCMMessageHandler(instance, gCMMessageHandlerProvider.get());
    WPMainActivity_MembersInjector.injectMUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    WPMainActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    WPMainActivity_MembersInjector.injectMPrivateAtomicCookie(instance, privateAtomicCookieProvider.get());
    WPMainActivity_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    WPMainActivity_MembersInjector.injectMMediaPickerLauncher(instance, mediaPickerLauncher());
    WPMainActivity_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    WPMainActivity_MembersInjector.injectMQuickStartRepository(instance, quickStartRepositoryProvider.get());
    WPMainActivity_MembersInjector.injectMQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    WPMainActivity_MembersInjector.injectMAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    WPMainActivity_MembersInjector.injectMCreateSiteNotificationScheduler(instance, createSiteNotificationScheduler());
    WPMainActivity_MembersInjector.injectMWeeklyRoundupScheduler(instance, weeklyRoundupScheduler());
    WPMainActivity_MembersInjector.injectMTodaysStatsCardFeatureConfig(instance, mySiteDashboardTodaysStatsCardFeatureConfig());
    WPMainActivity_MembersInjector.injectMQuickStartTracker(instance, quickStartTracker());
    WPMainActivity_MembersInjector.injectMStatsRevampV2FeatureConfig(instance, statsRevampV2FeatureConfig());
    WPMainActivity_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private SiteCreationService injectSiteCreationService(SiteCreationService instance) {
    SiteCreationService_MembersInjector.injectManager(instance, siteCreationServiceManager());
    SiteCreationService_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    SiteCreationService_MembersInjector.injectTracker(instance, siteCreationTrackerProvider.get());
    SiteCreationService_MembersInjector.injectLocaleManagerWrapper(instance, localeManagerWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private UploadService injectUploadService(UploadService instance) {
    UploadService_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    UploadService_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    UploadService_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    UploadService_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    UploadService_MembersInjector.injectMUploadStore(instance, uploadStoreProvider.get());
    UploadService_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    UploadService_MembersInjector.injectMPostUtilsWrapper(instance, postUtilsWrapperProvider.get());
    UploadService_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaUploadHandler injectMediaUploadHandler(MediaUploadHandler instance) {
    MediaUploadHandler_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MediaUploadHandler_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    MediaUploadHandler_MembersInjector.injectMMp4ComposerVideoOptimizationFeatureConfig(instance, mp4ComposerVideoOptimizationFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostUploadHandler injectPostUploadHandler(PostUploadHandler instance) {
    PostUploadHandler_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    PostUploadHandler_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    PostUploadHandler_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    PostUploadHandler_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    PostUploadHandler_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    PostUploadHandler_MembersInjector.injectMUploadActionUseCase(instance, uploadActionUseCaseProvider.get());
    PostUploadHandler_MembersInjector.injectMAutoSavePostIfNotDraftUseCase(instance, autoSavePostIfNotDraftUseCase());
    PostUploadHandler_MembersInjector.injectMPostMediaHandler(instance, postMediaHandler());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginActivity injectLoginActivity(LoginActivity instance) {
    LoginActivity_MembersInjector.injectMDispatchingAndroidInjector(instance, injector());
    LoginActivity_MembersInjector.injectMLoginAnalyticsListener(instance, loginAnalyticsListener());
    LoginActivity_MembersInjector.injectMZendeskHelper(instance, provideZendeskHelperProvider.get());
    LoginActivity_MembersInjector.injectMUnifiedLoginTracker(instance, unifiedLoginTrackerProvider.get());
    LoginActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    LoginActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    LoginActivity_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginEpilogueActivity injectLoginEpilogueActivity(LoginEpilogueActivity instance) {
    LoginEpilogueActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    LoginEpilogueActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    LoginEpilogueActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    LoginEpilogueActivity_MembersInjector.injectMViewModel(instance, loginEpilogueViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginEpilogueFragment injectLoginEpilogueFragment(LoginEpilogueFragment instance) {
    LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, loginAnalyticsListener());
    LoginEpilogueFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    LoginEpilogueFragment_MembersInjector.injectMUnifiedLoginTracker(instance, unifiedLoginTrackerProvider.get());
    LoginEpilogueFragment_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    LoginEpilogueFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    LoginEpilogueFragment_MembersInjector.injectMParentViewModel(instance, loginEpilogueViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginMagicLinkInterceptActivity injectLoginMagicLinkInterceptActivity(
      LoginMagicLinkInterceptActivity instance) {
    LoginMagicLinkInterceptActivity_MembersInjector.injectMLoginAnalyticsListener(instance, loginAnalyticsListener());
    return instance;
  }

  @CanIgnoreReturnValue
  private SignupEpilogueActivity injectSignupEpilogueActivity(SignupEpilogueActivity instance) {
    SignupEpilogueActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SignupEpilogueFragment injectSignupEpilogueFragment(SignupEpilogueFragment instance) {
    LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, loginAnalyticsListener());
    SignupEpilogueFragment_MembersInjector.injectMAccount(instance, accountStoreProvider.get());
    SignupEpilogueFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    SignupEpilogueFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    SignupEpilogueFragment_MembersInjector.injectMAppPrefsWrapper(instance, appPrefsWrapperProvider.get());
    SignupEpilogueFragment_MembersInjector.injectMUnifiedLoginTracker(instance, unifiedLoginTrackerProvider.get());
    SignupEpilogueFragment_MembersInjector.injectMSignupUtils(instance, new SignupUtils());
    SignupEpilogueFragment_MembersInjector.injectMMediaPickerLauncher(instance, mediaPickerLauncher());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostSignupInterstitialActivity injectPostSignupInterstitialActivity(
      PostSignupInterstitialActivity instance) {
    PostSignupInterstitialActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private JetpackConnectionResultActivity injectJetpackConnectionResultActivity(
      JetpackConnectionResultActivity instance) {
    JetpackConnectionResultActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    JetpackConnectionResultActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    JetpackConnectionResultActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StatsConnectJetpackActivity injectStatsConnectJetpackActivity(
      StatsConnectJetpackActivity instance) {
    StatsConnectJetpackActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    StatsConnectJetpackActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GCMMessageService injectGCMMessageService(GCMMessageService instance) {
    GCMMessageService_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    GCMMessageService_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    GCMMessageService_MembersInjector.injectMZendeskHelper(instance, provideZendeskHelperProvider.get());
    GCMMessageService_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    GCMMessageService_MembersInjector.injectMGCMMessageHandler(instance, gCMMessageHandlerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GCMRegistrationIntentService injectGCMRegistrationIntentService(
      GCMRegistrationIntentService instance) {
    GCMRegistrationIntentService_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    GCMRegistrationIntentService_MembersInjector.injectMZendeskHelper(instance, provideZendeskHelperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DeepLinkingIntentReceiverActivity injectDeepLinkingIntentReceiverActivity(
      DeepLinkingIntentReceiverActivity instance) {
    DeepLinkingIntentReceiverActivity_MembersInjector.injectMDeeplinkNavigator(instance, new DeepLinkNavigator());
    DeepLinkingIntentReceiverActivity_MembersInjector.injectMDeepLinkUriUtils(instance, deepLinkUriUtils());
    DeepLinkingIntentReceiverActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ShareIntentReceiverActivity injectShareIntentReceiverActivity(
      ShareIntentReceiverActivity instance) {
    ShareIntentReceiverActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ShareIntentReceiverActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ShareIntentReceiverFragment injectShareIntentReceiverFragment(
      ShareIntentReceiverFragment instance) {
    ShareIntentReceiverFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ShareIntentReceiverFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AddQuickPressShortcutActivity injectAddQuickPressShortcutActivity(
      AddQuickPressShortcutActivity instance) {
    AddQuickPressShortcutActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    AddQuickPressShortcutActivity_MembersInjector.injectMImageLoader(instance, fluxCImageLoader());
    return instance;
  }

  @CanIgnoreReturnValue
  private HelpActivity injectHelpActivity(HelpActivity instance) {
    HelpActivity_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    HelpActivity_MembersInjector.injectSiteStore(instance, siteStoreProvider.get());
    HelpActivity_MembersInjector.injectSupportHelper(instance, provideSupportHelperProvider.get());
    HelpActivity_MembersInjector.injectZendeskHelper(instance, provideZendeskHelperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CommentDetailFragment injectCommentDetailFragment(CommentDetailFragment instance) {
    CommentDetailFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    CommentDetailFragment_MembersInjector.injectMCommentsStoreAdapter(instance, commentsStoreAdapterProvider.get());
    CommentDetailFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    CommentDetailFragment_MembersInjector.injectMImageLoader(instance, fluxCImageLoader());
    CommentDetailFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    CommentDetailFragment_MembersInjector.injectMCommentsStore(instance, commentsStoreProvider2.get());
    CommentDetailFragment_MembersInjector.injectMLocalCommentCacheUpdateHandler(instance, localCommentCacheUpdateHandlerProvider.get());
    CommentDetailFragment_MembersInjector.injectMUnifiedCommentsCommentEditFeatureConfig(instance, unifiedCommentsCommentEditFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private CommentFullScreenDialogFragment injectCommentFullScreenDialogFragment(
      CommentFullScreenDialogFragment instance) {
    CommentFullScreenDialogFragment_MembersInjector.injectViewModel(instance, new CommentFullScreenDialogViewModel());
    CommentFullScreenDialogFragment_MembersInjector.injectSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EditCommentActivity injectEditCommentActivity(EditCommentActivity instance) {
    EditCommentActivity_MembersInjector.injectMCommentsStoreAdapter(instance, commentsStoreAdapterProvider.get());
    EditCommentActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CommentsDetailActivity injectCommentsDetailActivity(CommentsDetailActivity instance) {
    CommentsDetailActivity_MembersInjector.injectMCommentsStoreAdapter(instance, commentsStoreAdapterProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MeFragment injectMeFragment(MeFragment instance) {
    MeFragment_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    MeFragment_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    MeFragment_MembersInjector.injectSiteStore(instance, siteStoreProvider.get());
    MeFragment_MembersInjector.injectPostStore(instance, postStoreProvider.get());
    MeFragment_MembersInjector.injectMeGravatarLoader(instance, meGravatarLoaderProvider.get());
    MeFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    MeFragment_MembersInjector.injectMediaPickerLauncher(instance, mediaPickerLauncher());
    MeFragment_MembersInjector.injectRecommendTheAppFeatureConfig(instance, recommendTheAppFeatureConfig());
    MeFragment_MembersInjector.injectSequencer(instance, snackbarSequencerProvider.get());
    MeFragment_MembersInjector.injectUnifiedAboutFeatureConfig(instance, unifiedAboutFeatureConfig());
    MeFragment_MembersInjector.injectQrCodeAuthFlowFeatureConfig(instance, qRCodeAuthFlowFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private MyProfileActivity injectMyProfileActivity(MyProfileActivity instance) {
    MyProfileActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MyProfileActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MyProfileFragment injectMyProfileFragment(MyProfileFragment instance) {
    MyProfileFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MyProfileFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AccountSettingsFragment injectAccountSettingsFragment(AccountSettingsFragment instance) {
    AccountSettingsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    AccountSettingsFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    AccountSettingsFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SitePickerActivity injectSitePickerActivity(SitePickerActivity instance) {
    SitePickerActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    SitePickerActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    SitePickerActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    SitePickerActivity_MembersInjector.injectMStatsStore(instance, statsStoreProvider.get());
    SitePickerActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    SitePickerActivity_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private SitePickerAdapter injectSitePickerAdapter(SitePickerAdapter instance) {
    SitePickerAdapter_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    SitePickerAdapter_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    SitePickerAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    SitePickerAdapter_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    SitePickerAdapter_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SiteSettingsFragment injectSiteSettingsFragment(SiteSettingsFragment instance) {
    SiteSettingsFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    SiteSettingsFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    SiteSettingsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    SiteSettingsFragment_MembersInjector.injectMZendeskHelper(instance, provideZendeskHelperProvider.get());
    SiteSettingsFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    SiteSettingsFragment_MembersInjector.injectMBloggingRemindersFeatureConfig(instance, bloggingRemindersFeatureConfig());
    SiteSettingsFragment_MembersInjector.injectMBloggingPromptsFeatureConfig(instance, bloggingPromptsFeatureConfig());
    SiteSettingsFragment_MembersInjector.injectMManageCategoriesFeatureConfig(instance, manageCategoriesFeatureConfig());
    SiteSettingsFragment_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private SiteSettingsInterface injectSiteSettingsInterface(SiteSettingsInterface instance) {
    SiteSettingsInterface_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    SiteSettingsInterface_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    SiteSettingsInterface_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    SiteSettingsInterface_MembersInjector.injectMResourceProvider(instance, resourceProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private BlogPreferencesActivity injectBlogPreferencesActivity(BlogPreferencesActivity instance) {
    BlogPreferencesActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    BlogPreferencesActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    BlogPreferencesActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AppSettingsFragment injectAppSettingsFragment(AppSettingsFragment instance) {
    AppSettingsFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    AppSettingsFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    AppSettingsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    AppSettingsFragment_MembersInjector.injectMContextProvider(instance, contextProvider.get());
    AppSettingsFragment_MembersInjector.injectMFeatureAnnouncementProvider(instance, featureAnnouncementProvider());
    AppSettingsFragment_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    AppSettingsFragment_MembersInjector.injectMUnifiedAboutFeatureConfig(instance, unifiedAboutFeatureConfig());
    AppSettingsFragment_MembersInjector.injectMMySiteDashboardTabsFeatureConfig(instance, mySiteDashboardTabsFeatureConfig());
    AppSettingsFragment_MembersInjector.injectMMySiteDefaultTabExperiment(instance, mySiteDefaultTabExperiment());
    return instance;
  }

  @CanIgnoreReturnValue
  private PeopleManagementActivity injectPeopleManagementActivity(
      PeopleManagementActivity instance) {
    PeopleManagementActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    PeopleManagementActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PeopleListFragment injectPeopleListFragment(PeopleListFragment instance) {
    PeopleListFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    PeopleListFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PersonDetailFragment injectPersonDetailFragment(PersonDetailFragment instance) {
    PersonDetailFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    PersonDetailFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private RoleChangeDialogFragment injectRoleChangeDialogFragment(
      RoleChangeDialogFragment instance) {
    RoleChangeDialogFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PeopleInviteFragment injectPeopleInviteFragment(PeopleInviteFragment instance) {
    PeopleInviteFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    PeopleInviteFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    PeopleInviteFragment_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    PeopleInviteFragment_MembersInjector.injectMContextProvider(instance, contextProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private RoleSelectDialogFragment injectRoleSelectDialogFragment(
      RoleSelectDialogFragment instance) {
    RoleSelectDialogFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    RoleSelectDialogFragment_MembersInjector.injectMContextProvider(instance, contextProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PeopleInviteDialogFragment injectPeopleInviteDialogFragment(
      PeopleInviteDialogFragment instance) {
    PeopleInviteDialogFragment_MembersInjector.injectContextProvider(instance, contextProvider.get());
    PeopleInviteDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaBrowserActivity injectMediaBrowserActivity(MediaBrowserActivity instance) {
    MediaBrowserActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MediaBrowserActivity_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    MediaBrowserActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    MediaBrowserActivity_MembersInjector.injectMUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    MediaBrowserActivity_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    MediaBrowserActivity_MembersInjector.injectMMediaPickerLauncher(instance, mediaPickerLauncher());
    MediaBrowserActivity_MembersInjector.injectMMediaUtilsWrapper(instance, mediaUtilsWrapperProvider.get());
    MediaBrowserActivity_MembersInjector.injectMQuickStartRepository(instance, quickStartRepositoryProvider.get());
    MediaBrowserActivity_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaGridFragment injectMediaGridFragment(MediaGridFragment instance) {
    MediaGridFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MediaGridFragment_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    MediaGridFragment_MembersInjector.injectMQuickStartRepository(instance, quickStartRepositoryProvider.get());
    MediaGridFragment_MembersInjector.injectMQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    MediaGridFragment_MembersInjector.injectMSnackbarSequencer(instance, snackbarSequencerProvider.get());
    MediaGridFragment_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaPreviewActivity injectMediaPreviewActivity(MediaPreviewActivity instance) {
    MediaPreviewActivity_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaPreviewFragment injectMediaPreviewFragment(MediaPreviewFragment instance) {
    MediaPreviewFragment_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    MediaPreviewFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    MediaPreviewFragment_MembersInjector.injectMAuthenticationUtils(instance, authenticationUtilsProvider.get());
    MediaPreviewFragment_MembersInjector.injectMExoPlayerUtils(instance, exoPlayerUtilsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaSettingsActivity injectMediaSettingsActivity(MediaSettingsActivity instance) {
    MediaSettingsActivity_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    MediaSettingsActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MediaSettingsActivity_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    MediaSettingsActivity_MembersInjector.injectMAuthenticationUtils(instance, authenticationUtilsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PhotoPickerActivity injectPhotoPickerActivity(PhotoPickerActivity instance) {
    PhotoPickerActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    PhotoPickerActivity_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    PhotoPickerActivity_MembersInjector.injectMFeaturedImageHelper(instance, featuredImageHelperProvider.get());
    PhotoPickerActivity_MembersInjector.injectMImageEditorTracker(instance, imageEditorTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StockMediaPickerActivity injectStockMediaPickerActivity(
      StockMediaPickerActivity instance) {
    StockMediaPickerActivity_MembersInjector.injectMStockMediaStore(instance, stockMediaStoreProvider.get());
    StockMediaPickerActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    StockMediaPickerActivity_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SiteSettingsTagListActivity injectSiteSettingsTagListActivity(
      SiteSettingsTagListActivity instance) {
    SiteSettingsTagListActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    SiteSettingsTagListActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    SiteSettingsTagListActivity_MembersInjector.injectMTaxonomyStore(instance, taxonomyStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeListActivity injectPublicizeListActivity(PublicizeListActivity instance) {
    PublicizeListActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeWebViewFragment injectPublicizeWebViewFragment(
      PublicizeWebViewFragment instance) {
    PublicizeWebViewFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeDetailFragment injectPublicizeDetailFragment(PublicizeDetailFragment instance) {
    PublicizeDetailFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeListFragment injectPublicizeListFragment(PublicizeListFragment instance) {
    PublicizeListFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    PublicizeListFragment_MembersInjector.injectMQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    PublicizeListFragment_MembersInjector.injectMQuickStartRepository(instance, quickStartRepositoryProvider.get());
    PublicizeListFragment_MembersInjector.injectMSnackbarSequencer(instance, snackbarSequencerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeButtonPrefsFragment injectPublicizeButtonPrefsFragment(
      PublicizeButtonPrefsFragment instance) {
    PublicizeButtonPrefsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EditPostActivity injectEditPostActivity(EditPostActivity instance) {
    EditPostActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    EditPostActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    EditPostActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    EditPostActivity_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    EditPostActivity_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    EditPostActivity_MembersInjector.injectMUploadStore(instance, uploadStoreProvider.get());
    EditPostActivity_MembersInjector.injectMEditorThemeStore(instance, editorThemeStoreProvider.get());
    EditPostActivity_MembersInjector.injectMImageLoader(instance, fluxCImageLoader());
    EditPostActivity_MembersInjector.injectMShortcutUtils(instance, shortcutUtils());
    EditPostActivity_MembersInjector.injectMQuickStartStore(instance, quickStartStoreProvider.get());
    EditPostActivity_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    EditPostActivity_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    EditPostActivity_MembersInjector.injectMRemotePreviewLogicHelper(instance, remotePreviewLogicHelperProvider.get());
    EditPostActivity_MembersInjector.injectMProgressDialogHelper(instance, progressDialogHelperProvider.get());
    EditPostActivity_MembersInjector.injectMFeaturedImageHelper(instance, featuredImageHelperProvider.get());
    EditPostActivity_MembersInjector.injectMReactNativeRequestHandler(instance, reactNativeRequestHandler());
    EditPostActivity_MembersInjector.injectMEditorMedia(instance, editorMedia());
    EditPostActivity_MembersInjector.injectMLocaleManagerWrapper(instance, localeManagerWrapper());
    EditPostActivity_MembersInjector.injectMEditPostRepository(instance, editPostRepository());
    EditPostActivity_MembersInjector.injectMPostUtils(instance, postUtilsWrapperProvider.get());
    EditPostActivity_MembersInjector.injectMEditorTracker(instance, editorTrackerProvider.get());
    EditPostActivity_MembersInjector.injectMUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    EditPostActivity_MembersInjector.injectMEditorActionsProvider(instance, editorActionsProvider.get());
    EditPostActivity_MembersInjector.injectMDateTimeUtils(instance, dateTimeUtilsWrapper());
    EditPostActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    EditPostActivity_MembersInjector.injectMReaderUtilsWrapper(instance, readerUtilsWrapperProvider.get());
    EditPostActivity_MembersInjector.injectMPrivateAtomicCookie(instance, privateAtomicCookieProvider.get());
    EditPostActivity_MembersInjector.injectMImageEditorTracker(instance, imageEditorTrackerProvider.get());
    EditPostActivity_MembersInjector.injectMReblogUtils(instance, reblogUtilsProvider.get());
    EditPostActivity_MembersInjector.injectMAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    EditPostActivity_MembersInjector.injectMPublishPostImmediatelyUseCase(instance, publishPostImmediatelyUseCase());
    EditPostActivity_MembersInjector.injectMXpostsCapabilityChecker(instance, xPostsCapabilityChecker());
    EditPostActivity_MembersInjector.injectMCrashLogging(instance, provideCrashLoggingProvider.get());
    EditPostActivity_MembersInjector.injectMMediaPickerLauncher(instance, mediaPickerLauncher());
    EditPostActivity_MembersInjector.injectMStoryRepositoryWrapper(instance, new StoryRepositoryWrapper());
    EditPostActivity_MembersInjector.injectMLoadStoryFromStoriesPrefsUseCase(instance, loadStoryFromStoriesPrefsUseCaseProvider.get());
    EditPostActivity_MembersInjector.injectMStoriesPrefs(instance, storiesPrefsProvider.get());
    EditPostActivity_MembersInjector.injectMStoriesEventListener(instance, storiesEventListener());
    EditPostActivity_MembersInjector.injectMUpdateFeaturedImageUseCase(instance, new UpdateFeaturedImageUseCase());
    EditPostActivity_MembersInjector.injectMGlobalStyleSupportFeatureConfig(instance, globalStyleSupportFeatureConfig());
    EditPostActivity_MembersInjector.injectMZendeskHelper(instance, provideZendeskHelperProvider.get());
    EditPostActivity_MembersInjector.injectMBloggingPromptsStore(instance, bloggingPromptsStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EditPostSettingsFragment injectEditPostSettingsFragment(
      EditPostSettingsFragment instance) {
    EditPostSettingsFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    EditPostSettingsFragment_MembersInjector.injectMTaxonomyStore(instance, taxonomyStoreProvider.get());
    EditPostSettingsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    EditPostSettingsFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    EditPostSettingsFragment_MembersInjector.injectMFeaturedImageHelper(instance, featuredImageHelperProvider.get());
    EditPostSettingsFragment_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    EditPostSettingsFragment_MembersInjector.injectMPostSettingsUtils(instance, postSettingsUtils());
    EditPostSettingsFragment_MembersInjector.injectMAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    EditPostSettingsFragment_MembersInjector.injectMUpdatePostStatusUseCase(instance, updatePostStatusUseCase());
    EditPostSettingsFragment_MembersInjector.injectMMediaPickerLauncher(instance, mediaPickerLauncher());
    EditPostSettingsFragment_MembersInjector.injectMUpdateFeaturedImageUseCase(instance, new UpdateFeaturedImageUseCase());
    EditPostSettingsFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostsListActivity injectPostsListActivity(PostsListActivity instance) {
    PostsListActivity_MembersInjector.injectSiteStore(instance, siteStoreProvider.get());
    PostsListActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PostsListActivity_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    PostsListActivity_MembersInjector.injectRemotePreviewLogicHelper(instance, remotePreviewLogicHelperProvider.get());
    PostsListActivity_MembersInjector.injectPreviewStateHelper(instance, previewStateHelperProvider.get());
    PostsListActivity_MembersInjector.injectProgressDialogHelper(instance, progressDialogHelperProvider.get());
    PostsListActivity_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    PostsListActivity_MembersInjector.injectUploadActionUseCase(instance, uploadActionUseCaseProvider.get());
    PostsListActivity_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    PostsListActivity_MembersInjector.injectUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    PostsListActivity_MembersInjector.injectSystemNotificationTracker(instance, systemNotificationsTracker());
    PostsListActivity_MembersInjector.injectEditPostRepository(instance, editPostRepository());
    PostsListActivity_MembersInjector.injectMediaPickerLauncher(instance, mediaPickerLauncher());
    PostsListActivity_MembersInjector.injectStoriesMediaPickerResultHandler(instance, new StoriesMediaPickerResultHandler());
    PostsListActivity_MembersInjector.injectBloggingRemindersViewModel(instance, bloggingRemindersViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private PagesActivity injectPagesActivity(PagesActivity instance) {
    PagesActivity_MembersInjector.injectSystemNotificationTracker(instance, systemNotificationsTracker());
    return instance;
  }

  @CanIgnoreReturnValue
  private AuthorSelectionAdapter injectAuthorSelectionAdapter(AuthorSelectionAdapter instance) {
    AuthorSelectionAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    AuthorSelectionAdapter_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostListFragment injectPostListFragment(PostListFragment instance) {
    PostListFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    PostListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PostListFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private HistoryListFragment injectHistoryListFragment(HistoryListFragment instance) {
    HistoryListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private HistoryAdapter injectHistoryAdapter(HistoryAdapter instance) {
    HistoryAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private HistoryDetailContainerFragment injectHistoryDetailContainerFragment(
      HistoryDetailContainerFragment instance) {
    HistoryDetailContainerFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    HistoryDetailContainerFragment_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsListFragment injectNotificationsListFragment(
      NotificationsListFragment instance) {
    NotificationsListFragment_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsListFragmentPage injectNotificationsListFragmentPage(
      NotificationsListFragmentPage instance) {
    NotificationsListFragmentPage_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    NotificationsListFragmentPage_MembersInjector.injectGcmMessageHandler(instance, gCMMessageHandlerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsSettingsFragment injectNotificationsSettingsFragment(
      NotificationsSettingsFragment instance) {
    NotificationsSettingsFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    NotificationsSettingsFragment_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    NotificationsSettingsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    NotificationsSettingsFragment_MembersInjector.injectMFollowedBlogsProvider(instance, followedBlogsProvider());
    NotificationsSettingsFragment_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
    NotificationsSettingsFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    NotificationsSettingsFragment_MembersInjector.injectMBloggingRemindersFeatureConfig(instance, bloggingRemindersFeatureConfig());
    NotificationsSettingsFragment_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsDetailActivity injectNotificationsDetailActivity(
      NotificationsDetailActivity instance) {
    NotificationsDetailActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    NotificationsDetailActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    NotificationsDetailActivity_MembersInjector.injectMGCMMessageHandler(instance, gCMMessageHandlerProvider.get());
    NotificationsDetailActivity_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    NotificationsDetailActivity_MembersInjector.injectMLikesEnhancementsFeatureConfig(instance, likesEnhancementsFeatureConfig());
    NotificationsDetailActivity_MembersInjector.injectMListScenarioUtils(instance, listScenarioUtilsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsProcessingService injectNotificationsProcessingService(
      NotificationsProcessingService instance) {
    NotificationsProcessingService_MembersInjector.injectMCommentsStoreAdapter(instance, commentsStoreAdapterProvider.get());
    NotificationsProcessingService_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    NotificationsProcessingService_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    NotificationsProcessingService_MembersInjector.injectMGCMMessageHandler(instance, gCMMessageHandlerProvider.get());
    NotificationsProcessingService_MembersInjector.injectMQuickStartTracker(instance, quickStartTracker());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsPendingDraftsReceiver injectNotificationsPendingDraftsReceiver(
      NotificationsPendingDraftsReceiver instance) {
    NotificationsPendingDraftsReceiver_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    NotificationsPendingDraftsReceiver_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    NotificationsPendingDraftsReceiver_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    NotificationsPendingDraftsReceiver_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotificationsDetailListFragment injectNotificationsDetailListFragment(
      NotificationsDetailListFragment instance) {
    NotificationsDetailListFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    NotificationsDetailListFragment_MembersInjector.injectNotificationsUtilsWrapper(instance, notificationsUtilsWrapperProvider.get());
    NotificationsDetailListFragment_MembersInjector.injectListScenarioUtils(instance, listScenarioUtilsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderCommentListActivity injectReaderCommentListActivity(
      ReaderCommentListActivity instance) {
    ReaderCommentListActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderCommentListActivity_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    ReaderCommentListActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    ReaderCommentListActivity_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    ReaderCommentListActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderSubsActivity injectReaderSubsActivity(ReaderSubsActivity instance) {
    ReaderSubsActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderSubsActivity_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderUpdateLogic injectReaderUpdateLogic(ReaderUpdateLogic instance) {
    ReaderUpdateLogic_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderUpdateLogic_MembersInjector.injectMClientUtilsProvider(instance, new TagUpdateClientUtilsProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderPostDetailFragment injectReaderPostDetailFragment(
      ReaderPostDetailFragment instance) {
    ReaderPostDetailFragment_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectSiteStore(instance, siteStoreProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectReaderFileDownloadManager(instance, readerFileDownloadManager());
    ReaderPostDetailFragment_MembersInjector.injectPrivateAtomicCookie(instance, privateAtomicCookieProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectReaderCssProvider(instance, readerCssProvider());
    ReaderPostDetailFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectPostDetailsHeaderViewUiStateBuilder(instance, readerPostDetailsHeaderViewUiStateBuilderProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectReaderUtilsWrapper(instance, readerUtilsWrapperProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ReaderPostDetailFragment_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectLikesEnhancementsFeatureConfig(instance, likesEnhancementsFeatureConfig());
    ReaderPostDetailFragment_MembersInjector.injectContextProvider(instance, contextProvider.get());
    ReaderPostDetailFragment_MembersInjector.injectCommentsSnippetFeatureConfig(instance, commentsSnippetFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderPostListFragment injectReaderPostListFragment(ReaderPostListFragment instance) {
    ReaderPostListFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    ReaderPostListFragment_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderPostListFragment_MembersInjector.injectMReaderStore(instance, readerStoreProvider.get());
    ReaderPostListFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    ReaderPostListFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    ReaderPostListFragment_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    ReaderPostListFragment_MembersInjector.injectMTagUpdateClientUtilsProvider(instance, new TagUpdateClientUtilsProvider());
    ReaderPostListFragment_MembersInjector.injectMQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    ReaderPostListFragment_MembersInjector.injectMSeenUnseenWithCounterFeatureConfig(instance, seenUnseenWithCounterFeatureConfig());
    ReaderPostListFragment_MembersInjector.injectMQuickStartRepository(instance, quickStartRepositoryProvider.get());
    ReaderPostListFragment_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    ReaderPostListFragment_MembersInjector.injectMSnackbarSequencer(instance, snackbarSequencerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderCommentAdapter injectReaderCommentAdapter(ReaderCommentAdapter instance) {
    ReaderCommentAdapter_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderCommentAdapter_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    ReaderCommentAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    ReaderCommentAdapter_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    ReaderCommentAdapter_MembersInjector.injectMThreadedCommentsUtils(instance, threadedCommentsUtilsProvider.get());
    ReaderCommentAdapter_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    ReaderCommentAdapter_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    ReaderCommentAdapter_MembersInjector.injectMReaderCommentsModerationFeatureConfig(instance, readerCommentsModerationFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderPostAdapter injectReaderPostAdapter(ReaderPostAdapter instance) {
    ReaderPostAdapter_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderPostAdapter_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    ReaderPostAdapter_MembersInjector.injectMReaderPostUiStateBuilder(instance, readerPostUiStateBuilderProvider.get());
    ReaderPostAdapter_MembersInjector.injectMReaderPostMoreButtonUiStateBuilder(instance, readerPostMoreButtonUiStateBuilderProvider.get());
    ReaderPostAdapter_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderTagAdapter injectReaderTagAdapter(ReaderTagAdapter instance) {
    ReaderTagAdapter_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PlansListFragment injectPlansListFragment(PlansListFragment instance) {
    PlansListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderSiteHeaderView injectReaderSiteHeaderView(ReaderSiteHeaderView instance) {
    ReaderSiteHeaderView_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReaderSiteHeaderView_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    ReaderSiteHeaderView_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderSiteSearchResultView injectReaderSiteSearchResultView(
      ReaderSiteSearchResultView instance) {
    ReaderSiteSearchResultView_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderTagHeaderView injectReaderTagHeaderView(ReaderTagHeaderView instance) {
    ReaderTagHeaderView_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderPostDetailHeaderView injectReaderPostDetailHeaderView(
      ReaderPostDetailHeaderView instance) {
    ReaderPostDetailHeaderView_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ReaderPostDetailHeaderView_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderExpandableTagsView injectReaderExpandableTagsView(
      ReaderExpandableTagsView instance) {
    ReaderExpandableTagsView_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ReaderExpandableTagsView_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderLikingUsersView injectReaderLikingUsersView(ReaderLikingUsersView instance) {
    ReaderLikingUsersView_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderWebView injectReaderWebView(ReaderWebView instance) {
    ReaderWebView_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderSimplePostContainerView injectReaderSimplePostContainerView(
      ReaderSimplePostContainerView instance) {
    ReaderSimplePostContainerView_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ReaderSimplePostContainerView_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ReaderSimplePostContainerView_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderPostPagerActivity injectReaderPostPagerActivity(ReaderPostPagerActivity instance) {
    ReaderPostPagerActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMAnalyticsUtilsWrapper(instance, analyticsUtilsWrapperProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMReaderPostTableWrapper(instance, readerPostTableWrapperProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMUploadActionUseCase(instance, uploadActionUseCaseProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMPostSeenStatusWrapper(instance, readerPostSeenStatusWrapperProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMSeenUnseenWithCounterFeatureConfig(instance, seenUnseenWithCounterFeatureConfig());
    ReaderPostPagerActivity_MembersInjector.injectMUrlUtilsWrapper(instance, urlUtilsWrapperProvider.get());
    ReaderPostPagerActivity_MembersInjector.injectMDeepLinkTrackingUtils(instance, deepLinkTrackingUtils());
    ReaderPostPagerActivity_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderPostListActivity injectReaderPostListActivity(ReaderPostListActivity instance) {
    ReaderPostListActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    ReaderPostListActivity_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    ReaderPostListActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    ReaderPostListActivity_MembersInjector.injectMUploadActionUseCase(instance, uploadActionUseCaseProvider.get());
    ReaderPostListActivity_MembersInjector.injectMUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    ReaderPostListActivity_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    ReaderPostListActivity_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderBlogFragment injectReaderBlogFragment(ReaderBlogFragment instance) {
    ReaderBlogFragment_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderBlogAdapter injectReaderBlogAdapter(ReaderBlogAdapter instance) {
    ReaderBlogAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    ReaderBlogAdapter_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReleaseNotesActivity injectReleaseNotesActivity(ReleaseNotesActivity instance) {
    ReleaseNotesActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    ReleaseNotesActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    ReleaseNotesActivity_MembersInjector.injectMZendeskHelper(instance, provideZendeskHelperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private WPWebViewActivity injectWPWebViewActivity(WPWebViewActivity instance) {
    WPWebViewActivity_MembersInjector.injectMAccountStore(instance, accountStoreProvider.get());
    WPWebViewActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    WPWebViewActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    WPWebViewActivity_MembersInjector.injectMUiHelpers(instance, new UiHelpers());
    WPWebViewActivity_MembersInjector.injectMPrivateAtomicCookie(instance, privateAtomicCookieProvider.get());
    WPWebViewActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    WPWebViewActivity_MembersInjector.injectMDisplayUtilsWrapper(instance, displayUtilsWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private WPWebViewClient injectWPWebViewClient(WPWebViewClient instance) {
    WPWebViewClient_MembersInjector.injectMMemorizingTrustManager(instance, provideMemorizingTrustManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ThemeBrowserActivity injectThemeBrowserActivity(ThemeBrowserActivity instance) {
    ThemeBrowserActivity_MembersInjector.injectMThemeStore(instance, themeStoreProvider.get());
    ThemeBrowserActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private NotesAdapter injectNotesAdapter(NotesAdapter instance) {
    NotesAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    NotesAdapter_MembersInjector.injectMNotificationsUtilsWrapper(instance, notificationsUtilsWrapperProvider.get());
    NotesAdapter_MembersInjector.injectMNoticonUtils(instance, new NoticonUtils());
    return instance;
  }

  @CanIgnoreReturnValue
  private ThemeBrowserFragment injectThemeBrowserFragment(ThemeBrowserFragment instance) {
    ThemeBrowserFragment_MembersInjector.injectMThemeStore(instance, themeStoreProvider.get());
    ThemeBrowserFragment_MembersInjector.injectMQuickStartStore(instance, quickStartStoreProvider.get());
    ThemeBrowserFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    ThemeBrowserFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    ThemeBrowserFragment_MembersInjector.injectMQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaDeleteService injectMediaDeleteService(MediaDeleteService instance) {
    MediaDeleteService_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    MediaDeleteService_MembersInjector.injectMMediaStore(instance, mediaStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SelectCategoriesActivity injectSelectCategoriesActivity(
      SelectCategoriesActivity instance) {
    SelectCategoriesActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    SelectCategoriesActivity_MembersInjector.injectMPostStore(instance, postStoreProvider.get());
    SelectCategoriesActivity_MembersInjector.injectMTaxonomyStore(instance, taxonomyStoreProvider.get());
    SelectCategoriesActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderUserAdapter injectReaderUserAdapter(ReaderUserAdapter instance) {
    ReaderUserAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    ReaderUserAdapter_MembersInjector.injectMReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AddCategoryFragment injectAddCategoryFragment(AddCategoryFragment instance) {
    AddCategoryFragment_MembersInjector.injectMTaxonomyStore(instance, taxonomyStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PluginBrowserActivity injectPluginBrowserActivity(PluginBrowserActivity instance) {
    PluginBrowserActivity_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    PluginBrowserActivity_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ActivityLogListFragment injectActivityLogListFragment(ActivityLogListFragment instance) {
    ActivityLogListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ActivityLogListFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private ActivityLogDetailFragment injectActivityLogDetailFragment(
      ActivityLogDetailFragment instance) {
    ActivityLogDetailFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ActivityLogDetailFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ActivityLogDetailFragment_MembersInjector.injectNotificationsUtilsWrapper(instance, notificationsUtilsWrapperProvider.get());
    ActivityLogDetailFragment_MembersInjector.injectFormattableContentClickHandler(instance, formattableContentClickHandler());
    ActivityLogDetailFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private ScanFragment injectScanFragment(ScanFragment instance) {
    ScanFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ScanFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ScanFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ScanHistoryFragment injectScanHistoryFragment(ScanHistoryFragment instance) {
    ScanHistoryFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ScanHistoryFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ScanHistoryFragment_MembersInjector.injectLocaleManagerWrapper(instance, localeManagerWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private ScanHistoryListFragment injectScanHistoryListFragment(ScanHistoryListFragment instance) {
    ScanHistoryListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ScanHistoryListFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ScanHistoryListFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private ThreatDetailsFragment injectThreatDetailsFragment(ThreatDetailsFragment instance) {
    ThreatDetailsFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ThreatDetailsFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ThreatDetailsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PluginListFragment injectPluginListFragment(PluginListFragment instance) {
    PluginListFragment_MembersInjector.injectMViewModelFactory(instance, viewModelFactoryProvider.get());
    PluginListFragment_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PluginDetailActivity injectPluginDetailActivity(PluginDetailActivity instance) {
    PluginDetailActivity_MembersInjector.injectMPluginStore(instance, pluginStoreProvider.get());
    PluginDetailActivity_MembersInjector.injectMSiteStore(instance, siteStoreProvider.get());
    PluginDetailActivity_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    PluginDetailActivity_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SuggestionAdapter injectSuggestionAdapter(SuggestionAdapter instance) {
    SuggestionAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private WordPressGlideModule injectWordPressGlideModule(WordPressGlideModule instance) {
    WordPressGlideModule_MembersInjector.injectRequestQueue(instance, provideRequestQueueCustomSSLProvider.get());
    WordPressGlideModule_MembersInjector.injectNoRedirectsRequestQueue(instance, provideNoRedirectsRequestQueueProvider.get());
    WordPressGlideModule_MembersInjector.injectGlideRequestFactory(instance, glideRequestFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private QuickStartFullScreenDialogFragment injectQuickStartFullScreenDialogFragment(
      QuickStartFullScreenDialogFragment instance) {
    QuickStartFullScreenDialogFragment_MembersInjector.injectQuickStartTracker(instance, quickStartTracker());
    QuickStartFullScreenDialogFragment_MembersInjector.injectQuickStartStore(instance, quickStartStoreProvider.get());
    QuickStartFullScreenDialogFragment_MembersInjector.injectSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    QuickStartFullScreenDialogFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    QuickStartFullScreenDialogFragment_MembersInjector.injectQuickStartCardBuilder(instance, new QuickStartCardBuilder());
    QuickStartFullScreenDialogFragment_MembersInjector.injectDisplayUtilsWrapper(instance, displayUtilsWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private QuickStartReminderReceiver injectQuickStartReminderReceiver(
      QuickStartReminderReceiver instance) {
    QuickStartReminderReceiver_MembersInjector.injectMQuickStartStore(instance, quickStartStoreProvider.get());
    QuickStartReminderReceiver_MembersInjector.injectMSystemNotificationsTracker(instance, systemNotificationsTracker());
    QuickStartReminderReceiver_MembersInjector.injectMSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    QuickStartReminderReceiver_MembersInjector.injectMQuickStartRepository(instance, quickStartRepositoryProvider.get());
    QuickStartReminderReceiver_MembersInjector.injectMQuickStartTracker(instance, quickStartTracker());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaGridAdapter injectMediaGridAdapter(MediaGridAdapter instance) {
    MediaGridAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    MediaGridAdapter_MembersInjector.injectMAuthenticationUtils(instance, authenticationUtilsProvider.get());
    MediaGridAdapter_MembersInjector.injectMAppScope(instance, ThreadModule_ProvideApplicationScopeFactory.provideApplicationScope(threadModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private PagesFragment injectPagesFragment(PagesFragment instance) {
    PagesFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PagesFragment_MembersInjector.injectPostStore(instance, postStoreProvider.get());
    PagesFragment_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    PagesFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    PagesFragment_MembersInjector.injectRemotePreviewLogicHelper(instance, remotePreviewLogicHelperProvider.get());
    PagesFragment_MembersInjector.injectPreviewStateHelper(instance, previewStateHelperProvider.get());
    PagesFragment_MembersInjector.injectProgressDialogHelper(instance, progressDialogHelperProvider.get());
    PagesFragment_MembersInjector.injectUploadActionUseCase(instance, uploadActionUseCaseProvider.get());
    PagesFragment_MembersInjector.injectUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PageListFragment injectPageListFragment(PageListFragment instance) {
    PageListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PageListFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    PageListFragment_MembersInjector.injectUiHelper(instance, new UiHelpers());
    PageListFragment_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    PageListFragment_MembersInjector.injectQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    PageListFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SearchListFragment injectSearchListFragment(SearchListFragment instance) {
    SearchListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    SearchListFragment_MembersInjector.injectUiHelper(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private PageParentFragment injectPageParentFragment(PageParentFragment instance) {
    PageParentFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private WPCustomImageGetter injectWPCustomImageGetter(WPCustomImageGetter instance) {
    WPCustomImageGetter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeAccountChooserListAdapter injectPublicizeAccountChooserListAdapter(
      PublicizeAccountChooserListAdapter instance) {
    PublicizeAccountChooserListAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeConnectionAdapter injectPublicizeConnectionAdapter(
      PublicizeConnectionAdapter instance) {
    PublicizeConnectionAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublicizeServiceAdapter injectPublicizeServiceAdapter(PublicizeServiceAdapter instance) {
    PublicizeServiceAdapter_MembersInjector.injectMImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private JetpackRemoteInstallFragment injectJetpackRemoteInstallFragment(
      JetpackRemoteInstallFragment instance) {
    JetpackRemoteInstallFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PlansListAdapter injectPlansListAdapter(PlansListAdapter instance) {
    PlansListAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PlanDetailsFragment injectPlanDetailsFragment(PlanDetailsFragment instance) {
    PlanDetailsFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DomainsDashboardFragment injectDomainsDashboardFragment(
      DomainsDashboardFragment instance) {
    DomainsDashboardFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    DomainsDashboardFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private DomainSuggestionsFragment injectDomainSuggestionsFragment(
      DomainSuggestionsFragment instance) {
    DomainSuggestionsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DomainRegistrationDetailsFragment injectDomainRegistrationDetailsFragment(
      DomainRegistrationDetailsFragment instance) {
    DomainRegistrationDetailsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StatsViewsWidget injectStatsViewsWidget(StatsViewsWidget instance) {
    StatsViewsWidget_MembersInjector.injectViewsWidgetUpdater(instance, viewsWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private StatsAllTimeWidget injectStatsAllTimeWidget(StatsAllTimeWidget instance) {
    StatsAllTimeWidget_MembersInjector.injectAllTimeWidgetUpdater(instance, allTimeWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private StatsTodayWidget injectStatsTodayWidget(StatsTodayWidget instance) {
    StatsTodayWidget_MembersInjector.injectTodayWidgetUpdater(instance, todayWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private StatsMinifiedWidget injectStatsMinifiedWidget(StatsMinifiedWidget instance) {
    StatsMinifiedWidget_MembersInjector.injectMinifiedWidgetUpdater(instance, minifiedWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private ViewsWidgetListProvider injectViewsWidgetListProvider(ViewsWidgetListProvider instance) {
    ViewsWidgetListProvider_MembersInjector.injectViewModel(instance, viewsWidgetListViewModel());
    ViewsWidgetListProvider_MembersInjector.injectViewsWidgetUpdater(instance, viewsWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private AllTimeWidgetListProvider injectAllTimeWidgetListProvider(
      AllTimeWidgetListProvider instance) {
    AllTimeWidgetListProvider_MembersInjector.injectViewModel(instance, allTimeWidgetListViewModel());
    AllTimeWidgetListProvider_MembersInjector.injectWidgetUpdated(instance, allTimeWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private AllTimeWidgetBlockListProviderFactory injectAllTimeWidgetBlockListProviderFactory(
      AllTimeWidgetBlockListProviderFactory instance) {
    AllTimeWidgetBlockListProviderFactory_MembersInjector.injectViewModel(instance, allTimeWidgetBlockListViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private TodayWidgetListProvider injectTodayWidgetListProvider(TodayWidgetListProvider instance) {
    TodayWidgetListProvider_MembersInjector.injectViewModel(instance, todayWidgetListViewModel());
    TodayWidgetListProvider_MembersInjector.injectWidgetUpdater(instance, todayWidgetUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private TodayWidgetBlockListProviderFactory injectTodayWidgetBlockListProviderFactory(
      TodayWidgetBlockListProviderFactory instance) {
    TodayWidgetBlockListProviderFactory_MembersInjector.injectViewModel(instance, todayWidgetBlockListViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private StatsListFragment injectStatsListFragment(StatsListFragment instance) {
    StatsListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    StatsListFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    StatsListFragment_MembersInjector.injectStatsDateFormatter(instance, statsDateFormatter());
    StatsListFragment_MembersInjector.injectNavigator(instance, statsNavigatorProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DomainRegistrationActivity injectDomainRegistrationActivity(
      DomainRegistrationActivity instance) {
    DomainRegistrationActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EditPostPublishSettingsFragment injectEditPostPublishSettingsFragment(
      EditPostPublishSettingsFragment instance) {
    PublishSettingsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PublishSettingsFragment_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostDatePickerDialogFragment injectPostDatePickerDialogFragment(
      PostDatePickerDialogFragment instance) {
    PostDatePickerDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostTimePickerDialogFragment injectPostTimePickerDialogFragment(
      PostTimePickerDialogFragment instance) {
    PostTimePickerDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostNotificationScheduleTimeDialogFragment injectPostNotificationScheduleTimeDialogFragment(
      PostNotificationScheduleTimeDialogFragment instance) {
    PostNotificationScheduleTimeDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PublishNotificationReceiver injectPublishNotificationReceiver(
      PublishNotificationReceiver instance) {
    PublishNotificationReceiver_MembersInjector.injectPublishNotificationReceiverViewModel(instance, publishNotificationReceiverViewModel());
    PublishNotificationReceiver_MembersInjector.injectSystemNotificationsTracker(instance, systemNotificationsTracker());
    return instance;
  }

  @CanIgnoreReturnValue
  private MainBottomSheetFragment injectMainBottomSheetFragment(MainBottomSheetFragment instance) {
    MainBottomSheetFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ModalLayoutPickerFragment injectModalLayoutPickerFragment(
      ModalLayoutPickerFragment instance) {
    ModalLayoutPickerFragment_MembersInjector.injectUiHelper(instance, new UiHelpers());
    ModalLayoutPickerFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ModalLayoutPickerFragment_MembersInjector.injectThumbDimensionProvider(instance, modalLayoutPickerDimensionProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private SubfilterBottomSheetFragment injectSubfilterBottomSheetFragment(
      SubfilterBottomSheetFragment instance) {
    SubfilterBottomSheetFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AddContentAdapter injectAddContentAdapter(AddContentAdapter instance) {
    AddContentAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    AddContentAdapter_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    AddContentAdapter_MembersInjector.injectHtmlCompatWrapper(instance, new HtmlCompatWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private LayoutsAdapter injectLayoutsAdapter(LayoutsAdapter instance) {
    LayoutsAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PageParentSearchFragment injectPageParentSearchFragment(
      PageParentSearchFragment instance) {
    PageParentSearchFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingBottomSheetFragment injectPrepublishingBottomSheetFragment(
      PrepublishingBottomSheetFragment instance) {
    PrepublishingBottomSheetFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PrepublishingBottomSheetFragment_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingHomeFragment injectPrepublishingHomeFragment(
      PrepublishingHomeFragment instance) {
    PrepublishingHomeFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    PrepublishingHomeFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    PrepublishingHomeFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingHomeAdapter injectPrepublishingHomeAdapter(
      PrepublishingHomeAdapter instance) {
    PrepublishingHomeAdapter_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    PrepublishingHomeAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingTagsFragment injectPrepublishingTagsFragment(
      PrepublishingTagsFragment instance) {
    TagsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    TagsFragment_MembersInjector.injectMTaxonomyStore(instance, taxonomyStoreProvider.get());
    PrepublishingTagsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PrepublishingTagsFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    PrepublishingTagsFragment_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostSettingsTagsFragment injectPostSettingsTagsFragment(
      PostSettingsTagsFragment instance) {
    TagsFragment_MembersInjector.injectMDispatcher(instance, dispatcherProvider.get());
    TagsFragment_MembersInjector.injectMTaxonomyStore(instance, taxonomyStoreProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingPublishSettingsFragment injectPrepublishingPublishSettingsFragment(
      PrepublishingPublishSettingsFragment instance) {
    PublishSettingsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PublishSettingsFragment_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    PrepublishingPublishSettingsFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private FeatureAnnouncementDialogFragment injectFeatureAnnouncementDialogFragment(
      FeatureAnnouncementDialogFragment instance) {
    FeatureAnnouncementDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private FeatureAnnouncementListAdapter injectFeatureAnnouncementListAdapter(
      FeatureAnnouncementListAdapter instance) {
    FeatureAnnouncementListAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    FeatureAnnouncementListAdapter_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StoryComposerActivity injectStoryComposerActivity(StoryComposerActivity instance) {
    StoryComposerActivity_MembersInjector.injectStoryEditorMedia(instance, storyEditorMedia());
    StoryComposerActivity_MembersInjector.injectProgressDialogHelper(instance, progressDialogHelperProvider.get());
    StoryComposerActivity_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    StoryComposerActivity_MembersInjector.injectPostStore(instance, postStoreProvider.get());
    StoryComposerActivity_MembersInjector.injectAuthenticationUtils(instance, authenticationUtilsProvider.get());
    StoryComposerActivity_MembersInjector.injectEditPostRepository(instance, editPostRepository());
    StoryComposerActivity_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    StoryComposerActivity_MembersInjector.injectAnalyticsUtilsWrapper(instance, analyticsUtilsWrapperProvider.get());
    StoryComposerActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    StoryComposerActivity_MembersInjector.injectMediaPickerLauncher(instance, mediaPickerLauncher());
    StoryComposerActivity_MembersInjector.injectSaveStoryGutenbergBlockUseCase(instance, saveStoryGutenbergBlockUseCase());
    StoryComposerActivity_MembersInjector.injectMediaStore(instance, mediaStoreProvider.get());
    StoryComposerActivity_MembersInjector.injectFluxCUtilsWrapper(instance, fluxCUtilsWrapperProvider.get());
    StoryComposerActivity_MembersInjector.injectStoryRepositoryWrapper(instance, new StoryRepositoryWrapper());
    StoryComposerActivity_MembersInjector.injectStoriesPrefs(instance, storiesPrefsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private StoriesIntroDialogFragment injectStoriesIntroDialogFragment(
      StoriesIntroDialogFragment instance) {
    StoriesIntroDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    StoriesIntroDialogFragment_MembersInjector.injectMediaPickerLauncher(instance, mediaPickerLauncher());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderFragment injectReaderFragment(ReaderFragment instance) {
    ReaderFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ReaderFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ReaderFragment_MembersInjector.injectQuickStartUtilsWrapper(instance, quickStartUtilsWrapper());
    ReaderFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderDiscoverFragment injectReaderDiscoverFragment(ReaderDiscoverFragment instance) {
    ReaderDiscoverFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ReaderDiscoverFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ReaderDiscoverFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    ReaderDiscoverFragment_MembersInjector.injectReaderUtilsWrapper(instance, readerUtilsWrapperProvider.get());
    ReaderDiscoverFragment_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderSearchActivity injectReaderSearchActivity(ReaderSearchActivity instance) {
    ReaderSearchActivity_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderInterestsFragment injectReaderInterestsFragment(ReaderInterestsFragment instance) {
    ReaderInterestsFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    ReaderInterestsFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private HomepageSettingsDialog injectHomepageSettingsDialog(HomepageSettingsDialog instance) {
    HomepageSettingsDialog_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    HomepageSettingsDialog_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private AztecVideoLoader injectAztecVideoLoader(AztecVideoLoader instance) {
    AztecVideoLoader_MembersInjector.injectMAuthenticationUtils(instance, authenticationUtilsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PhotoPickerFragment injectPhotoPickerFragment(PhotoPickerFragment instance) {
    PhotoPickerFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    PhotoPickerFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginPrologueFragment injectLoginPrologueFragment(LoginPrologueFragment instance) {
    LoginPrologueFragment_MembersInjector.injectUnifiedLoginTracker(instance, unifiedLoginTrackerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderDiscoverLogic injectReaderDiscoverLogic(ReaderDiscoverLogic instance) {
    ReaderDiscoverLogic_MembersInjector.injectParseDiscoverCardsJsonUseCase(instance, parseDiscoverCardsJsonUseCaseProvider.get());
    ReaderDiscoverLogic_MembersInjector.injectAppPrefsWrapper(instance, appPrefsWrapperProvider.get());
    ReaderDiscoverLogic_MembersInjector.injectReaderTagTableWrapper(instance, readerTagTableWrapperProvider.get());
    ReaderDiscoverLogic_MembersInjector.injectGetFollowedTagsUseCase(instance, getFollowedTagsUseCase());
    ReaderDiscoverLogic_MembersInjector.injectReaderBlogTableWrapper(instance, readerBlogTableWrapper());
    ReaderDiscoverLogic_MembersInjector.injectGetDiscoverCardsUseCase(instance, getDiscoverCardsUseCaseProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PostListCreateMenuFragment injectPostListCreateMenuFragment(
      PostListCreateMenuFragment instance) {
    PostListCreateMenuFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderDiscoverJobService injectReaderDiscoverJobService(
      ReaderDiscoverJobService instance) {
    ReaderDiscoverJobService_MembersInjector.injectIoDispatcher(instance, ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private ReaderDiscoverService injectReaderDiscoverService(ReaderDiscoverService instance) {
    ReaderDiscoverService_MembersInjector.injectIoDispatcher(instance, ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(threadModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private SuggestionActivity injectSuggestionActivity(SuggestionActivity instance) {
    SuggestionActivity_MembersInjector.injectViewModel(instance, suggestionViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaPickerActivity injectMediaPickerActivity(MediaPickerActivity instance) {
    MediaPickerActivity_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    MediaPickerActivity_MembersInjector.injectMediaStore(instance, mediaStoreProvider.get());
    MediaPickerActivity_MembersInjector.injectFeaturedImageHelper(instance, featuredImageHelperProvider.get());
    MediaPickerActivity_MembersInjector.injectImageEditorTracker(instance, imageEditorTrackerProvider.get());
    MediaPickerActivity_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaPickerFragment injectMediaPickerFragment(MediaPickerFragment instance) {
    MediaPickerFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    MediaPickerFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    MediaPickerFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    MediaPickerFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaUploadReadyProcessor injectMediaUploadReadyProcessor(
      MediaUploadReadyProcessor instance) {
    MediaUploadReadyProcessor_MembersInjector.injectMSaveStoryGutenbergBlockUseCase(instance, saveStoryGutenbergBlockUseCase());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingCategoriesFragment injectPrepublishingCategoriesFragment(
      PrepublishingCategoriesFragment instance) {
    PrepublishingCategoriesFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PrepublishingCategoriesFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    PrepublishingCategoriesFragment_MembersInjector.injectDispatcher(instance, dispatcherProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PrepublishingAddCategoryFragment injectPrepublishingAddCategoryFragment(
      PrepublishingAddCategoryFragment instance) {
    PrepublishingAddCategoryFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    PrepublishingAddCategoryFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private ActivityLogTypeFilterFragment injectActivityLogTypeFilterFragment(
      ActivityLogTypeFilterFragment instance) {
    ActivityLogTypeFilterFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    ActivityLogTypeFilterFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private MySiteFragment injectMySiteFragment(MySiteFragment instance) {
    MySiteFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    MySiteFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    MySiteFragment_MembersInjector.injectMeGravatarLoader(instance, meGravatarLoaderProvider.get());
    MySiteFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private MySiteTabFragment injectMySiteTabFragment(MySiteTabFragment instance) {
    MySiteTabFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    MySiteTabFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    MySiteTabFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    MySiteTabFragment_MembersInjector.injectBloggingPromptsCardAnalyticsTracker(instance, bloggingPromptsCardAnalyticsTracker());
    MySiteTabFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    MySiteTabFragment_MembersInjector.injectMediaPickerLauncher(instance, mediaPickerLauncher());
    MySiteTabFragment_MembersInjector.injectUploadUtilsWrapper(instance, uploadUtilsWrapperProvider.get());
    MySiteTabFragment_MembersInjector.injectQuickStartUtils(instance, quickStartUtilsWrapper());
    MySiteTabFragment_MembersInjector.injectQuickStartTracker(instance, quickStartTracker());
    MySiteTabFragment_MembersInjector.injectHtmlCompatWrapper(instance, new HtmlCompatWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private DynamicCardMenuFragment injectDynamicCardMenuFragment(DynamicCardMenuFragment instance) {
    DynamicCardMenuFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    DynamicCardMenuFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private BackupDownloadFragment injectBackupDownloadFragment(BackupDownloadFragment instance) {
    BackupDownloadFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    BackupDownloadFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    BackupDownloadFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private RestoreFragment injectRestoreFragment(RestoreFragment instance) {
    RestoreFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    RestoreFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    RestoreFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EngagedPeopleListFragment injectEngagedPeopleListFragment(
      EngagedPeopleListFragment instance) {
    EngagedPeopleListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    EngagedPeopleListFragment_MembersInjector.injectResourceProvider(instance, resourceProvider());
    EngagedPeopleListFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    EngagedPeopleListFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    EngagedPeopleListFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    EngagedPeopleListFragment_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    EngagedPeopleListFragment_MembersInjector.injectAnalyticsUtilsWrapper(instance, analyticsUtilsWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SiteSettingsTimezoneBottomSheet injectSiteSettingsTimezoneBottomSheet(
      SiteSettingsTimezoneBottomSheet instance) {
    SiteSettingsTimezoneBottomSheet_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginSiteCheckErrorFragment injectLoginSiteCheckErrorFragment(
      LoginSiteCheckErrorFragment instance) {
    LoginSiteCheckErrorFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    LoginSiteCheckErrorFragment_MembersInjector.injectUnifiedLoginTracker(instance, unifiedLoginTrackerProvider.get());
    LoginSiteCheckErrorFragment_MembersInjector.injectHtmlMessageUtils(instance, htmlMessageUtils());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginNoSitesFragment injectLoginNoSitesFragment(LoginNoSitesFragment instance) {
    LoginNoSitesFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    LoginNoSitesFragment_MembersInjector.injectMeGravatarLoader(instance, meGravatarLoaderProvider.get());
    LoginNoSitesFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private UserProfileBottomSheetFragment injectUserProfileBottomSheetFragment(
      UserProfileBottomSheetFragment instance) {
    UserProfileBottomSheetFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    UserProfileBottomSheetFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    UserProfileBottomSheetFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    UserProfileBottomSheetFragment_MembersInjector.injectResourceProvider(instance, resourceProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private EngagedPeopleListActivity injectEngagedPeopleListActivity(
      EngagedPeopleListActivity instance) {
    EngagedPeopleListActivity_MembersInjector.injectAnalyticsUtilsWrapper(instance, analyticsUtilsWrapperProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private UnifiedCommentsActivity injectUnifiedCommentsActivity(UnifiedCommentsActivity instance) {
    UnifiedCommentsActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    UnifiedCommentsActivity_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    UnifiedCommentsActivity_MembersInjector.injectSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private UnifiedCommentListFragment injectUnifiedCommentListFragment(
      UnifiedCommentListFragment instance) {
    UnifiedCommentListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    UnifiedCommentListFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    UnifiedCommentListFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    UnifiedCommentListFragment_MembersInjector.injectSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    UnifiedCommentListFragment_MembersInjector.injectNetworkUtilsWrapper(instance, networkUtilsWrapperProvider.get());
    UnifiedCommentListFragment_MembersInjector.injectUnifiedCommentsDetailFeatureConfig(instance, unifiedCommentsDetailFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private UnifiedCommentListAdapter injectUnifiedCommentListAdapter(
      UnifiedCommentListAdapter instance) {
    UnifiedCommentListAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    UnifiedCommentListAdapter_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    UnifiedCommentListAdapter_MembersInjector.injectCommentListUiUtils(instance, new CommentListUiUtils());
    UnifiedCommentListAdapter_MembersInjector.injectResourceProvider(instance, resourceProvider());
    UnifiedCommentListAdapter_MembersInjector.injectGravatarUtilsWrapper(instance, gravatarUtilsWrapperProvider.get());
    UnifiedCommentListAdapter_MembersInjector.injectAnimationUtilsWrapper(instance, new AnimationUtilsWrapper());
    return instance;
  }

  @CanIgnoreReturnValue
  private UnifiedCommentsEditFragment injectUnifiedCommentsEditFragment(
      UnifiedCommentsEditFragment instance) {
    UnifiedCommentsEditFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    UnifiedCommentsEditFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    UnifiedCommentsEditFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EditCancelDialogFragment injectEditCancelDialogFragment(
      EditCancelDialogFragment instance) {
    EditCancelDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private BloggingReminderBottomSheetFragment injectBloggingReminderBottomSheetFragment(
      BloggingReminderBottomSheetFragment instance) {
    BloggingReminderBottomSheetFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    BloggingReminderBottomSheetFragment_MembersInjector.injectAdapter(instance, bloggingRemindersAdapter());
    BloggingReminderBottomSheetFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private LocalePickerBottomSheet injectLocalePickerBottomSheet(LocalePickerBottomSheet instance) {
    LocalePickerBottomSheet_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CategoriesListFragment injectCategoriesListFragment(CategoriesListFragment instance) {
    CategoriesListFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    CategoriesListFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private CategoryDetailFragment injectCategoryDetailFragment(CategoryDetailFragment instance) {
    CategoryDetailFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    CategoryDetailFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private LayoutPreviewFragment injectLayoutPreviewFragment(LayoutPreviewFragment instance) {
    LayoutPreviewFragment_MembersInjector.injectDisplayUtilsWrapper(instance, displayUtilsWrapperProvider.get());
    LayoutPreviewFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DesignPreviewFragment injectDesignPreviewFragment(DesignPreviewFragment instance) {
    LayoutPreviewFragment_MembersInjector.injectDisplayUtilsWrapper(instance, displayUtilsWrapperProvider.get());
    LayoutPreviewFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    DesignPreviewFragment_MembersInjector.injectSiteNameFeatureConfig(instance, siteNameFeatureConfig());
    return instance;
  }

  @CanIgnoreReturnValue
  private QuickStartPromptDialogFragment injectQuickStartPromptDialogFragment(
      QuickStartPromptDialogFragment instance) {
    QuickStartPromptDialogFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    QuickStartPromptDialogFragment_MembersInjector.injectSelectedSiteRepository(instance, selectedSiteRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private BloggingReminderTimePicker injectBloggingReminderTimePicker(
      BloggingReminderTimePicker instance) {
    BloggingReminderTimePicker_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DebugCookiesFragment injectDebugCookiesFragment(DebugCookiesFragment instance) {
    DebugCookiesFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DomainRegistrationResultFragment injectDomainRegistrationResultFragment(
      DomainRegistrationResultFragment instance) {
    DomainRegistrationResultFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private CommentNotificationsBottomSheetFragment injectCommentNotificationsBottomSheetFragment(
      CommentNotificationsBottomSheetFragment instance) {
    CommentNotificationsBottomSheetFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    CommentNotificationsBottomSheetFragment_MembersInjector.injectContextProvider(instance, contextProvider.get());
    CommentNotificationsBottomSheetFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private UnifiedAboutActivity injectUnifiedAboutActivity(UnifiedAboutActivity instance) {
    UnifiedAboutActivity_MembersInjector.injectViewModel(instance, unifiedAboutViewModel());
    return instance;
  }

  @CanIgnoreReturnValue
  private CommentSnippetAdapter injectCommentSnippetAdapter(CommentSnippetAdapter instance) {
    CommentSnippetAdapter_MembersInjector.injectThreadedCommentsUtils(instance, threadedCommentsUtilsProvider.get());
    CommentSnippetAdapter_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    CommentSnippetAdapter_MembersInjector.injectAccountStore(instance, accountStoreProvider.get());
    CommentSnippetAdapter_MembersInjector.injectReaderTracker(instance, readerTrackerProvider.get());
    CommentSnippetAdapter_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    return instance;
  }

  @CanIgnoreReturnValue
  private BloggingPromptsOnboardingDialogFragment injectBloggingPromptsOnboardingDialogFragment(
      BloggingPromptsOnboardingDialogFragment instance) {
    FeatureIntroductionDialogFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    FeatureIntroductionDialogFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
    BloggingPromptsOnboardingDialogFragment_MembersInjector.injectImageManager(instance, imageManagerProvider.get());
    BloggingPromptsOnboardingDialogFragment_MembersInjector.injectSnackbarSequencer(instance, snackbarSequencerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private DismissNotificationReceiver injectDismissNotificationReceiver(
      DismissNotificationReceiver instance) {
    DismissNotificationReceiver_MembersInjector.injectAnalyticsTrackerWrapper(instance, analyticsTrackerWrapperProvider.get());
    return instance;
  }

  public static final class Builder {
    private AccountSettingsModule accountSettingsModule;

    private AppConfigModule appConfigModule;

    private ApplicationContextModule applicationContextModule;

    private DummyInterceptorModule dummyInterceptorModule;

    private ReleaseNetworkModule releaseNetworkModule;

    private DatabaseModule databaseModule;

    private InterceptorModuleTest interceptorModuleTest;

    private LegacyModule legacyModule;

    private LoginAnalyticsModule loginAnalyticsModule;

    private StatsModule statsModule;

    private SupportModule supportModule;

    private ThreadModule threadModule;

    private TrackerTestModule trackerTestModule;

    private Builder() {
    }

    public Builder accountSettingsModule(AccountSettingsModule accountSettingsModule) {
      this.accountSettingsModule = Preconditions.checkNotNull(accountSettingsModule);
      return this;
    }

    public Builder appConfigModule(AppConfigModule appConfigModule) {
      this.appConfigModule = Preconditions.checkNotNull(appConfigModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dummyInterceptorModule(DummyInterceptorModule dummyInterceptorModule) {
      this.dummyInterceptorModule = Preconditions.checkNotNull(dummyInterceptorModule);
      return this;
    }

    public Builder releaseNetworkModule(ReleaseNetworkModule releaseNetworkModule) {
      this.releaseNetworkModule = Preconditions.checkNotNull(releaseNetworkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder releaseToolsModule(ReleaseToolsModule releaseToolsModule) {
      Preconditions.checkNotNull(releaseToolsModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_ViewModelModule(
        HiltWrapper_ViewModelModule hiltWrapper_ViewModelModule) {
      Preconditions.checkNotNull(hiltWrapper_ViewModelModule);
      return this;
    }

    public Builder interceptorModuleTest(InterceptorModuleTest interceptorModuleTest) {
      this.interceptorModuleTest = Preconditions.checkNotNull(interceptorModuleTest);
      return this;
    }

    public Builder legacyModule(LegacyModule legacyModule) {
      this.legacyModule = Preconditions.checkNotNull(legacyModule);
      return this;
    }

    public Builder loginAnalyticsModule(LoginAnalyticsModule loginAnalyticsModule) {
      this.loginAnalyticsModule = Preconditions.checkNotNull(loginAnalyticsModule);
      return this;
    }

    public Builder statsModule(StatsModule statsModule) {
      this.statsModule = Preconditions.checkNotNull(statsModule);
      return this;
    }

    public Builder supportModule(SupportModule supportModule) {
      this.supportModule = Preconditions.checkNotNull(supportModule);
      return this;
    }

    public Builder threadModule(ThreadModule threadModule) {
      this.threadModule = Preconditions.checkNotNull(threadModule);
      return this;
    }

    public Builder trackerTestModule(TrackerTestModule trackerTestModule) {
      this.trackerTestModule = Preconditions.checkNotNull(trackerTestModule);
      return this;
    }

    public Default_HiltComponents.SingletonC build() {
      if (accountSettingsModule == null) {
        this.accountSettingsModule = new AccountSettingsModule();
      }
      if (appConfigModule == null) {
        this.appConfigModule = new AppConfigModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dummyInterceptorModule == null) {
        this.dummyInterceptorModule = new DummyInterceptorModule();
      }
      if (releaseNetworkModule == null) {
        this.releaseNetworkModule = new ReleaseNetworkModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (interceptorModuleTest == null) {
        this.interceptorModuleTest = new InterceptorModuleTest();
      }
      if (legacyModule == null) {
        this.legacyModule = new LegacyModule();
      }
      if (loginAnalyticsModule == null) {
        this.loginAnalyticsModule = new LoginAnalyticsModule();
      }
      if (statsModule == null) {
        this.statsModule = new StatsModule();
      }
      if (supportModule == null) {
        this.supportModule = new SupportModule();
      }
      if (threadModule == null) {
        this.threadModule = new ThreadModule();
      }
      if (trackerTestModule == null) {
        this.trackerTestModule = new TrackerTestModule();
      }
      return new DaggerDefault_HiltComponents_SingletonC(accountSettingsModule, appConfigModule, applicationContextModule, dummyInterceptorModule, releaseNetworkModule, databaseModule, interceptorModuleTest, legacyModule, loginAnalyticsModule, statsModule, supportModule, threadModule, trackerTestModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements Default_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public Default_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements Default_HiltComponents.ActivityC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public Default_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements Default_HiltComponents.FragmentC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public Default_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements Default_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public Default_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements Default_HiltComponents.ViewC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public Default_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements Default_HiltComponents.ViewModelC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public Default_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements Default_HiltComponents.ServiceC.Builder {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public Default_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class StatsListFragmentSubcomponentFactory implements ApplicationModule_ContributeStatListFragment.StatsListFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsListFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeStatListFragment.StatsListFragmentSubcomponent create(
        StatsListFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsListFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsViewAllFragmentSubcomponentFactory implements ApplicationModule_ContributeStatsViewAllFragment.StatsViewAllFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsViewAllFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeStatsViewAllFragment.StatsViewAllFragmentSubcomponent create(
        StatsViewAllFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsViewAllFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class InsightsManagementFragmentSubcomponentFactory implements ApplicationModule_ContributeInsightsManagementFragment.InsightsManagementFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private InsightsManagementFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeInsightsManagementFragment.InsightsManagementFragmentSubcomponent create(
        InsightsManagementFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new InsightsManagementFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsDetailFragmentSubcomponentFactory implements ApplicationModule_ContributeStatsDetailFragment.StatsDetailFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsDetailFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeStatsDetailFragment.StatsDetailFragmentSubcomponent create(
        StatsDetailFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsDetailFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class CountryPickerDialogFragmentSubcomponentFactory implements ApplicationModule_ContributeCountryPickerDialogFragment.CountryPickerDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private CountryPickerDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeCountryPickerDialogFragment.CountryPickerDialogFragmentSubcomponent create(
        DomainRegistrationDetailsFragment.CountryPickerDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CountryPickerDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatePickerDialogFragmentSubcomponentFactory implements ApplicationModule_ContributeCStatePickerDialogFragment.StatePickerDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatePickerDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeCStatePickerDialogFragment.StatePickerDialogFragmentSubcomponent create(
        DomainRegistrationDetailsFragment.StatePickerDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatePickerDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsWidgetConfigureFragmentSubcomponentFactory implements ApplicationModule_ContributeStatsViewsWidgetConfigureFragment.StatsWidgetConfigureFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsWidgetConfigureFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeStatsViewsWidgetConfigureFragment.StatsWidgetConfigureFragmentSubcomponent create(
        StatsWidgetConfigureFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsWidgetConfigureFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsWidgetSiteSelectionDialogFragmentSubcomponentFactory implements ApplicationModule_ContributeSiteSelectionDialogFragment.StatsWidgetSiteSelectionDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsWidgetSiteSelectionDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeSiteSelectionDialogFragment.StatsWidgetSiteSelectionDialogFragmentSubcomponent create(
        StatsWidgetSiteSelectionDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsWidgetSiteSelectionDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsWidgetColorSelectionDialogFragmentSubcomponentFactory implements ApplicationModule_ContributeViewModeSelectionDialogFragment.StatsWidgetColorSelectionDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsWidgetColorSelectionDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeViewModeSelectionDialogFragment.StatsWidgetColorSelectionDialogFragmentSubcomponent create(
        StatsWidgetColorSelectionDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsWidgetColorSelectionDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsMinifiedWidgetConfigureFragmentSubcomponentFactory implements ApplicationModule_ContributeStatsMinifiedWidgetConfigureFragment.StatsMinifiedWidgetConfigureFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsMinifiedWidgetConfigureFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeStatsMinifiedWidgetConfigureFragment.StatsMinifiedWidgetConfigureFragmentSubcomponent create(
        StatsMinifiedWidgetConfigureFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsMinifiedWidgetConfigureFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class StatsWidgetDataTypeSelectionDialogFragmentSubcomponentFactory implements ApplicationModule_ContributeDataTypeSelectionDialogFragment.StatsWidgetDataTypeSelectionDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private StatsWidgetDataTypeSelectionDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeDataTypeSelectionDialogFragment.StatsWidgetDataTypeSelectionDialogFragmentSubcomponent create(
        StatsWidgetDataTypeSelectionDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatsWidgetDataTypeSelectionDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class CommentFullScreenDialogFragmentSubcomponentFactory implements ApplicationModule_ContributecommentFullScreenDialogFragment.CommentFullScreenDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private CommentFullScreenDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributecommentFullScreenDialogFragment.CommentFullScreenDialogFragmentSubcomponent create(
        CommentFullScreenDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CommentFullScreenDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class UsernameChangerFullScreenDialogFragmentSubcomponentFactory implements ApplicationModule_ContributeUsernameChangerFullScreenDialogFragment.UsernameChangerFullScreenDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private UsernameChangerFullScreenDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeUsernameChangerFullScreenDialogFragment.UsernameChangerFullScreenDialogFragmentSubcomponent create(
        UsernameChangerFullScreenDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new UsernameChangerFullScreenDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class SettingsUsernameChangerFragmentSubcomponentFactory implements ApplicationModule_ContributeSettingsUsernameChangerFragment.SettingsUsernameChangerFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private SettingsUsernameChangerFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeSettingsUsernameChangerFragment.SettingsUsernameChangerFragmentSubcomponent create(
        SettingsUsernameChangerFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SettingsUsernameChangerFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class ReaderPostWebViewCachingFragmentSubcomponentFactory implements ApplicationModule_ContributeReaderPostWebViewCachingFragment.ReaderPostWebViewCachingFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private ReaderPostWebViewCachingFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeReaderPostWebViewCachingFragment.ReaderPostWebViewCachingFragmentSubcomponent create(
        ReaderPostWebViewCachingFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ReaderPostWebViewCachingFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class SubfilterPageFragmentSubcomponentFactory implements ApplicationModule_ContributeSubfilterPageFragment.SubfilterPageFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private SubfilterPageFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeSubfilterPageFragment.SubfilterPageFragmentSubcomponent create(
        SubfilterPageFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SubfilterPageFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class DebugSettingsFragmentSubcomponentFactory implements ApplicationModule_ContributeDebugSettingsFragment.DebugSettingsFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private DebugSettingsFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeDebugSettingsFragment.DebugSettingsFragmentSubcomponent create(
        DebugSettingsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new DebugSettingsFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class BasicDialogSubcomponentFactory implements ApplicationModule_ContributeBasicDialog.BasicDialogSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private BasicDialogSubcomponentFactory(DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ApplicationModule_ContributeBasicDialog.BasicDialogSubcomponent create(
        BasicDialog arg0) {
      Preconditions.checkNotNull(arg0);
      return new BasicDialogSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class Login2FaFragmentSubcomponentFactory implements LoginFragmentModule_Login2FaFragment.Login2FaFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private Login2FaFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_Login2FaFragment.Login2FaFragmentSubcomponent create(
        Login2FaFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new Login2FaFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginEmailFragmentSubcomponentFactory implements LoginFragmentModule_LoginEmailFragment.LoginEmailFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginEmailFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginEmailFragment.LoginEmailFragmentSubcomponent create(
        LoginEmailFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginEmailFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginEmailPasswordFragmentSubcomponentFactory implements LoginFragmentModule_LoginEmailPasswordFragment.LoginEmailPasswordFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginEmailPasswordFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginEmailPasswordFragment.LoginEmailPasswordFragmentSubcomponent create(
        LoginEmailPasswordFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginEmailPasswordFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginGoogleFragmentSubcomponentFactory implements LoginFragmentModule_LoginGoogleFragment.LoginGoogleFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginGoogleFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginGoogleFragment.LoginGoogleFragmentSubcomponent create(
        LoginGoogleFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginGoogleFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginMagicLinkRequestFragmentSubcomponentFactory implements LoginFragmentModule_LoginMagicLinkRequestFragment.LoginMagicLinkRequestFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginMagicLinkRequestFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginMagicLinkRequestFragment.LoginMagicLinkRequestFragmentSubcomponent create(
        LoginMagicLinkRequestFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginMagicLinkRequestFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginMagicLinkSentFragmentSubcomponentFactory implements LoginFragmentModule_LoginMagicLinkSentFragment.LoginMagicLinkSentFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginMagicLinkSentFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginMagicLinkSentFragment.LoginMagicLinkSentFragmentSubcomponent create(
        LoginMagicLinkSentFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginMagicLinkSentFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginSiteAddressFragmentSubcomponentFactory implements LoginFragmentModule_LoginSiteAddressFragment.LoginSiteAddressFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginSiteAddressFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginSiteAddressFragment.LoginSiteAddressFragmentSubcomponent create(
        LoginSiteAddressFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginSiteAddressFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginSiteAddressHelpDialogFragmentSubcomponentFactory implements LoginFragmentModule_LoginSiteAddressHelpDialogFragment.LoginSiteAddressHelpDialogFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginSiteAddressHelpDialogFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginSiteAddressHelpDialogFragment.LoginSiteAddressHelpDialogFragmentSubcomponent create(
        LoginSiteAddressHelpDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginSiteAddressHelpDialogFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginUsernamePasswordFragmentSubcomponentFactory implements LoginFragmentModule_LoginUsernamePasswordFragment.LoginUsernamePasswordFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginUsernamePasswordFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_LoginUsernamePasswordFragment.LoginUsernamePasswordFragmentSubcomponent create(
        LoginUsernamePasswordFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginUsernamePasswordFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class SignupGoogleFragmentSubcomponentFactory implements LoginFragmentModule_SignupGoogleFragment.SignupGoogleFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private SignupGoogleFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_SignupGoogleFragment.SignupGoogleFragmentSubcomponent create(
        SignupGoogleFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignupGoogleFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class SignupMagicLinkFragmentSubcomponentFactory implements LoginFragmentModule_SignupMagicLinkFragment.SignupMagicLinkFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private SignupMagicLinkFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_SignupMagicLinkFragment.SignupMagicLinkFragmentSubcomponent create(
        SignupMagicLinkFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignupMagicLinkFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class SignupConfirmationFragmentSubcomponentFactory implements LoginFragmentModule_SignupConfirmationScreen.SignupConfirmationFragmentSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private SignupConfirmationFragmentSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginFragmentModule_SignupConfirmationScreen.SignupConfirmationFragmentSubcomponent create(
        SignupConfirmationFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignupConfirmationFragmentSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class LoginWpcomServiceSubcomponentFactory implements LoginServiceModule_LoginWpcomService.LoginWpcomServiceSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private LoginWpcomServiceSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LoginServiceModule_LoginWpcomService.LoginWpcomServiceSubcomponent create(
        LoginWpcomService arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginWpcomServiceSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class SuggestionSourceSubcomponentFactory implements SuggestionSourceSubcomponent.Factory {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private SuggestionSourceSubcomponentFactory(
        DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public SuggestionSourceSubcomponent create(SiteModel arg0) {
      Preconditions.checkNotNull(arg0);
      return new SuggestionSourceSubcomponentImpl(singletonC, arg0);
    }
  }

  private static final class ViewWithFragmentCImpl extends Default_HiltComponents.ViewWithFragmentC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends Default_HiltComponents.FragmentC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    private SiteDesignPickerDimensionProvider siteDesignPickerDimensionProvider() {
      return new SiteDesignPickerDimensionProvider(singletonC.contextProvider.get());
    }

    private SiteDesignRecommendedDimensionProvider siteDesignRecommendedDimensionProvider() {
      return new SiteDesignRecommendedDimensionProvider(singletonC.contextProvider.get());
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectQRCodeAuthFragment(QRCodeAuthFragment qRCodeAuthFragment) {
      injectQRCodeAuthFragment2(qRCodeAuthFragment);
    }

    @Override
    public void injectSiteCreationDomainsFragment(
        SiteCreationDomainsFragment siteCreationDomainsFragment) {
      injectSiteCreationDomainsFragment2(siteCreationDomainsFragment);
    }

    @Override
    public void injectSiteCreationPreviewFragment(
        SiteCreationPreviewFragment siteCreationPreviewFragment) {
      injectSiteCreationPreviewFragment2(siteCreationPreviewFragment);
    }

    @Override
    public void injectSiteCreationSiteNameFragment(
        SiteCreationSiteNameFragment siteCreationSiteNameFragment) {
      injectSiteCreationSiteNameFragment2(siteCreationSiteNameFragment);
    }

    @Override
    public void injectHomePagePickerFragment(HomePagePickerFragment homePagePickerFragment) {
      injectHomePagePickerFragment2(homePagePickerFragment);
    }

    @Override
    public void injectSiteCreationIntentsFragment(
        SiteCreationIntentsFragment siteCreationIntentsFragment) {
      injectSiteCreationIntentsFragment2(siteCreationIntentsFragment);
    }

    @Override
    public void injectStatsNewFeaturesIntroDialogFragment(
        StatsNewFeaturesIntroDialogFragment statsNewFeaturesIntroDialogFragment) {
      injectStatsNewFeaturesIntroDialogFragment2(statsNewFeaturesIntroDialogFragment);
    }

    @Override
    public void injectStatsFragment(StatsFragment statsFragment) {
      injectStatsFragment2(statsFragment);
    }

    @Override
    public void injectInsightsDetailFragment(InsightsDetailFragment insightsDetailFragment) {
    }

    @CanIgnoreReturnValue
    private QRCodeAuthFragment injectQRCodeAuthFragment2(QRCodeAuthFragment instance) {
      QRCodeAuthFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      return instance;
    }

    @CanIgnoreReturnValue
    private SiteCreationDomainsFragment injectSiteCreationDomainsFragment2(
        SiteCreationDomainsFragment instance) {
      SiteCreationDomainsFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      SiteCreationDomainsFragment_MembersInjector.injectDisplayUtils(instance, singletonC.displayUtilsWrapperProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SiteCreationPreviewFragment injectSiteCreationPreviewFragment2(
        SiteCreationPreviewFragment instance) {
      SiteCreationPreviewFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      return instance;
    }

    @CanIgnoreReturnValue
    private SiteCreationSiteNameFragment injectSiteCreationSiteNameFragment2(
        SiteCreationSiteNameFragment instance) {
      SiteCreationSiteNameFragment_MembersInjector.injectUiHelper(instance, new UiHelpers());
      SiteCreationSiteNameFragment_MembersInjector.injectDisplayUtils(instance, singletonC.displayUtilsWrapperProvider.get());
      SiteCreationSiteNameFragment_MembersInjector.injectHtmlMessageUtils(instance, singletonC.htmlMessageUtils());
      return instance;
    }

    @CanIgnoreReturnValue
    private HomePagePickerFragment injectHomePagePickerFragment2(HomePagePickerFragment instance) {
      HomePagePickerFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      HomePagePickerFragment_MembersInjector.injectDisplayUtils(instance, singletonC.displayUtilsWrapperProvider.get());
      HomePagePickerFragment_MembersInjector.injectUiHelper(instance, new UiHelpers());
      HomePagePickerFragment_MembersInjector.injectSiteNameFeatureConfig(instance, singletonC.siteNameFeatureConfig());
      HomePagePickerFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      HomePagePickerFragment_MembersInjector.injectThumbDimensionProvider(instance, siteDesignPickerDimensionProvider());
      HomePagePickerFragment_MembersInjector.injectRecommendedDimensionProvider(instance, siteDesignRecommendedDimensionProvider());
      return instance;
    }

    @CanIgnoreReturnValue
    private SiteCreationIntentsFragment injectSiteCreationIntentsFragment2(
        SiteCreationIntentsFragment instance) {
      SiteCreationIntentsFragment_MembersInjector.injectUiHelper(instance, new UiHelpers());
      SiteCreationIntentsFragment_MembersInjector.injectDisplayUtils(instance, singletonC.displayUtilsWrapperProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private StatsNewFeaturesIntroDialogFragment injectStatsNewFeaturesIntroDialogFragment2(
        StatsNewFeaturesIntroDialogFragment instance) {
      FeatureIntroductionDialogFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      FeatureIntroductionDialogFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      return instance;
    }

    @CanIgnoreReturnValue
    private StatsFragment injectStatsFragment2(StatsFragment instance) {
      StatsFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      return instance;
    }
  }

  private static final class ViewCImpl extends Default_HiltComponents.ViewC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectLineChartMarkerView(LineChartMarkerView lineChartMarkerView) {
      injectLineChartMarkerView2(lineChartMarkerView);
    }

    @CanIgnoreReturnValue
    private LineChartMarkerView injectLineChartMarkerView2(LineChartMarkerView instance) {
      LineChartMarkerView_MembersInjector.injectStatsUtils(instance, singletonC.statsUtils());
      return instance;
    }
  }

  private static final class ActivityCImpl extends Default_HiltComponents.ActivityC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(HomePagePickerViewModel_HiltModules_KeyModule_ProvideFactory.provide(), InsightsDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), QRCodeAuthViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SiteCreationDomainsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SiteCreationIntentsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SiteCreationMainVM_HiltModules_KeyModule_ProvideFactory.provide(), SiteCreationSiteNameViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SitePreviewViewModel_HiltModules_KeyModule_ProvideFactory.provide(), StatsNewFeatureIntroViewModel_HiltModules_KeyModule_ProvideFactory.provide(), StatsViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectWPMainActivity(WPMainActivity wPMainActivity) {
      injectWPMainActivity2(wPMainActivity);
    }

    @Override
    public void injectQRCodeAuthActivity(QRCodeAuthActivity qRCodeAuthActivity) {
    }

    @Override
    public void injectSiteCreationActivity(SiteCreationActivity siteCreationActivity) {
      injectSiteCreationActivity2(siteCreationActivity);
    }

    @Override
    public void injectStatsActivity(StatsActivity statsActivity) {
      injectStatsActivity2(statsActivity);
    }

    @Override
    public void injectStatsDetailActivity(StatsDetailActivity statsDetailActivity) {
    }

    @CanIgnoreReturnValue
    private WPMainActivity injectWPMainActivity2(WPMainActivity instance) {
      WPMainActivity_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      WPMainActivity_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      WPMainActivity_MembersInjector.injectMPostStore(instance, singletonC.postStoreProvider.get());
      WPMainActivity_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      WPMainActivity_MembersInjector.injectMLoginAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      WPMainActivity_MembersInjector.injectMShortcutsNavigator(instance, ShortcutsNavigator_Factory.newInstance());
      WPMainActivity_MembersInjector.injectMShortcutUtils(instance, singletonC.shortcutUtils());
      WPMainActivity_MembersInjector.injectMQuickStartStore(instance, singletonC.quickStartStoreProvider.get());
      WPMainActivity_MembersInjector.injectMUploadActionUseCase(instance, singletonC.uploadActionUseCaseProvider.get());
      WPMainActivity_MembersInjector.injectMSystemNotificationsTracker(instance, singletonC.systemNotificationsTracker());
      WPMainActivity_MembersInjector.injectMGCMMessageHandler(instance, singletonC.gCMMessageHandlerProvider.get());
      WPMainActivity_MembersInjector.injectMUploadUtilsWrapper(instance, singletonC.uploadUtilsWrapperProvider.get());
      WPMainActivity_MembersInjector.injectMViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      WPMainActivity_MembersInjector.injectMPrivateAtomicCookie(instance, singletonC.privateAtomicCookieProvider.get());
      WPMainActivity_MembersInjector.injectMReaderTracker(instance, singletonC.readerTrackerProvider.get());
      WPMainActivity_MembersInjector.injectMMediaPickerLauncher(instance, singletonC.mediaPickerLauncher());
      WPMainActivity_MembersInjector.injectMSelectedSiteRepository(instance, singletonC.selectedSiteRepositoryProvider.get());
      WPMainActivity_MembersInjector.injectMQuickStartRepository(instance, singletonC.quickStartRepositoryProvider.get());
      WPMainActivity_MembersInjector.injectMQuickStartUtilsWrapper(instance, singletonC.quickStartUtilsWrapper());
      WPMainActivity_MembersInjector.injectMAnalyticsTrackerWrapper(instance, singletonC.analyticsTrackerWrapperProvider.get());
      WPMainActivity_MembersInjector.injectMCreateSiteNotificationScheduler(instance, singletonC.createSiteNotificationScheduler());
      WPMainActivity_MembersInjector.injectMWeeklyRoundupScheduler(instance, singletonC.weeklyRoundupScheduler());
      WPMainActivity_MembersInjector.injectMTodaysStatsCardFeatureConfig(instance, singletonC.mySiteDashboardTodaysStatsCardFeatureConfig());
      WPMainActivity_MembersInjector.injectMQuickStartTracker(instance, singletonC.quickStartTracker());
      WPMainActivity_MembersInjector.injectMStatsRevampV2FeatureConfig(instance, singletonC.statsRevampV2FeatureConfig());
      WPMainActivity_MembersInjector.injectMBuildConfigWrapper(instance, new org.wordpress.android.util.BuildConfigWrapper());
      return instance;
    }

    @CanIgnoreReturnValue
    private SiteCreationActivity injectSiteCreationActivity2(SiteCreationActivity instance) {
      SiteCreationActivity_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      SiteCreationActivity_MembersInjector.injectSiteNameFeatureConfig(instance, singletonC.siteNameFeatureConfig());
      return instance;
    }

    @CanIgnoreReturnValue
    private StatsActivity injectStatsActivity2(StatsActivity instance) {
      StatsActivity_MembersInjector.injectStatsSiteProvider(instance, singletonC.statsSiteProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends Default_HiltComponents.ViewModelC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<HomePagePickerViewModel> homePagePickerViewModelProvider;

    private Provider<InsightsDetailViewModel> insightsDetailViewModelProvider;

    private Provider<QRCodeAuthValidator> qRCodeAuthValidatorProvider;

    private Provider<QRCodeAuthViewModel> qRCodeAuthViewModelProvider;

    private Provider<SiteCreationDomainsViewModel> siteCreationDomainsViewModelProvider;

    private Provider<VerticalsSearchResultsProvider> verticalsSearchResultsProvider;

    private Provider<SiteCreationIntentsViewModel> siteCreationIntentsViewModelProvider;

    private Provider<SiteCreationMainVM> siteCreationMainVMProvider;

    private Provider<SiteCreationSiteNameViewModel> siteCreationSiteNameViewModelProvider;

    private Provider<SitePreviewViewModel> sitePreviewViewModelProvider;

    private Provider<StatsNewFeatureIntroViewModel> statsNewFeatureIntroViewModelProvider;

    private Provider<StatsViewModel> statsViewModelProvider;

    private ViewModelCImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private SiteDesignPickerDimensionProvider siteDesignPickerDimensionProvider() {
      return new SiteDesignPickerDimensionProvider(singletonC.contextProvider.get());
    }

    private BetaSiteDesignsFeatureConfig betaSiteDesignsFeatureConfig() {
      return new BetaSiteDesignsFeatureConfig(singletonC.appConfigProvider.get());
    }

    private FetchHomePageLayoutsUseCase fetchHomePageLayoutsUseCase() {
      return new FetchHomePageLayoutsUseCase(singletonC.dispatcherProvider.get(), singletonC.themeStoreProvider.get(), siteDesignPickerDimensionProvider(), betaSiteDesignsFeatureConfig());
    }

    private SiteDesignRecommendationProvider siteDesignRecommendationProvider() {
      return new SiteDesignRecommendationProvider(singletonC.resourceProvider());
    }

    private FetchDomainsUseCase fetchDomainsUseCase() {
      return new FetchDomainsUseCase(singletonC.dispatcherProvider.get(), singletonC.siteStoreProvider.get());
    }

    private FetchWpComSiteUseCase fetchWpComSiteUseCase() {
      return new FetchWpComSiteUseCase(singletonC.dispatcherProvider.get(), singletonC.siteStoreProvider.get());
    }

    private SelectedSectionManager selectedSectionManager() {
      return new SelectedSectionManager(singletonC.provideSharedPrefsProvider.get());
    }

    private StatsModuleActivateUseCase statsModuleActivateUseCase() {
      return new StatsModuleActivateUseCase(singletonC.networkUtilsWrapperProvider.get(), singletonC.jetpackStoreProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(singletonC.threadModule));
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.homePagePickerViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.insightsDetailViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.qRCodeAuthValidatorProvider = SingleCheck.provider(new SwitchingProvider<QRCodeAuthValidator>(singletonC, activityRetainedCImpl, viewModelCImpl, 3));
      this.qRCodeAuthViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.siteCreationDomainsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.verticalsSearchResultsProvider = SingleCheck.provider(new SwitchingProvider<VerticalsSearchResultsProvider>(singletonC, activityRetainedCImpl, viewModelCImpl, 6));
      this.siteCreationIntentsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
      this.siteCreationMainVMProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
      this.siteCreationSiteNameViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 8);
      this.sitePreviewViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 9);
      this.statsNewFeatureIntroViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 10);
      this.statsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 11);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(10).put("org.wordpress.android.ui.sitecreation.theme.HomePagePickerViewModel", ((Provider) homePagePickerViewModelProvider)).put("org.wordpress.android.ui.stats.refresh.lists.detail.InsightsDetailViewModel", ((Provider) insightsDetailViewModelProvider)).put("org.wordpress.android.ui.qrcodeauth.QRCodeAuthViewModel", ((Provider) qRCodeAuthViewModelProvider)).put("org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainsViewModel", ((Provider) siteCreationDomainsViewModelProvider)).put("org.wordpress.android.ui.sitecreation.verticals.SiteCreationIntentsViewModel", ((Provider) siteCreationIntentsViewModelProvider)).put("org.wordpress.android.ui.sitecreation.SiteCreationMainVM", ((Provider) siteCreationMainVMProvider)).put("org.wordpress.android.ui.sitecreation.sitename.SiteCreationSiteNameViewModel", ((Provider) siteCreationSiteNameViewModelProvider)).put("org.wordpress.android.ui.sitecreation.previews.SitePreviewViewModel", ((Provider) sitePreviewViewModelProvider)).put("org.wordpress.android.ui.stats.intro.StatsNewFeatureIntroViewModel", ((Provider) statsNewFeatureIntroViewModelProvider)).put("org.wordpress.android.ui.stats.refresh.StatsViewModel", ((Provider) statsViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerDefault_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerDefault_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // org.wordpress.android.ui.sitecreation.theme.HomePagePickerViewModel 
          return (T) new HomePagePickerViewModel(singletonC.networkUtilsWrapperProvider.get(), singletonC.dispatcherProvider.get(), viewModelCImpl.fetchHomePageLayoutsUseCase(), singletonC.siteCreationTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), viewModelCImpl.siteDesignRecommendationProvider());

          case 1: // org.wordpress.android.ui.stats.refresh.lists.detail.InsightsDetailViewModel 
          return (T) new InsightsDetailViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideViewsAndVisitorsDetailUseCaseProvider.get(), singletonC.statsSiteProvider.get(), singletonC.networkUtilsWrapperProvider.get());

          case 2: // org.wordpress.android.ui.qrcodeauth.QRCodeAuthViewModel 
          return (T) new QRCodeAuthViewModel(singletonC.qRCodeAuthStoreProvider.get(), new QRCodeAuthUiStateMapper(), singletonC.networkUtilsWrapperProvider.get(), viewModelCImpl.qRCodeAuthValidatorProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

          case 3: // org.wordpress.android.ui.qrcodeauth.QRCodeAuthValidator 
          return (T) new QRCodeAuthValidator();

          case 4: // org.wordpress.android.ui.sitecreation.domains.SiteCreationDomainsViewModel 
          return (T) new SiteCreationDomainsViewModel(singletonC.networkUtilsWrapperProvider.get(), singletonC.dispatcherProvider.get(), new SiteCreationDomainSanitizer(), viewModelCImpl.fetchDomainsUseCase(), singletonC.siteCreationTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

          case 5: // org.wordpress.android.ui.sitecreation.verticals.SiteCreationIntentsViewModel 
          return (T) new SiteCreationIntentsViewModel(singletonC.siteCreationTrackerProvider.get(), viewModelCImpl.verticalsSearchResultsProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

          case 6: // org.wordpress.android.ui.sitecreation.verticals.VerticalsSearchResultsProvider 
          return (T) new VerticalsSearchResultsProvider(singletonC.localeManagerWrapper());

          case 7: // org.wordpress.android.ui.sitecreation.SiteCreationMainVM 
          return (T) new SiteCreationMainVM(singletonC.siteCreationTrackerProvider.get(), singletonC.wizardManagerOfSiteCreationStep(), singletonC.networkUtilsWrapperProvider.get(), singletonC.dispatcherProvider.get(), viewModelCImpl.fetchHomePageLayoutsUseCase(), singletonC.imageManagerProvider.get());

          case 8: // org.wordpress.android.ui.sitecreation.sitename.SiteCreationSiteNameViewModel 
          return (T) new SiteCreationSiteNameViewModel(singletonC.siteCreationTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

          case 9: // org.wordpress.android.ui.sitecreation.previews.SitePreviewViewModel 
          return (T) new SitePreviewViewModel(singletonC.dispatcherProvider.get(), singletonC.siteStoreProvider.get(), singletonC.quickStartStoreProvider.get(), viewModelCImpl.fetchWpComSiteUseCase(), singletonC.networkUtilsWrapperProvider.get(), singletonC.urlUtilsWrapperProvider.get(), singletonC.siteCreationTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

          case 10: // org.wordpress.android.ui.stats.intro.StatsNewFeatureIntroViewModel 
          return (T) new StatsNewFeatureIntroViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.appPrefsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

          case 11: // org.wordpress.android.ui.stats.refresh.StatsViewModel 
          return (T) new StatsViewModel(singletonC.provideListStatsUseCasesProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.selectedDateProvider.get(), viewModelCImpl.selectedSectionManager(), singletonC.appPrefsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.statsSiteProvider.get(), singletonC.statsStoreProvider.get(), singletonC.newsCardHandlerProvider.get(), viewModelCImpl.statsModuleActivateUseCase(), singletonC.systemNotificationsTracker(), singletonC.mySiteDashboardTodaysStatsCardFeatureConfig(), singletonC.statsRevampV2FeatureConfig());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends Default_HiltComponents.ActivityRetainedC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerDefault_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerDefault_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerDefault_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends Default_HiltComponents.ServiceC {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerDefault_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class StatsListFragmentSubcomponentImpl implements ApplicationModule_ContributeStatListFragment.StatsListFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsListFragmentSubcomponentImpl statsListFragmentSubcomponentImpl = this;

    private StatsListFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsListFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsListFragment arg0) {
      injectStatsListFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsListFragment injectStatsListFragment(StatsListFragment instance) {
      StatsListFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      StatsListFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsListFragment_MembersInjector.injectStatsDateFormatter(instance, singletonC.statsDateFormatter());
      StatsListFragment_MembersInjector.injectNavigator(instance, singletonC.statsNavigatorProvider.get());
      return instance;
    }
  }

  private static final class StatsViewAllFragmentSubcomponentImpl implements ApplicationModule_ContributeStatsViewAllFragment.StatsViewAllFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsViewAllFragmentSubcomponentImpl statsViewAllFragmentSubcomponentImpl = this;

    private StatsViewAllFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsViewAllFragment arg0Param) {
      this.singletonC = singletonC;


    }

    private org.wordpress.android.ui.stats.refresh.StatsViewAllViewModelFactory.Builder statsViewAllViewModelFactoryBuilder(
        ) {
      return new org.wordpress.android.ui.stats.refresh.StatsViewAllViewModelFactory.Builder(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.provideGranularUseCaseFactoriesProvider.get(), singletonC.provideViewAllInsightsUseCasesProvider.get(), singletonC.statsSiteProvider.get(), singletonC.statsDateSelectorFactory());
    }

    @Override
    public void inject(StatsViewAllFragment arg0) {
      injectStatsViewAllFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsViewAllFragment injectStatsViewAllFragment(StatsViewAllFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      StatsViewAllFragment_MembersInjector.injectViewModelFactoryBuilder(instance, statsViewAllViewModelFactoryBuilder());
      StatsViewAllFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsViewAllFragment_MembersInjector.injectNavigator(instance, singletonC.statsNavigatorProvider.get());
      StatsViewAllFragment_MembersInjector.injectStatsSiteProvider(instance, singletonC.statsSiteProvider.get());
      StatsViewAllFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      return instance;
    }
  }

  private static final class InsightsManagementFragmentSubcomponentImpl implements ApplicationModule_ContributeInsightsManagementFragment.InsightsManagementFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final InsightsManagementFragmentSubcomponentImpl insightsManagementFragmentSubcomponentImpl = this;

    private InsightsManagementFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, InsightsManagementFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(InsightsManagementFragment arg0) {
      injectInsightsManagementFragment(arg0);
    }

    @CanIgnoreReturnValue
    private InsightsManagementFragment injectInsightsManagementFragment(
        InsightsManagementFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      InsightsManagementFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class StatsDetailFragmentSubcomponentImpl implements ApplicationModule_ContributeStatsDetailFragment.StatsDetailFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsDetailFragmentSubcomponentImpl statsDetailFragmentSubcomponentImpl = this;

    private StatsDetailFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsDetailFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsDetailFragment arg0) {
      injectStatsDetailFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsDetailFragment injectStatsDetailFragment(StatsDetailFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      StatsDetailFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      StatsDetailFragment_MembersInjector.injectStatsSiteProvider(instance, singletonC.statsSiteProvider.get());
      return instance;
    }
  }

  private static final class CountryPickerDialogFragmentSubcomponentImpl implements ApplicationModule_ContributeCountryPickerDialogFragment.CountryPickerDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final CountryPickerDialogFragmentSubcomponentImpl countryPickerDialogFragmentSubcomponentImpl = this;

    private CountryPickerDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        DomainRegistrationDetailsFragment.CountryPickerDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(DomainRegistrationDetailsFragment.CountryPickerDialogFragment arg0) {
      injectCountryPickerDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private DomainRegistrationDetailsFragment.CountryPickerDialogFragment injectCountryPickerDialogFragment(
        DomainRegistrationDetailsFragment.CountryPickerDialogFragment instance) {
      DomainRegistrationDetailsFragment_CountryPickerDialogFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class StatePickerDialogFragmentSubcomponentImpl implements ApplicationModule_ContributeCStatePickerDialogFragment.StatePickerDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatePickerDialogFragmentSubcomponentImpl statePickerDialogFragmentSubcomponentImpl = this;

    private StatePickerDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        DomainRegistrationDetailsFragment.StatePickerDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(DomainRegistrationDetailsFragment.StatePickerDialogFragment arg0) {
      injectStatePickerDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private DomainRegistrationDetailsFragment.StatePickerDialogFragment injectStatePickerDialogFragment(
        DomainRegistrationDetailsFragment.StatePickerDialogFragment instance) {
      DomainRegistrationDetailsFragment_StatePickerDialogFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class StatsWidgetConfigureFragmentSubcomponentImpl implements ApplicationModule_ContributeStatsViewsWidgetConfigureFragment.StatsWidgetConfigureFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsWidgetConfigureFragmentSubcomponentImpl statsWidgetConfigureFragmentSubcomponentImpl = this;

    private StatsWidgetConfigureFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsWidgetConfigureFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsWidgetConfigureFragment arg0) {
      injectStatsWidgetConfigureFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsWidgetConfigureFragment injectStatsWidgetConfigureFragment(
        StatsWidgetConfigureFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      StatsWidgetConfigureFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      StatsWidgetConfigureFragment_MembersInjector.injectViewsWidgetUpdater(instance, singletonC.viewsWidgetUpdater());
      StatsWidgetConfigureFragment_MembersInjector.injectAllTimeWidgetUpdater(instance, singletonC.allTimeWidgetUpdater());
      StatsWidgetConfigureFragment_MembersInjector.injectTodayWidgetUpdater(instance, singletonC.todayWidgetUpdater());
      StatsWidgetConfigureFragment_MembersInjector.injectAppPrefsWrapper(instance, singletonC.appPrefsWrapperProvider.get());
      StatsWidgetConfigureFragment_MembersInjector.injectSiteStore(instance, singletonC.siteStoreProvider.get());
      StatsWidgetConfigureFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsWidgetConfigureFragment_MembersInjector.injectAnalyticsTrackerWrapper(instance, singletonC.analyticsTrackerWrapperProvider.get());
      return instance;
    }
  }

  private static final class StatsWidgetSiteSelectionDialogFragmentSubcomponentImpl implements ApplicationModule_ContributeSiteSelectionDialogFragment.StatsWidgetSiteSelectionDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsWidgetSiteSelectionDialogFragmentSubcomponentImpl statsWidgetSiteSelectionDialogFragmentSubcomponentImpl = this;

    private StatsWidgetSiteSelectionDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsWidgetSiteSelectionDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsWidgetSiteSelectionDialogFragment arg0) {
      injectStatsWidgetSiteSelectionDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsWidgetSiteSelectionDialogFragment injectStatsWidgetSiteSelectionDialogFragment(
        StatsWidgetSiteSelectionDialogFragment instance) {
      StatsWidgetSiteSelectionDialogFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsWidgetSiteSelectionDialogFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class StatsWidgetColorSelectionDialogFragmentSubcomponentImpl implements ApplicationModule_ContributeViewModeSelectionDialogFragment.StatsWidgetColorSelectionDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsWidgetColorSelectionDialogFragmentSubcomponentImpl statsWidgetColorSelectionDialogFragmentSubcomponentImpl = this;

    private StatsWidgetColorSelectionDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsWidgetColorSelectionDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsWidgetColorSelectionDialogFragment arg0) {
      injectStatsWidgetColorSelectionDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsWidgetColorSelectionDialogFragment injectStatsWidgetColorSelectionDialogFragment(
        StatsWidgetColorSelectionDialogFragment instance) {
      StatsWidgetColorSelectionDialogFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsWidgetColorSelectionDialogFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class StatsMinifiedWidgetConfigureFragmentSubcomponentImpl implements ApplicationModule_ContributeStatsMinifiedWidgetConfigureFragment.StatsMinifiedWidgetConfigureFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsMinifiedWidgetConfigureFragmentSubcomponentImpl statsMinifiedWidgetConfigureFragmentSubcomponentImpl = this;

    private StatsMinifiedWidgetConfigureFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsMinifiedWidgetConfigureFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsMinifiedWidgetConfigureFragment arg0) {
      injectStatsMinifiedWidgetConfigureFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsMinifiedWidgetConfigureFragment injectStatsMinifiedWidgetConfigureFragment(
        StatsMinifiedWidgetConfigureFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      StatsMinifiedWidgetConfigureFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      StatsMinifiedWidgetConfigureFragment_MembersInjector.injectMinifiedWidgetUpdater(instance, singletonC.minifiedWidgetUpdater());
      StatsMinifiedWidgetConfigureFragment_MembersInjector.injectAppPrefsWrapper(instance, singletonC.appPrefsWrapperProvider.get());
      StatsMinifiedWidgetConfigureFragment_MembersInjector.injectSiteStore(instance, singletonC.siteStoreProvider.get());
      StatsMinifiedWidgetConfigureFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsMinifiedWidgetConfigureFragment_MembersInjector.injectAnalyticsTrackerWrapper(instance, singletonC.analyticsTrackerWrapperProvider.get());
      return instance;
    }
  }

  private static final class StatsWidgetDataTypeSelectionDialogFragmentSubcomponentImpl implements ApplicationModule_ContributeDataTypeSelectionDialogFragment.StatsWidgetDataTypeSelectionDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final StatsWidgetDataTypeSelectionDialogFragmentSubcomponentImpl statsWidgetDataTypeSelectionDialogFragmentSubcomponentImpl = this;

    private StatsWidgetDataTypeSelectionDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        StatsWidgetDataTypeSelectionDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(StatsWidgetDataTypeSelectionDialogFragment arg0) {
      injectStatsWidgetDataTypeSelectionDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StatsWidgetDataTypeSelectionDialogFragment injectStatsWidgetDataTypeSelectionDialogFragment(
        StatsWidgetDataTypeSelectionDialogFragment instance) {
      StatsWidgetDataTypeSelectionDialogFragment_MembersInjector.injectImageManager(instance, singletonC.imageManagerProvider.get());
      StatsWidgetDataTypeSelectionDialogFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class CommentFullScreenDialogFragmentSubcomponentImpl implements ApplicationModule_ContributecommentFullScreenDialogFragment.CommentFullScreenDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final CommentFullScreenDialogFragmentSubcomponentImpl commentFullScreenDialogFragmentSubcomponentImpl = this;

    private CommentFullScreenDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        CommentFullScreenDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(CommentFullScreenDialogFragment arg0) {
      injectCommentFullScreenDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private CommentFullScreenDialogFragment injectCommentFullScreenDialogFragment(
        CommentFullScreenDialogFragment instance) {
      CommentFullScreenDialogFragment_MembersInjector.injectViewModel(instance, new CommentFullScreenDialogViewModel());
      CommentFullScreenDialogFragment_MembersInjector.injectSiteStore(instance, singletonC.siteStoreProvider.get());
      return instance;
    }
  }

  private static final class UsernameChangerFullScreenDialogFragmentSubcomponentImpl implements ApplicationModule_ContributeUsernameChangerFullScreenDialogFragment.UsernameChangerFullScreenDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final UsernameChangerFullScreenDialogFragmentSubcomponentImpl usernameChangerFullScreenDialogFragmentSubcomponentImpl = this;

    private UsernameChangerFullScreenDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        UsernameChangerFullScreenDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(UsernameChangerFullScreenDialogFragment arg0) {
      injectUsernameChangerFullScreenDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private UsernameChangerFullScreenDialogFragment injectUsernameChangerFullScreenDialogFragment(
        UsernameChangerFullScreenDialogFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      BaseUsernameChangerFullScreenDialogFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      return instance;
    }
  }

  private static final class SettingsUsernameChangerFragmentSubcomponentImpl implements ApplicationModule_ContributeSettingsUsernameChangerFragment.SettingsUsernameChangerFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final SettingsUsernameChangerFragmentSubcomponentImpl settingsUsernameChangerFragmentSubcomponentImpl = this;

    private SettingsUsernameChangerFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        SettingsUsernameChangerFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(SettingsUsernameChangerFragment arg0) {
      injectSettingsUsernameChangerFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SettingsUsernameChangerFragment injectSettingsUsernameChangerFragment(
        SettingsUsernameChangerFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      BaseUsernameChangerFullScreenDialogFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      return instance;
    }
  }

  private static final class ReaderPostWebViewCachingFragmentSubcomponentImpl implements ApplicationModule_ContributeReaderPostWebViewCachingFragment.ReaderPostWebViewCachingFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final ReaderPostWebViewCachingFragmentSubcomponentImpl readerPostWebViewCachingFragmentSubcomponentImpl = this;

    private ReaderPostWebViewCachingFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        ReaderPostWebViewCachingFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(ReaderPostWebViewCachingFragment arg0) {
      injectReaderPostWebViewCachingFragment(arg0);
    }

    @CanIgnoreReturnValue
    private ReaderPostWebViewCachingFragment injectReaderPostWebViewCachingFragment(
        ReaderPostWebViewCachingFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      ReaderPostWebViewCachingFragment_MembersInjector.injectMReaderCssProvider(instance, singletonC.readerCssProvider());
      return instance;
    }
  }

  private static final class SubfilterPageFragmentSubcomponentImpl implements ApplicationModule_ContributeSubfilterPageFragment.SubfilterPageFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final SubfilterPageFragmentSubcomponentImpl subfilterPageFragmentSubcomponentImpl = this;

    private SubfilterPageFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, SubfilterPageFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(SubfilterPageFragment arg0) {
      injectSubfilterPageFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SubfilterPageFragment injectSubfilterPageFragment(SubfilterPageFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      SubfilterPageFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      SubfilterPageFragment_MembersInjector.injectUiHelpers(instance, new UiHelpers());
      SubfilterPageFragment_MembersInjector.injectSeenUnseenWithCounterFeatureConfig(instance, singletonC.seenUnseenWithCounterFeatureConfig());
      SubfilterPageFragment_MembersInjector.injectStatsUtils(instance, singletonC.statsUtils());
      return instance;
    }
  }

  private static final class DebugSettingsFragmentSubcomponentImpl implements ApplicationModule_ContributeDebugSettingsFragment.DebugSettingsFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final DebugSettingsFragmentSubcomponentImpl debugSettingsFragmentSubcomponentImpl = this;

    private DebugSettingsFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, DebugSettingsFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(DebugSettingsFragment arg0) {
      injectDebugSettingsFragment(arg0);
    }

    @CanIgnoreReturnValue
    private DebugSettingsFragment injectDebugSettingsFragment(DebugSettingsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, singletonC.injector());
      DebugSettingsFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class BasicDialogSubcomponentImpl implements ApplicationModule_ContributeBasicDialog.BasicDialogSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final BasicDialogSubcomponentImpl basicDialogSubcomponentImpl = this;

    private BasicDialogSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        BasicDialog arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(BasicDialog arg0) {
      injectBasicDialog(arg0);
    }

    @CanIgnoreReturnValue
    private BasicDialog injectBasicDialog(BasicDialog instance) {
      BasicDialog_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class Login2FaFragmentSubcomponentImpl implements LoginFragmentModule_Login2FaFragment.Login2FaFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final Login2FaFragmentSubcomponentImpl login2FaFragmentSubcomponentImpl = this;

    private Login2FaFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        Login2FaFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(Login2FaFragment arg0) {
      injectLogin2FaFragment(arg0);
    }

    @CanIgnoreReturnValue
    private Login2FaFragment injectLogin2FaFragment(Login2FaFragment instance) {
      LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginEmailFragmentSubcomponentImpl implements LoginFragmentModule_LoginEmailFragment.LoginEmailFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginEmailFragmentSubcomponentImpl loginEmailFragmentSubcomponentImpl = this;

    private LoginEmailFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        LoginEmailFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginEmailFragment arg0) {
      injectLoginEmailFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginEmailFragment injectLoginEmailFragment(LoginEmailFragment instance) {
      LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginEmailPasswordFragmentSubcomponentImpl implements LoginFragmentModule_LoginEmailPasswordFragment.LoginEmailPasswordFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginEmailPasswordFragmentSubcomponentImpl loginEmailPasswordFragmentSubcomponentImpl = this;

    private LoginEmailPasswordFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, LoginEmailPasswordFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginEmailPasswordFragment arg0) {
      injectLoginEmailPasswordFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginEmailPasswordFragment injectLoginEmailPasswordFragment(
        LoginEmailPasswordFragment instance) {
      LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginGoogleFragmentSubcomponentImpl implements LoginFragmentModule_LoginGoogleFragment.LoginGoogleFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginGoogleFragmentSubcomponentImpl loginGoogleFragmentSubcomponentImpl = this;

    private LoginGoogleFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        LoginGoogleFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginGoogleFragment arg0) {
      injectLoginGoogleFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginGoogleFragment injectLoginGoogleFragment(LoginGoogleFragment instance) {
      GoogleFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      GoogleFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      GoogleFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginMagicLinkRequestFragmentSubcomponentImpl implements LoginFragmentModule_LoginMagicLinkRequestFragment.LoginMagicLinkRequestFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginMagicLinkRequestFragmentSubcomponentImpl loginMagicLinkRequestFragmentSubcomponentImpl = this;

    private LoginMagicLinkRequestFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        LoginMagicLinkRequestFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginMagicLinkRequestFragment arg0) {
      injectLoginMagicLinkRequestFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginMagicLinkRequestFragment injectLoginMagicLinkRequestFragment(
        LoginMagicLinkRequestFragment instance) {
      LoginMagicLinkRequestFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginMagicLinkRequestFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginMagicLinkSentFragmentSubcomponentImpl implements LoginFragmentModule_LoginMagicLinkSentFragment.LoginMagicLinkSentFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginMagicLinkSentFragmentSubcomponentImpl loginMagicLinkSentFragmentSubcomponentImpl = this;

    private LoginMagicLinkSentFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, LoginMagicLinkSentFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginMagicLinkSentFragment arg0) {
      injectLoginMagicLinkSentFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginMagicLinkSentFragment injectLoginMagicLinkSentFragment(
        LoginMagicLinkSentFragment instance) {
      LoginMagicLinkSentFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginSiteAddressFragmentSubcomponentImpl implements LoginFragmentModule_LoginSiteAddressFragment.LoginSiteAddressFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginSiteAddressFragmentSubcomponentImpl loginSiteAddressFragmentSubcomponentImpl = this;

    private LoginSiteAddressFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, LoginSiteAddressFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginSiteAddressFragment arg0) {
      injectLoginSiteAddressFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginSiteAddressFragment injectLoginSiteAddressFragment(
        LoginSiteAddressFragment instance) {
      LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      LoginSiteAddressFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginSiteAddressFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginSiteAddressFragment_MembersInjector.injectMHTTPAuthManager(instance, new HTTPAuthManager());
      LoginSiteAddressFragment_MembersInjector.injectMMemorizingTrustManager(instance, singletonC.provideMemorizingTrustManagerProvider.get());
      return instance;
    }
  }

  private static final class LoginSiteAddressHelpDialogFragmentSubcomponentImpl implements LoginFragmentModule_LoginSiteAddressHelpDialogFragment.LoginSiteAddressHelpDialogFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginSiteAddressHelpDialogFragmentSubcomponentImpl loginSiteAddressHelpDialogFragmentSubcomponentImpl = this;

    private LoginSiteAddressHelpDialogFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        LoginSiteAddressHelpDialogFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginSiteAddressHelpDialogFragment arg0) {
      injectLoginSiteAddressHelpDialogFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginSiteAddressHelpDialogFragment injectLoginSiteAddressHelpDialogFragment(
        LoginSiteAddressHelpDialogFragment instance) {
      LoginSiteAddressHelpDialogFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      LoginSiteAddressHelpDialogFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginSiteAddressHelpDialogFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginUsernamePasswordFragmentSubcomponentImpl implements LoginFragmentModule_LoginUsernamePasswordFragment.LoginUsernamePasswordFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginUsernamePasswordFragmentSubcomponentImpl loginUsernamePasswordFragmentSubcomponentImpl = this;

    private LoginUsernamePasswordFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC,
        LoginUsernamePasswordFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginUsernamePasswordFragment arg0) {
      injectLoginUsernamePasswordFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LoginUsernamePasswordFragment injectLoginUsernamePasswordFragment(
        LoginUsernamePasswordFragment instance) {
      LoginBaseFormFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAccountStore(instance, singletonC.accountStoreProvider.get());
      LoginBaseFormFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class SignupGoogleFragmentSubcomponentImpl implements LoginFragmentModule_SignupGoogleFragment.SignupGoogleFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final SignupGoogleFragmentSubcomponentImpl signupGoogleFragmentSubcomponentImpl = this;

    private SignupGoogleFragmentSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        SignupGoogleFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(SignupGoogleFragment arg0) {
      injectSignupGoogleFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SignupGoogleFragment injectSignupGoogleFragment(SignupGoogleFragment instance) {
      GoogleFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      GoogleFragment_MembersInjector.injectMSiteStore(instance, singletonC.siteStoreProvider.get());
      GoogleFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class SignupMagicLinkFragmentSubcomponentImpl implements LoginFragmentModule_SignupMagicLinkFragment.SignupMagicLinkFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final SignupMagicLinkFragmentSubcomponentImpl signupMagicLinkFragmentSubcomponentImpl = this;

    private SignupMagicLinkFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, SignupMagicLinkFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(SignupMagicLinkFragment arg0) {
      injectSignupMagicLinkFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SignupMagicLinkFragment injectSignupMagicLinkFragment(
        SignupMagicLinkFragment instance) {
      SignupMagicLinkFragment_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      SignupMagicLinkFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class SignupConfirmationFragmentSubcomponentImpl implements LoginFragmentModule_SignupConfirmationScreen.SignupConfirmationFragmentSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final SignupConfirmationFragmentSubcomponentImpl signupConfirmationFragmentSubcomponentImpl = this;

    private SignupConfirmationFragmentSubcomponentImpl(
        DaggerDefault_HiltComponents_SingletonC singletonC, SignupConfirmationFragment arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(SignupConfirmationFragment arg0) {
      injectSignupConfirmationFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SignupConfirmationFragment injectSignupConfirmationFragment(
        SignupConfirmationFragment instance) {
      SignupConfirmationFragment_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class LoginWpcomServiceSubcomponentImpl implements LoginServiceModule_LoginWpcomService.LoginWpcomServiceSubcomponent {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final LoginWpcomServiceSubcomponentImpl loginWpcomServiceSubcomponentImpl = this;

    private LoginWpcomServiceSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        LoginWpcomService arg0Param) {
      this.singletonC = singletonC;


    }

    @Override
    public void inject(LoginWpcomService arg0) {
      injectLoginWpcomService(arg0);
    }

    @CanIgnoreReturnValue
    private LoginWpcomService injectLoginWpcomService(LoginWpcomService instance) {
      LoginWpcomService_MembersInjector.injectMDispatcher(instance, singletonC.dispatcherProvider.get());
      LoginWpcomService_MembersInjector.injectMAnalyticsListener(instance, singletonC.loginAnalyticsListener());
      return instance;
    }
  }

  private static final class SuggestionSourceSubcomponentImpl implements SuggestionSourceSubcomponent {
    private final SiteModel arg0;

    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final SuggestionSourceSubcomponentImpl suggestionSourceSubcomponentImpl = this;

    private SuggestionSourceSubcomponentImpl(DaggerDefault_HiltComponents_SingletonC singletonC,
        SiteModel arg0Param) {
      this.singletonC = singletonC;
      this.arg0 = arg0Param;

    }

    @Override
    public UserSuggestionSource userSuggestionSource() {
      return new UserSuggestionSource(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), arg0, singletonC.eventBusWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));
    }

    @Override
    public XPostsSuggestionSource xPostSuggestionSource() {
      return new XPostsSuggestionSource(singletonC.xPostsStore(), arg0, ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerDefault_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerDefault_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    private T get0() {
      switch (id) {
        case 0: // org.wordpress.android.modules.ApplicationModule_ContributeStatListFragment.StatsListFragmentSubcomponent.Factory 
        return (T) new StatsListFragmentSubcomponentFactory(singletonC);

        case 1: // org.wordpress.android.modules.ApplicationModule_ContributeStatsViewAllFragment.StatsViewAllFragmentSubcomponent.Factory 
        return (T) new StatsViewAllFragmentSubcomponentFactory(singletonC);

        case 2: // org.wordpress.android.modules.ApplicationModule_ContributeInsightsManagementFragment.InsightsManagementFragmentSubcomponent.Factory 
        return (T) new InsightsManagementFragmentSubcomponentFactory(singletonC);

        case 3: // org.wordpress.android.modules.ApplicationModule_ContributeStatsDetailFragment.StatsDetailFragmentSubcomponent.Factory 
        return (T) new StatsDetailFragmentSubcomponentFactory(singletonC);

        case 4: // org.wordpress.android.modules.ApplicationModule_ContributeCountryPickerDialogFragment.CountryPickerDialogFragmentSubcomponent.Factory 
        return (T) new CountryPickerDialogFragmentSubcomponentFactory(singletonC);

        case 5: // org.wordpress.android.modules.ApplicationModule_ContributeCStatePickerDialogFragment.StatePickerDialogFragmentSubcomponent.Factory 
        return (T) new StatePickerDialogFragmentSubcomponentFactory(singletonC);

        case 6: // org.wordpress.android.modules.ApplicationModule_ContributeStatsViewsWidgetConfigureFragment.StatsWidgetConfigureFragmentSubcomponent.Factory 
        return (T) new StatsWidgetConfigureFragmentSubcomponentFactory(singletonC);

        case 7: // org.wordpress.android.modules.ApplicationModule_ContributeSiteSelectionDialogFragment.StatsWidgetSiteSelectionDialogFragmentSubcomponent.Factory 
        return (T) new StatsWidgetSiteSelectionDialogFragmentSubcomponentFactory(singletonC);

        case 8: // org.wordpress.android.modules.ApplicationModule_ContributeViewModeSelectionDialogFragment.StatsWidgetColorSelectionDialogFragmentSubcomponent.Factory 
        return (T) new StatsWidgetColorSelectionDialogFragmentSubcomponentFactory(singletonC);

        case 9: // org.wordpress.android.modules.ApplicationModule_ContributeStatsMinifiedWidgetConfigureFragment.StatsMinifiedWidgetConfigureFragmentSubcomponent.Factory 
        return (T) new StatsMinifiedWidgetConfigureFragmentSubcomponentFactory(singletonC);

        case 10: // org.wordpress.android.modules.ApplicationModule_ContributeDataTypeSelectionDialogFragment.StatsWidgetDataTypeSelectionDialogFragmentSubcomponent.Factory 
        return (T) new StatsWidgetDataTypeSelectionDialogFragmentSubcomponentFactory(singletonC);

        case 11: // org.wordpress.android.modules.ApplicationModule_ContributecommentFullScreenDialogFragment.CommentFullScreenDialogFragmentSubcomponent.Factory 
        return (T) new CommentFullScreenDialogFragmentSubcomponentFactory(singletonC);

        case 12: // org.wordpress.android.modules.ApplicationModule_ContributeUsernameChangerFullScreenDialogFragment.UsernameChangerFullScreenDialogFragmentSubcomponent.Factory 
        return (T) new UsernameChangerFullScreenDialogFragmentSubcomponentFactory(singletonC);

        case 13: // org.wordpress.android.modules.ApplicationModule_ContributeSettingsUsernameChangerFragment.SettingsUsernameChangerFragmentSubcomponent.Factory 
        return (T) new SettingsUsernameChangerFragmentSubcomponentFactory(singletonC);

        case 14: // org.wordpress.android.modules.ApplicationModule_ContributeReaderPostWebViewCachingFragment.ReaderPostWebViewCachingFragmentSubcomponent.Factory 
        return (T) new ReaderPostWebViewCachingFragmentSubcomponentFactory(singletonC);

        case 15: // org.wordpress.android.modules.ApplicationModule_ContributeSubfilterPageFragment.SubfilterPageFragmentSubcomponent.Factory 
        return (T) new SubfilterPageFragmentSubcomponentFactory(singletonC);

        case 16: // org.wordpress.android.modules.ApplicationModule_ContributeDebugSettingsFragment.DebugSettingsFragmentSubcomponent.Factory 
        return (T) new DebugSettingsFragmentSubcomponentFactory(singletonC);

        case 17: // org.wordpress.android.modules.ApplicationModule_ContributeBasicDialog.BasicDialogSubcomponent.Factory 
        return (T) new BasicDialogSubcomponentFactory(singletonC);

        case 18: // org.wordpress.android.login.di.LoginFragmentModule_Login2FaFragment.Login2FaFragmentSubcomponent.Factory 
        return (T) new Login2FaFragmentSubcomponentFactory(singletonC);

        case 19: // org.wordpress.android.login.di.LoginFragmentModule_LoginEmailFragment.LoginEmailFragmentSubcomponent.Factory 
        return (T) new LoginEmailFragmentSubcomponentFactory(singletonC);

        case 20: // org.wordpress.android.login.di.LoginFragmentModule_LoginEmailPasswordFragment.LoginEmailPasswordFragmentSubcomponent.Factory 
        return (T) new LoginEmailPasswordFragmentSubcomponentFactory(singletonC);

        case 21: // org.wordpress.android.login.di.LoginFragmentModule_LoginGoogleFragment.LoginGoogleFragmentSubcomponent.Factory 
        return (T) new LoginGoogleFragmentSubcomponentFactory(singletonC);

        case 22: // org.wordpress.android.login.di.LoginFragmentModule_LoginMagicLinkRequestFragment.LoginMagicLinkRequestFragmentSubcomponent.Factory 
        return (T) new LoginMagicLinkRequestFragmentSubcomponentFactory(singletonC);

        case 23: // org.wordpress.android.login.di.LoginFragmentModule_LoginMagicLinkSentFragment.LoginMagicLinkSentFragmentSubcomponent.Factory 
        return (T) new LoginMagicLinkSentFragmentSubcomponentFactory(singletonC);

        case 24: // org.wordpress.android.login.di.LoginFragmentModule_LoginSiteAddressFragment.LoginSiteAddressFragmentSubcomponent.Factory 
        return (T) new LoginSiteAddressFragmentSubcomponentFactory(singletonC);

        case 25: // org.wordpress.android.login.di.LoginFragmentModule_LoginSiteAddressHelpDialogFragment.LoginSiteAddressHelpDialogFragmentSubcomponent.Factory 
        return (T) new LoginSiteAddressHelpDialogFragmentSubcomponentFactory(singletonC);

        case 26: // org.wordpress.android.login.di.LoginFragmentModule_LoginUsernamePasswordFragment.LoginUsernamePasswordFragmentSubcomponent.Factory 
        return (T) new LoginUsernamePasswordFragmentSubcomponentFactory(singletonC);

        case 27: // org.wordpress.android.login.di.LoginFragmentModule_SignupGoogleFragment.SignupGoogleFragmentSubcomponent.Factory 
        return (T) new SignupGoogleFragmentSubcomponentFactory(singletonC);

        case 28: // org.wordpress.android.login.di.LoginFragmentModule_SignupMagicLinkFragment.SignupMagicLinkFragmentSubcomponent.Factory 
        return (T) new SignupMagicLinkFragmentSubcomponentFactory(singletonC);

        case 29: // org.wordpress.android.login.di.LoginFragmentModule_SignupConfirmationScreen.SignupConfirmationFragmentSubcomponent.Factory 
        return (T) new SignupConfirmationFragmentSubcomponentFactory(singletonC);

        case 30: // org.wordpress.android.login.di.LoginServiceModule_LoginWpcomService.LoginWpcomServiceSubcomponent.Factory 
        return (T) new LoginWpcomServiceSubcomponentFactory(singletonC);

        case 31: // org.wordpress.android.AppInitializer 
        return (T) singletonC.injectAppInitializer(AppInitializer_Factory.newInstance(singletonC.wellSqlInitializerProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule)));

        case 32: // org.wordpress.android.WellSqlInitializer 
        return (T) new WellSqlInitializer(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 33: // org.wordpress.android.fluxc.Dispatcher 
        return (T) new Dispatcher();

        case 34: // org.wordpress.android.fluxc.store.AccountStore 
        return (T) new AccountStore(singletonC.dispatcherProvider.get(), singletonC.accountRestClientProvider.get(), singletonC.selfHostedEndpointFinder(), singletonC.authenticator(), singletonC.accessTokenProvider.get());

        case 35: // org.wordpress.android.fluxc.network.rest.wpcom.account.AccountRestClient 
        return (T) new AccountRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), AppConfigModule_ProvideAppSecretsFactory.provideAppSecrets(singletonC.appConfigModule), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 36: // @javax.inject.Named("regular") com.android.volley.RequestQueue 
        return (T) ReleaseNetworkModule_ProvideRequestQueueFactory.provideRequestQueue(singletonC.releaseNetworkModule, singletonC.provideMediaOkHttpClientInstanceProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 37: // @javax.inject.Named("regular") okhttp3.OkHttpClient 
        return (T) OkHttpClientModule_ProvideMediaOkHttpClientInstanceFactory.provideMediaOkHttpClientInstance(singletonC.provideCookieJarProvider.get(), singletonC.namedSetOfInterceptor(), singletonC.namedSetOfInterceptor2());

        case 38: // okhttp3.CookieJar 
        return (T) ReleaseNetworkModule_ProvideCookieJarFactory.provideCookieJar(singletonC.releaseNetworkModule, singletonC.provideCookieManagerProvider.get());

        case 39: // java.net.CookieManager 
        return (T) ReleaseNetworkModule_ProvideCookieManagerFactory.provideCookieManager(singletonC.releaseNetworkModule);

        case 40: // org.wordpress.android.fluxc.network.rest.wpcom.auth.AccessToken 
        return (T) new AccessToken(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 41: // org.wordpress.android.fluxc.network.discovery.DiscoveryXMLRPCClient 
        return (T) new DiscoveryXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager());

        case 42: // @javax.inject.Named("custom-ssl") com.android.volley.RequestQueue 
        return (T) ReleaseNetworkModule_ProvideRequestQueueCustomSSLFactory.provideRequestQueueCustomSSL(singletonC.releaseNetworkModule, singletonC.provideMediaOkHttpClientInstanceCustomSSLProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 43: // @javax.inject.Named("custom-ssl") okhttp3.OkHttpClient 
        return (T) OkHttpClientModule_ProvideMediaOkHttpClientInstanceCustomSSLFactory.provideMediaOkHttpClientInstanceCustomSSL(singletonC.provideMediaOkHttpClientInstanceProvider.get(), singletonC.provideMemorizingTrustManagerProvider.get());

        case 44: // org.wordpress.android.fluxc.network.MemorizingTrustManager 
        return (T) ReleaseNetworkModule_ProvideMemorizingTrustManagerFactory.provideMemorizingTrustManager(singletonC.releaseNetworkModule);

        case 45: // org.wordpress.android.fluxc.network.discovery.DiscoveryWPAPIRestClient 
        return (T) new DiscoveryWPAPIRestClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent());

        case 46: // org.wordpress.android.fluxc.store.SiteStore 
        return (T) new SiteStore(singletonC.dispatcherProvider.get(), singletonC.postSqlUtilsProvider.get(), singletonC.siteRestClientProvider.get(), singletonC.siteXMLRPCClientProvider.get(), singletonC.privateAtomicCookieProvider.get(), singletonC.siteSqlUtilsProvider.get(), singletonC.coroutineEngine());

        case 47: // org.wordpress.android.fluxc.persistence.PostSqlUtils 
        return (T) new PostSqlUtils();

        case 48: // org.wordpress.android.fluxc.network.rest.wpcom.site.SiteRestClient 
        return (T) new SiteRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), AppConfigModule_ProvideAppSecretsFactory.provideAppSecrets(singletonC.appConfigModule), singletonC.wPComGsonRequestBuilderProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 49: // org.wordpress.android.fluxc.network.rest.wpcom.WPComGsonRequestBuilder 
        return (T) new WPComGsonRequestBuilder();

        case 50: // org.wordpress.android.fluxc.network.xmlrpc.site.SiteXMLRPCClient 
        return (T) new SiteXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager(), singletonC.xMLRPCRequestBuilderProvider.get());

        case 51: // org.wordpress.android.fluxc.network.xmlrpc.XMLRPCRequestBuilder 
        return (T) new XMLRPCRequestBuilder();

        case 52: // org.wordpress.android.fluxc.network.rest.wpcom.site.PrivateAtomicCookie 
        return (T) new PrivateAtomicCookie(singletonC.preferenceUtilsWrapper());

        case 53: // org.wordpress.android.fluxc.persistence.SiteSqlUtils 
        return (T) new SiteSqlUtils();

        case 54: // kotlin.coroutines.CoroutineContext 
        return (T) ReleaseNetworkModule_ProvideCoroutineContextFactory.provideCoroutineContext(singletonC.releaseNetworkModule);

        case 55: // org.wordpress.android.fluxc.store.MediaStore 
        return (T) singletonC.injectMediaStore(MediaStore_Factory.newInstance(singletonC.dispatcherProvider.get(), singletonC.mediaRestClientProvider.get(), singletonC.mediaXMLRPCClientProvider.get(), singletonC.wPV2MediaRestClientProvider.get()));

        case 56: // org.wordpress.android.fluxc.network.rest.wpcom.media.MediaRestClient 
        return (T) new MediaRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.provideMediaOkHttpClientInstanceProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), new MediaResponseUtils());

        case 57: // org.wordpress.android.fluxc.network.xmlrpc.media.MediaXMLRPCClient 
        return (T) new MediaXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.provideMediaOkHttpClientInstanceCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager());

        case 58: // org.wordpress.android.fluxc.network.rest.wpcom.media.wpv2.WPV2MediaRestClient 
        return (T) new WPV2MediaRestClient(singletonC.dispatcherProvider.get(), singletonC.coroutineEngine(), singletonC.provideMediaOkHttpClientInstanceProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 59: // org.wordpress.android.fluxc.store.UploadStore 
        return (T) new UploadStore(singletonC.dispatcherProvider.get());

        case 60: // org.wordpress.android.support.ZendeskHelper 
        return (T) SupportModule_ProvideZendeskHelperFactory.provideZendeskHelper(singletonC.supportModule, singletonC.accountStoreProvider.get(), singletonC.siteStoreProvider.get(), singletonC.provideSupportHelperProvider.get(), new org.wordpress.android.util.BuildConfigWrapper());

        case 61: // org.wordpress.android.support.SupportHelper 
        return (T) SupportModule_ProvideSupportHelperFactory.provideSupportHelper(singletonC.supportModule);

        case 62: // org.wordpress.android.ui.uploads.UploadStarter 
        return (T) new UploadStarter(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.postStoreProvider.get(), singletonC.pageStoreProvider.get(), singletonC.siteStoreProvider.get(), singletonC.uploadActionUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(singletonC.threadModule), singletonC.uploadServiceFacade(), singletonC.networkUtilsWrapperProvider.get(), singletonC.liveDataOfConnectionStatus());

        case 63: // org.wordpress.android.fluxc.store.PostStore 
        return (T) singletonC.injectPostStore(PostStore_Factory.newInstance(singletonC.dispatcherProvider.get(), singletonC.postRestClientProvider.get(), singletonC.postXMLRPCClientProvider.get(), singletonC.postSqlUtilsProvider.get()));

        case 64: // org.wordpress.android.fluxc.network.rest.wpcom.post.PostRestClient 
        return (T) new PostRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), new LikesUtilsProvider());

        case 65: // org.wordpress.android.fluxc.network.xmlrpc.post.PostXMLRPCClient 
        return (T) new PostXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager());

        case 66: // org.wordpress.android.fluxc.store.PageStore 
        return (T) new PageStore(singletonC.postStoreProvider.get(), singletonC.postSqlUtilsProvider.get(), singletonC.dispatcherProvider.get(), new CurrentDateUtils(), singletonC.coroutineEngine());

        case 67: // org.wordpress.android.ui.uploads.UploadActionUseCase 
        return (T) new UploadActionUseCase(singletonC.uploadStoreProvider.get(), singletonC.postUtilsWrapperProvider.get(), singletonC.uploadServiceFacade());

        case 68: // org.wordpress.android.ui.posts.PostUtilsWrapper 
        return (T) new PostUtilsWrapper(new DateProvider());

        case 69: // org.wordpress.android.util.analytics.AnalyticsTrackerWrapper 
        return (T) new AnalyticsTrackerWrapper();

        case 70: // org.wordpress.android.util.NetworkUtilsWrapper 
        return (T) new NetworkUtilsWrapper();

        case 71: // org.wordpress.android.ui.prefs.AppPrefsWrapper 
        return (T) new AppPrefsWrapper();

        case 72: // org.wordpress.android.viewmodel.ContextProvider 
        return (T) new ContextProvider(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 73: // org.wordpress.android.util.image.ImageManager 
        return (T) new ImageManager(singletonC.imagePlaceholderManagerProvider.get(), singletonC.videoLoader());

        case 74: // org.wordpress.android.util.image.ImagePlaceholderManager 
        return (T) new ImagePlaceholderManager();

        case 75: // org.wordpress.android.ui.utils.AuthenticationUtils 
        return (T) new AuthenticationUtils(singletonC.accessTokenProvider.get(), new HTTPAuthManager(), singletonC.userAgent(), singletonC.privateAtomicCookieProvider.get());

        case 76: // org.wordpress.android.util.MediaUtilsWrapper 
        return (T) new MediaUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 77: // org.wordpress.android.fluxc.store.stats.insights.TodayInsightsStore 
        return (T) new TodayInsightsStore(singletonC.todayInsightsRestClientProvider.get(), singletonC.todayInsightsSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 78: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.TodayInsightsRestClient 
        return (T) new TodayInsightsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 79: // org.wordpress.android.fluxc.persistence.StatsSqlUtils 
        return (T) new StatsSqlUtils();

        case 80: // org.wordpress.android.fluxc.persistence.StatsRequestSqlUtils 
        return (T) new StatsRequestSqlUtils();

        case 81: // org.wordpress.android.fluxc.store.StatsStore 
        return (T) new StatsStore(singletonC.coroutineEngine(), singletonC.insightTypeSqlUtilsProvider.get(), singletonC.preferenceUtilsWrapper(), singletonC.statsSqlUtilsProvider.get());

        case 82: // org.wordpress.android.fluxc.persistence.InsightTypeSqlUtils 
        return (T) new InsightTypeSqlUtils();

        case 83: // org.wordpress.android.ui.reader.tracker.ReaderTracker 
        return (T) new ReaderTracker(new DateProvider(), singletonC.appPrefsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.analyticsUtilsWrapperProvider.get());

        case 84: // org.wordpress.android.util.analytics.AnalyticsUtilsWrapper 
        return (T) new AnalyticsUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 85: // org.wordpress.android.ui.posts.editor.ImageEditorTracker 
        return (T) new ImageEditorTracker(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.analyticsTrackerWrapperProvider.get());

        case 86: // org.wordpress.android.ui.posts.editor.media.AddLocalMediaToPostUseCase 
        return (T) new AddLocalMediaToPostUseCase(singletonC.copyMediaToAppStorageUseCaseProvider.get(), singletonC.optimizeMediaUseCaseProvider.get(), singletonC.getMediaModelUseCaseProvider.get(), singletonC.updateMediaModelUseCaseProvider.get(), singletonC.appendMediaToEditorUseCaseProvider.get(), singletonC.uploadMediaUseCaseProvider.get(), singletonC.mediaUtilsWrapperProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 87: // org.wordpress.android.ui.posts.editor.media.CopyMediaToAppStorageUseCase 
        return (T) new CopyMediaToAppStorageUseCase(singletonC.mediaUtilsWrapperProvider.get(), singletonC.authenticationUtilsProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 88: // org.wordpress.android.ui.posts.editor.media.OptimizeMediaUseCase 
        return (T) new OptimizeMediaUseCase(singletonC.editorTrackerProvider.get(), singletonC.mediaUtilsWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 89: // org.wordpress.android.ui.posts.editor.EditorTracker 
        return (T) new EditorTracker(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.analyticsTrackerWrapperProvider.get());

        case 90: // org.wordpress.android.ui.posts.editor.media.GetMediaModelUseCase 
        return (T) new GetMediaModelUseCase(singletonC.fluxCUtilsWrapperProvider.get(), singletonC.mediaUtilsWrapperProvider.get(), singletonC.mediaStoreProvider.get(), singletonC.fileProvider.get(), singletonC.authenticationUtilsProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 91: // org.wordpress.android.util.FluxCUtilsWrapper 
        return (T) new FluxCUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.mediaStoreProvider.get());

        case 92: // org.wordpress.android.util.FileProvider 
        return (T) new FileProvider();

        case 93: // org.wordpress.android.ui.posts.editor.media.UpdateMediaModelUseCase 
        return (T) new UpdateMediaModelUseCase(singletonC.dispatcherProvider.get());

        case 94: // org.wordpress.android.ui.posts.editor.media.AppendMediaToEditorUseCase 
        return (T) new AppendMediaToEditorUseCase(singletonC.fluxCUtilsWrapperProvider.get());

        case 95: // org.wordpress.android.ui.posts.editor.media.UploadMediaUseCase 
        return (T) new UploadMediaUseCase(singletonC.uploadServiceFacade());

        case 96: // org.wordpress.android.ui.uploads.UploadUtilsWrapper 
        return (T) new UploadUtilsWrapper(singletonC.snackbarSequencerProvider.get(), singletonC.dispatcherProvider.get());

        case 97: // org.wordpress.android.util.SnackbarSequencer 
        return (T) new SnackbarSequencer(new UiHelpers(), singletonC.wPSnackbarWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 98: // org.wordpress.android.widgets.WPSnackbarWrapper 
        return (T) new WPSnackbarWrapper();

        case 99: // org.wordpress.android.ui.stories.prefs.StoriesPrefs 
        return (T) new StoriesPrefs(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        default: throw new AssertionError(id);
      }
    }

    @SuppressWarnings("unchecked")
    private T get1() {
      switch (id) {
        case 100: // org.wordpress.android.util.EventBusWrapper 
        return (T) new EventBusWrapper();

        case 101: // com.automattic.android.tracks.crashlogging.CrashLogging 
        return (T) CrashLoggingModule_Companion_ProvideCrashLoggingFactory.provideCrashLogging(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.wPCrashLoggingDataProvider());

        case 102: // android.content.SharedPreferences 
        return (T) StatsModule_ProvideSharedPrefsFactory.provideSharedPrefs(singletonC.statsModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 103: // org.wordpress.android.util.EncryptedLogging 
        return (T) new EncryptedLogging(singletonC.dispatcherProvider.get(), singletonC.encryptedLogStoreProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 104: // org.wordpress.android.fluxc.store.EncryptedLogStore 
        return (T) new EncryptedLogStore(singletonC.encryptedLogRestClientProvider.get(), singletonC.encryptedLogSqlUtilsProvider.get(), singletonC.coroutineEngine(), singletonC.logEncrypterProvider.get(), singletonC.preferenceUtilsWrapper(), singletonC.dispatcherProvider.get());

        case 105: // org.wordpress.android.fluxc.network.rest.wpcom.encryptedlog.EncryptedLogRestClient 
        return (T) new EncryptedLogRestClient(singletonC.provideRequestQueueProvider.get(), AppConfigModule_ProvideAppSecretsFactory.provideAppSecrets(singletonC.appConfigModule));

        case 106: // org.wordpress.android.fluxc.persistence.EncryptedLogSqlUtils 
        return (T) new EncryptedLogSqlUtils();

        case 107: // org.wordpress.android.fluxc.model.encryptedlogging.LogEncrypter 
        return (T) new LogEncrypter(AppConfigModule_ProvideEncryptedLoggingKeyFactory.provideEncryptedLoggingKey(singletonC.appConfigModule));

        case 108: // org.wordpress.android.util.config.AppConfig 
        return (T) new AppConfig(new RemoteConfig(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.manualFeatureConfig());

        case 109: // org.wordpress.android.util.experiments.ExPlat 
        return (T) new ExPlat(DoubleCheck.lazy(SetFactory.<Experiment>empty()), singletonC.experimentStoreProvider.get(), new AppLogWrapper(), singletonC.accountStoreProvider.get(), ThreadModule_ProvideApplicationScopeFactory.provideApplicationScope(singletonC.threadModule));

        case 110: // org.wordpress.android.fluxc.store.ExperimentStore 
        return (T) new ExperimentStore(singletonC.experimentRestClientProvider.get(), singletonC.preferenceUtilsWrapper(), singletonC.coroutineEngine());

        case 111: // org.wordpress.android.fluxc.network.rest.wpcom.experiments.ExperimentRestClient 
        return (T) new ExperimentRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 112: // org.wordpress.android.util.SiteUtilsWrapper 
        return (T) new SiteUtilsWrapper();

        case 113: // org.wordpress.android.fluxc.store.stats.time.VisitsAndViewsStore 
        return (T) new VisitsAndViewsStore(singletonC.visitAndViewsRestClientProvider.get(), singletonC.visitsAndViewsSqlUtils(), singletonC.timeStatsMapper(), singletonC.statsUtils2(), new CurrentTimeProvider(), singletonC.coroutineEngine(), new AppLogWrapper());

        case 114: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.VisitAndViewsRestClient 
        return (T) new VisitAndViewsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 115: // com.google.gson.Gson 
        return (T) ReleaseNetworkModule_ProvideGsonFactory.provideGson(singletonC.releaseNetworkModule);

        case 116: // org.wordpress.android.fluxc.store.bloggingprompts.BloggingPromptsStore 
        return (T) new BloggingPromptsStore(singletonC.bloggingPromptsRestClientProvider.get(), singletonC.provideBloggingPromptsDaoProvider.get(), singletonC.coroutineEngine());

        case 117: // org.wordpress.android.fluxc.network.rest.wpcom.bloggingprompts.BloggingPromptsRestClient 
        return (T) new BloggingPromptsRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 118: // org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao 
        return (T) DatabaseModule_ProvideBloggingPromptsDaoFactory.provideBloggingPromptsDao(singletonC.databaseModule, singletonC.provideDatabaseProvider.get());

        case 119: // org.wordpress.android.fluxc.persistence.WPAndroidDatabase 
        return (T) DatabaseModule_ProvideDatabaseFactory.provideDatabase(singletonC.databaseModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 120: // org.wordpress.android.fluxc.store.BloggingRemindersStore 
        return (T) new BloggingRemindersStore(singletonC.provideBloggingRemindersDaoProvider.get(), new BloggingRemindersMapper(), singletonC.coroutineEngine());

        case 121: // org.wordpress.android.fluxc.persistence.BloggingRemindersDao 
        return (T) DatabaseModule_ProvideBloggingRemindersDaoFactory.provideBloggingRemindersDao(singletonC.databaseModule, singletonC.provideDatabaseProvider.get());

        case 122: // org.wordpress.android.ui.mysite.SelectedSiteRepository 
        return (T) new SelectedSiteRepository(singletonC.dispatcherProvider.get(), singletonC.siteSettingsInterfaceWrapperFactory(), singletonC.appPrefsWrapperProvider.get());

        case 123: // com.android.volley.toolbox.ImageLoader.ImageCache 
        return (T) LegacyModule_ProvideImageCacheFactory.provideImageCache(singletonC.legacyModule);

        case 124: // org.wordpress.android.networking.OAuthAuthenticator 
        return (T) LegacyModule_ProvideOAuthAuthenicatorFactory.provideOAuthAuthenicator(singletonC.legacyModule, singletonC.accessTokenProvider.get());

        case 125: // org.wordpress.android.ui.accounts.UnifiedLoginTracker 
        return (T) new UnifiedLoginTracker(singletonC.analyticsTrackerWrapperProvider.get());

        case 126: // org.wordpress.android.fluxc.store.QuickStartStore 
        return (T) new QuickStartStore(singletonC.quickStartSqlUtilsProvider.get(), singletonC.dispatcherProvider.get());

        case 127: // org.wordpress.android.fluxc.persistence.QuickStartSqlUtils 
        return (T) new QuickStartSqlUtils();

        case 128: // org.wordpress.android.push.GCMMessageHandler 
        return (T) GCMMessageHandler_Factory.newInstance(singletonC.systemNotificationsTracker());

        case 129: // org.wordpress.android.viewmodel.ViewModelFactory 
        return (T) new ViewModelFactory(singletonC.mapOfClassOfAndProviderOfViewModel());

        case 130: // org.wordpress.android.viewmodel.plugins.PluginBrowserViewModel 
        return (T) new PluginBrowserViewModel(singletonC.dispatcherProvider.get(), singletonC.pluginStoreProvider.get(), singletonC.siteStoreProvider.get());

        case 131: // org.wordpress.android.fluxc.store.PluginStore 
        return (T) new PluginStore(singletonC.dispatcherProvider.get(), singletonC.pluginRestClientProvider.get(), singletonC.pluginWPOrgClientProvider.get(), singletonC.pluginCoroutineStore(), singletonC.pluginJetpackTunnelRestClientProvider.get());

        case 132: // org.wordpress.android.fluxc.network.rest.wpcom.plugin.PluginRestClient 
        return (T) new PluginRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 133: // org.wordpress.android.fluxc.network.wporg.plugin.PluginWPOrgClient 
        return (T) new PluginWPOrgClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.userAgent());

        case 134: // org.wordpress.android.fluxc.network.rest.wpapi.plugin.PluginWPAPIRestClient 
        return (T) new PluginWPAPIRestClient(new WPAPIGsonRequestBuilder(), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent());

        case 135: // org.wordpress.android.fluxc.network.rest.wpapi.NonceRestClient 
        return (T) new NonceRestClient(new WPAPIEncodedBodyRequestBuilder(), new CurrentTimeProvider(), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent());

        case 136: // org.wordpress.android.fluxc.network.rest.wpcom.plugin.PluginJetpackTunnelRestClient 
        return (T) new PluginJetpackTunnelRestClient(singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 137: // org.wordpress.android.viewmodel.activitylog.ActivityLogViewModel 
        return (T) new ActivityLogViewModel(singletonC.activityLogStoreProvider.get(), singletonC.getRestoreStatusUseCase(), singletonC.getBackupDownloadStatusUseCase(), singletonC.postDismissBackupDownloadUseCase(), singletonC.resourceProvider(), singletonC.dateUtils(), singletonC.activityLogTrackerProvider.get(), singletonC.jetpackCapabilitiesUseCase());

        case 138: // org.wordpress.android.fluxc.store.ActivityLogStore 
        return (T) new ActivityLogStore(singletonC.activityLogRestClientProvider.get(), singletonC.activityLogSqlUtilsProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 139: // org.wordpress.android.fluxc.network.rest.wpcom.activity.ActivityLogRestClient 
        return (T) new ActivityLogRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), new TimeZoneProvider(), singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 140: // org.wordpress.android.fluxc.persistence.ActivityLogSqlUtils 
        return (T) new ActivityLogSqlUtils(singletonC.formattableContentMapper());

        case 141: // org.wordpress.android.util.analytics.ActivityLogTracker 
        return (T) new ActivityLogTracker(singletonC.analyticsTrackerWrapperProvider.get(), singletonC.dateTimeUtilsWrapper());

        case 142: // org.wordpress.android.viewmodel.activitylog.ActivityLogDetailViewModel 
        return (T) new ActivityLogDetailViewModel(singletonC.dispatcherProvider.get(), singletonC.activityLogStoreProvider.get(), singletonC.resourceProvider(), singletonC.htmlMessageUtils());

        case 143: // org.wordpress.android.viewmodel.pages.PagesViewModel 
        return (T) new PagesViewModel(singletonC.pageStoreProvider.get(), singletonC.postStoreProvider.get(), singletonC.dispatcherProvider.get(), singletonC.actionPerformer(), singletonC.networkUtilsWrapperProvider.get(), singletonC.eventBusWrapperProvider.get(), singletonC.siteStoreProvider.get(), singletonC.previewStateHelperProvider.get(), singletonC.uploadStarterProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), new AutoSaveConflictResolver(), singletonC.postModelUploadStatusTracker(), new org.wordpress.android.viewmodel.pages.PageListEventListener.Factory(), singletonC.siteOptionsStore(), new AppLogWrapper(), singletonC.accountStoreProvider.get(), singletonC.appPrefsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 144: // org.wordpress.android.ui.posts.PreviewStateHelper 
        return (T) new PreviewStateHelper();

        case 145: // org.wordpress.android.fluxc.network.rest.wpcom.site.SiteHomepageRestClient 
        return (T) new SiteHomepageRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 146: // org.wordpress.android.viewmodel.pages.SearchListViewModel 
        return (T) new SearchListViewModel(singletonC.createPageListItemLabelsUseCase(), new PostModelUploadUiStateUseCase(), new CreatePageListItemActionsUseCase(), singletonC.pageItemProgressUiStateUseCase(), singletonC.resourceProvider(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 147: // org.wordpress.android.viewmodel.pages.PageListViewModel 
        return (T) new PageListViewModel(singletonC.createPageListItemLabelsUseCase(), new PostModelUploadUiStateUseCase(), new CreatePageListItemActionsUseCase(), singletonC.pageItemProgressUiStateUseCase(), singletonC.mediaStoreProvider.get(), singletonC.dispatcherProvider.get(), singletonC.localeManagerWrapper(), singletonC.accountStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 148: // org.wordpress.android.viewmodel.pages.PageParentViewModel 
        return (T) new PageParentViewModel(singletonC.pageStoreProvider.get(), singletonC.resourceProvider(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 149: // org.wordpress.android.ui.reader.viewmodels.ReaderPostListViewModel 
        return (T) new ReaderPostListViewModel(singletonC.readerPostCardActionsHandler(), singletonC.reblogUseCaseProvider.get(), singletonC.readerTrackerProvider.get(), singletonC.readerSeenStatusToggleUseCase(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 150: // org.wordpress.android.ui.reader.reblog.ReblogUseCase 
        return (T) new ReblogUseCase(singletonC.siteStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 151: // org.wordpress.android.ui.reader.actions.ReaderPostActionsWrapper 
        return (T) new ReaderPostActionsWrapper(singletonC.siteStoreProvider.get());

        case 152: // org.wordpress.android.datasets.wrappers.ReaderPostTableWrapper 
        return (T) new ReaderPostTableWrapper();

        case 153: // org.wordpress.android.ui.reader.utils.ReaderUtilsWrapper 
        return (T) new ReaderUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), new TagUpdateClientUtilsProvider());

        case 154: // org.wordpress.android.ui.reader.viewmodels.ReaderPostDetailViewModel 
        return (T) new ReaderPostDetailViewModel(singletonC.readerPostCardActionsHandler(), singletonC.readerUtilsWrapperProvider.get(), singletonC.readerPostTableWrapperProvider.get(), singletonC.readerPostMoreButtonUiStateBuilderProvider.get(), singletonC.readerPostDetailUiStateBuilderProvider.get(), singletonC.reblogUseCaseProvider.get(), singletonC.readerFetchRelatedPostsUseCase(), singletonC.readerGetPostUseCase(), singletonC.readerFetchPostUseCase(), singletonC.siteStoreProvider.get(), singletonC.accountStoreProvider.get(), singletonC.readerTrackerProvider.get(), singletonC.eventBusWrapperProvider.get(), new WpUrlUtilsWrapper(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.getLikesHandler(), singletonC.likesEnhancementsFeatureConfig(), singletonC.engagementUtilsProvider.get(), singletonC.htmlMessageUtils(), singletonC.contextProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.commentsSnippetFeatureConfig(), singletonC.readerCommentTableWrapperProvider.get(), singletonC.readerCommentServiceStarterWrapperProvider.get());

        case 155: // org.wordpress.android.ui.reader.discover.ReaderPostMoreButtonUiStateBuilder 
        return (T) new ReaderPostMoreButtonUiStateBuilder(singletonC.readerPostTableWrapperProvider.get(), singletonC.readerBlogTableWrapper(), singletonC.readerUtilsWrapperProvider.get(), singletonC.seenUnseenWithCounterFeatureConfig(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 156: // org.wordpress.android.ui.reader.ReaderPostDetailUiStateBuilder 
        return (T) new ReaderPostDetailUiStateBuilder(singletonC.readerPostDetailsHeaderViewUiStateBuilderProvider.get(), singletonC.readerPostUiStateBuilderProvider.get(), singletonC.featuredImageUtils(), singletonC.readerUtilsWrapperProvider.get(), singletonC.displayUtilsWrapperProvider.get(), singletonC.contextProvider.get(), new HtmlUtilsWrapper(), singletonC.htmlMessageUtils(), singletonC.dateTimeUtilsWrapper(), singletonC.gravatarUtilsWrapperProvider.get(), singletonC.threadedCommentsUtilsProvider.get(), singletonC.resourceProvider());

        case 157: // org.wordpress.android.ui.reader.views.ReaderPostDetailsHeaderViewUiStateBuilder 
        return (T) new ReaderPostDetailsHeaderViewUiStateBuilder(singletonC.accountStoreProvider.get(), singletonC.readerPostUiStateBuilderProvider.get(), singletonC.readerPostTagsUiStateBuilderProvider.get(), singletonC.dateTimeUtilsWrapper());

        case 158: // org.wordpress.android.ui.reader.discover.ReaderPostUiStateBuilder 
        return (T) new ReaderPostUiStateBuilder(singletonC.accountStoreProvider.get(), singletonC.urlUtilsWrapperProvider.get(), singletonC.gravatarUtilsWrapperProvider.get(), singletonC.dateTimeUtilsWrapper(), singletonC.readerImageScannerProvider.get(), singletonC.readerUtilsWrapperProvider.get(), singletonC.readerPostTagsUiStateBuilderProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 159: // org.wordpress.android.util.UrlUtilsWrapper 
        return (T) new UrlUtilsWrapper();

        case 160: // org.wordpress.android.util.GravatarUtilsWrapper 
        return (T) new GravatarUtilsWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 161: // org.wordpress.android.ui.reader.utils.ReaderImageScannerProvider 
        return (T) new ReaderImageScannerProvider();

        case 162: // org.wordpress.android.ui.reader.discover.ReaderPostTagsUiStateBuilder 
        return (T) new ReaderPostTagsUiStateBuilder(singletonC.contextProvider.get(), singletonC.resourceProvider());

        case 163: // org.wordpress.android.util.PhotonUtilsWrapper 
        return (T) new PhotonUtilsWrapper();

        case 164: // org.wordpress.android.util.DisplayUtilsWrapper 
        return (T) new DisplayUtilsWrapper(singletonC.contextProvider.get());

        case 165: // org.wordpress.android.ui.reader.utils.ThreadedCommentsUtils 
        return (T) new ThreadedCommentsUtils(singletonC.contextProvider.get());

        case 166: // org.wordpress.android.fluxc.store.CommentStore 
        return (T) new CommentStore(singletonC.dispatcherProvider.get(), singletonC.commentRestClientProvider.get(), singletonC.commentXMLRPCClientProvider.get());

        case 167: // org.wordpress.android.fluxc.network.rest.wpcom.comment.CommentRestClient 
        return (T) new CommentRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), new LikesUtilsProvider());

        case 168: // org.wordpress.android.fluxc.network.xmlrpc.comment.CommentXMLRPCClient 
        return (T) new CommentXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager());

        case 169: // org.wordpress.android.ui.engagement.EngagementUtils 
        return (T) new EngagementUtils();

        case 170: // org.wordpress.android.datasets.wrappers.ReaderCommentTableWrapper 
        return (T) new ReaderCommentTableWrapper();

        case 171: // org.wordpress.android.ui.reader.services.comment.wrapper.ReaderCommentServiceStarterWrapper 
        return (T) new ReaderCommentServiceStarterWrapper();

        case 172: // org.wordpress.android.ui.reader.subfilter.SubFilterViewModel 
        return (T) new SubFilterViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.appPrefsWrapperProvider.get(), singletonC.subfilterListItemMapper(), singletonC.eventBusWrapperProvider.get(), singletonC.accountStoreProvider.get(), singletonC.readerTrackerProvider.get());

        case 173: // org.wordpress.android.ui.reader.viewmodels.SubfilterPageViewModel 
        return (T) new SubfilterPageViewModel(singletonC.accountStoreProvider.get());

        case 174: // org.wordpress.android.ui.JetpackRemoteInstallViewModel 
        return (T) new JetpackRemoteInstallViewModel(singletonC.dispatcherProvider.get(), singletonC.accountStoreProvider.get(), singletonC.siteStoreProvider.get(), singletonC.jetpackStoreProvider.get());

        case 175: // org.wordpress.android.fluxc.store.JetpackStore 
        return (T) new JetpackStore(singletonC.jetpackRestClientProvider.get(), singletonC.siteStoreProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 176: // org.wordpress.android.fluxc.network.rest.wpcom.jetpacktunnel.JetpackRestClient 
        return (T) new JetpackRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.jetpackTunnelGsonRequestBuilderProvider.get());

        case 177: // org.wordpress.android.fluxc.network.rest.wpcom.jetpacktunnel.JetpackTunnelGsonRequestBuilder 
        return (T) new JetpackTunnelGsonRequestBuilder();

        case 178: // org.wordpress.android.viewmodel.quickstart.QuickStartViewModel 
        return (T) new QuickStartViewModel(singletonC.quickStartStoreProvider.get());

        case 179: // org.wordpress.android.ui.stats.refresh.lists.InsightsListViewModel 
        return (T) new InsightsListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideInsightsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory(), singletonC.itemPopupMenuHandlerProvider.get(), singletonC.newsCardHandlerProvider.get(), singletonC.actionCardHandlerProvider.get());

        case 180: // @javax.inject.Named("InsightsUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideInsightsUseCaseFactory.provideInsightsUseCase(singletonC.statsModule, singletonC.statsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideBlockInsightsUseCasesProvider.get(), singletonC.uiModelMapper());

        case 181: // org.wordpress.android.ui.stats.refresh.utils.StatsSiteProvider 
        return (T) new StatsSiteProvider(singletonC.siteStoreProvider.get(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.dispatcherProvider.get());

        case 182: // @javax.inject.Named("BlockInsightsUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.BaseStatsUseCase<?,?>> 
        return (T) StatsModule_ProvideBlockInsightsUseCasesFactory.provideBlockInsightsUseCases(singletonC.statsModule, singletonC.statsRevampV2FeatureConfig(), singletonC.viewsAndVisitorsUseCaseFactory(), singletonC.allTimeStatsUseCase(), singletonC.latestPostSummaryUseCase(), singletonC.todayStatsUseCase(), singletonC.followersUseCaseFactory(), singletonC.commentsUseCase(), singletonC.mostPopularInsightsUseCase(), singletonC.tagsAndCategoriesUseCaseFactory(), singletonC.publicizeUseCaseFactory(), singletonC.postingActivityUseCase(), singletonC.followerTotalsUseCase(), singletonC.totalLikesUseCaseFactory(), singletonC.totalCommentsUseCaseFactory(), singletonC.totalFollowersUseCaseFactory(), singletonC.annualSiteStatsUseCaseFactory(), singletonC.managementControlUseCase(), singletonC.managementNewsCardUseCase(), singletonC.actionCardGrowUseCase(), singletonC.actionCardReminderUseCase(), singletonC.actionCardScheduleUseCase());

        case 183: // org.wordpress.android.ui.stats.refresh.lists.sections.granular.SelectedDateProvider 
        return (T) new SelectedDateProvider(singletonC.statsDateFormatter(), singletonC.analyticsTrackerWrapperProvider.get());

        case 184: // org.wordpress.android.fluxc.store.stats.insights.AllTimeInsightsStore 
        return (T) new AllTimeInsightsStore(singletonC.allTimeInsightsRestClientProvider.get(), singletonC.allTimeSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 185: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.AllTimeInsightsRestClient 
        return (T) new AllTimeInsightsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 186: // org.wordpress.android.ui.stats.refresh.utils.ItemPopupMenuHandler 
        return (T) new ItemPopupMenuHandler(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsStoreProvider.get(), singletonC.statsSiteProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

        case 187: // org.wordpress.android.fluxc.store.stats.insights.LatestPostInsightsStore 
        return (T) new LatestPostInsightsStore(singletonC.latestPostInsightsRestClientProvider.get(), singletonC.latestPostDetailSqlUtils(), singletonC.detailedPostStatsSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 188: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.LatestPostInsightsRestClient 
        return (T) new LatestPostInsightsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 189: // org.wordpress.android.fluxc.store.stats.insights.FollowersStore 
        return (T) new FollowersStore(singletonC.followersRestClientProvider.get(), singletonC.wpComFollowersSqlUtils(), singletonC.emailFollowersSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 190: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.FollowersRestClient 
        return (T) new FollowersRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 191: // org.wordpress.android.fluxc.store.stats.insights.CommentsStore 
        return (T) new CommentsStore(singletonC.commentsRestClientProvider.get(), singletonC.commentsInsightsSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 192: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.CommentsRestClient 
        return (T) new CommentsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 193: // org.wordpress.android.fluxc.store.stats.insights.MostPopularInsightsStore 
        return (T) new MostPopularInsightsStore(singletonC.mostPopularRestClientProvider.get(), singletonC.mostPopularSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 194: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.MostPopularRestClient 
        return (T) new MostPopularRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 195: // org.wordpress.android.ui.stats.refresh.utils.ActionCardHandler 
        return (T) new ActionCardHandler(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsStoreProvider.get(), singletonC.statsSiteProvider.get());

        case 196: // org.wordpress.android.fluxc.store.stats.insights.TagsStore 
        return (T) new TagsStore(singletonC.tagsRestClientProvider.get(), singletonC.tagsSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 197: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.TagsRestClient 
        return (T) new TagsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 198: // org.wordpress.android.fluxc.store.stats.insights.PublicizeStore 
        return (T) new PublicizeStore(singletonC.publicizeRestClientProvider.get(), singletonC.publicizeSqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 199: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.PublicizeRestClient 
        return (T) new PublicizeRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        default: throw new AssertionError(id);
      }
    }

    @SuppressWarnings("unchecked")
    private T get2() {
      switch (id) {
        case 200: // org.wordpress.android.fluxc.store.stats.insights.PostingActivityStore 
        return (T) new PostingActivityStore(singletonC.postingActivityRestClientProvider.get(), singletonC.postingActivitySqlUtils(), singletonC.coroutineEngine(), singletonC.insightsMapper());

        case 201: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.PostingActivityRestClient 
        return (T) new PostingActivityRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 202: // org.wordpress.android.fluxc.store.stats.insights.SummaryStore 
        return (T) new SummaryStore(singletonC.summaryRestClientProvider.get(), singletonC.summarySqlUtils(), singletonC.insightsMapper(), singletonC.coroutineEngine());

        case 203: // org.wordpress.android.fluxc.network.rest.wpcom.stats.insights.SummaryRestClient 
        return (T) new SummaryRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 204: // org.wordpress.android.ui.stats.refresh.utils.NewsCardHandler 
        return (T) new NewsCardHandler(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsStoreProvider.get());

        case 205: // org.wordpress.android.ui.stats.refresh.lists.DaysListViewModel 
        return (T) new DaysListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideDayStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 206: // @javax.inject.Named("DayStatsUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideDayStatsUseCaseFactory.provideDayStatsUseCase(singletonC.statsModule, singletonC.statsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideGranularUseCaseFactoriesProvider.get(), singletonC.uiModelMapper());

        case 207: // @javax.inject.Named("GranularUseCaseFactories") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.granular.GranularUseCaseFactory> 
        return (T) StatsModule_ProvideGranularUseCaseFactoriesFactory.provideGranularUseCaseFactories(singletonC.statsModule, singletonC.postsAndPagesUseCaseFactory(), singletonC.referrersUseCaseFactory(), singletonC.clicksUseCaseFactory(), singletonC.countryViewsUseCaseFactory(), singletonC.videoPlaysUseCaseFactory(), singletonC.searchTermsUseCaseFactory(), singletonC.authorsUseCaseFactory(), singletonC.overviewUseCaseFactory(), singletonC.fileDownloadsUseCaseFactory());

        case 208: // org.wordpress.android.fluxc.store.stats.time.PostAndPageViewsStore 
        return (T) new PostAndPageViewsStore(singletonC.postAndPageViewsRestClientProvider.get(), singletonC.postsAndPagesSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 209: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.PostAndPageViewsRestClient 
        return (T) new PostAndPageViewsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 210: // org.wordpress.android.fluxc.store.stats.time.ReferrersStore 
        return (T) new ReferrersStore(singletonC.referrersRestClientProvider.get(), singletonC.referrersSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 211: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.ReferrersRestClient 
        return (T) new ReferrersRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.provideGsonProvider.get(), singletonC.statsUtils2());

        case 212: // org.wordpress.android.ui.stats.refresh.utils.ReferrerPopupMenuHandler 
        return (T) new ReferrerPopupMenuHandler(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.analyticsTrackerWrapperProvider.get());

        case 213: // org.wordpress.android.fluxc.store.stats.time.ClicksStore 
        return (T) new ClicksStore(singletonC.clicksRestClientProvider.get(), singletonC.clicksSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 214: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.ClicksRestClient 
        return (T) new ClicksRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.provideGsonProvider.get(), singletonC.statsUtils2());

        case 215: // org.wordpress.android.fluxc.store.stats.time.CountryViewsStore 
        return (T) new CountryViewsStore(singletonC.countryViewsRestClientProvider.get(), singletonC.countryViewsSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 216: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.CountryViewsRestClient 
        return (T) new CountryViewsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 217: // org.wordpress.android.fluxc.store.stats.time.VideoPlaysStore 
        return (T) new VideoPlaysStore(singletonC.videoPlaysRestClientProvider.get(), singletonC.videoPlaysSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 218: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.VideoPlaysRestClient 
        return (T) new VideoPlaysRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.provideGsonProvider.get(), singletonC.statsUtils2());

        case 219: // org.wordpress.android.fluxc.store.stats.time.SearchTermsStore 
        return (T) new SearchTermsStore(singletonC.searchTermsRestClientProvider.get(), singletonC.searchTermsSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 220: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.SearchTermsRestClient 
        return (T) new SearchTermsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.statsUtils2());

        case 221: // org.wordpress.android.fluxc.store.stats.time.AuthorsStore 
        return (T) new AuthorsStore(singletonC.authorsRestClientProvider.get(), singletonC.authorsSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 222: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.AuthorsRestClient 
        return (T) new AuthorsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.provideGsonProvider.get(), singletonC.statsUtils2());

        case 223: // org.wordpress.android.fluxc.store.stats.time.FileDownloadsStore 
        return (T) new FileDownloadsStore(singletonC.fileDownloadsRestClientProvider.get(), singletonC.fileDownloadsSqlUtils(), singletonC.timeStatsMapper(), singletonC.coroutineEngine());

        case 224: // org.wordpress.android.fluxc.network.rest.wpcom.stats.time.FileDownloadsRestClient 
        return (T) new FileDownloadsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.provideGsonProvider.get(), singletonC.statsUtils2());

        case 225: // org.wordpress.android.ui.stats.refresh.lists.WeeksListViewModel 
        return (T) new WeeksListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideWeekStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 226: // @javax.inject.Named("WeekStatsUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideWeekStatsUseCaseFactory.provideWeekStatsUseCase(singletonC.statsModule, singletonC.statsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideGranularUseCaseFactoriesProvider.get(), singletonC.uiModelMapper());

        case 227: // org.wordpress.android.ui.stats.refresh.lists.MonthsListViewModel 
        return (T) new MonthsListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideMonthStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 228: // @javax.inject.Named("MonthStatsUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideMonthStatsUseCaseFactory.provideMonthStatsUseCase(singletonC.statsModule, singletonC.statsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideGranularUseCaseFactoriesProvider.get(), singletonC.uiModelMapper());

        case 229: // org.wordpress.android.ui.stats.refresh.lists.YearsListViewModel 
        return (T) new YearsListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideYearStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 230: // @javax.inject.Named("YearStatsUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideYearStatsUseCaseFactory.provideYearStatsUseCase(singletonC.statsModule, singletonC.statsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideGranularUseCaseFactoriesProvider.get(), singletonC.uiModelMapper());

        case 231: // org.wordpress.android.ui.stats.refresh.lists.detail.StatsDetailViewModel 
        return (T) new StatsDetailViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideDetailStatsUseCaseProvider.get(), singletonC.statsSiteProvider.get(), singletonC.statsPostProvider.get(), singletonC.networkUtilsWrapperProvider.get());

        case 232: // @javax.inject.Named("BlockDetailUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideDetailStatsUseCaseFactory.provideDetailStatsUseCase(singletonC.statsModule, singletonC.statsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideDetailUseCasesProvider.get(), singletonC.uiModelMapper());

        case 233: // @javax.inject.Named("BlockDetailUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.BaseStatsUseCase<?,?>> 
        return (T) StatsModule_ProvideDetailUseCasesFactory.provideDetailUseCases(singletonC.statsModule, singletonC.postHeaderUseCase(), singletonC.postDayViewsUseCase(), singletonC.postMonthsAndYearsUseCaseFactory(), singletonC.postAverageViewsPerDayUseCaseFactory(), singletonC.postRecentWeeksUseCaseFactory());

        case 234: // org.wordpress.android.ui.stats.refresh.utils.StatsPostProvider 
        return (T) new StatsPostProvider();

        case 235: // org.wordpress.android.fluxc.store.stats.PostDetailStore 
        return (T) new PostDetailStore(singletonC.latestPostInsightsRestClientProvider.get(), singletonC.detailedPostStatsSqlUtils(), singletonC.coroutineEngine(), new PostDetailStatsMapper());

        case 236: // org.wordpress.android.ui.stats.refresh.lists.InsightsDetailListViewModel 
        return (T) new InsightsDetailListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideViewsAndVisitorsDetailUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 237: // @javax.inject.Named("ViewsAndVisitorsUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideViewsAndVisitorsDetailUseCaseFactory.provideViewsAndVisitorsDetailUseCase(singletonC.statsModule, ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideViewsAndVisitorsDetailUseCasesProvider.get(), singletonC.uiModelMapper());

        case 238: // @javax.inject.Named("BlockViewsAndVisitorsUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.granular.GranularUseCaseFactory> 
        return (T) StatsModule_ProvideViewsAndVisitorsDetailUseCasesFactory.provideViewsAndVisitorsDetailUseCases(singletonC.statsModule, singletonC.viewsAndVisitorsGranularUseCaseFactory(), singletonC.referrersUseCaseFactory(), singletonC.countryViewsUseCaseFactory());

        case 239: // org.wordpress.android.ui.stats.refresh.lists.detail.DetailListViewModel 
        return (T) new DetailListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideDetailStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 240: // org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsWidgetConfigureViewModel 
        return (T) new StatsWidgetConfigureViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.appPrefsWrapperProvider.get());

        case 241: // org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsSiteSelectionViewModel 
        return (T) new StatsSiteSelectionViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.siteStoreProvider.get(), singletonC.accountStoreProvider.get(), singletonC.appPrefsWrapperProvider.get());

        case 242: // org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsDataTypeSelectionViewModel 
        return (T) new StatsDataTypeSelectionViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.accountStoreProvider.get(), singletonC.appPrefsWrapperProvider.get());

        case 243: // org.wordpress.android.ui.stats.refresh.lists.widget.minified.StatsMinifiedWidgetConfigureViewModel 
        return (T) new StatsMinifiedWidgetConfigureViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.appPrefsWrapperProvider.get());

        case 244: // org.wordpress.android.ui.stats.refresh.lists.widget.configuration.StatsColorSelectionViewModel 
        return (T) new StatsColorSelectionViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.accountStoreProvider.get(), singletonC.appPrefsWrapperProvider.get());

        case 245: // org.wordpress.android.ui.stats.refresh.lists.sections.insights.management.InsightsManagementViewModel 
        return (T) new InsightsManagementViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.provideInsightsUseCaseProvider.get(), singletonC.statsSiteProvider.get(), singletonC.statsStoreProvider.get(), singletonC.insightsManagementMapper(), singletonC.analyticsTrackerWrapperProvider.get());

        case 246: // org.wordpress.android.viewmodel.history.HistoryViewModel 
        return (T) new HistoryViewModel(singletonC.dispatcherProvider.get(), singletonC.resourceProvider(), singletonC.networkUtilsWrapperProvider.get(), singletonC.postStoreProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.liveDataOfConnectionStatus());

        case 247: // org.wordpress.android.viewmodel.posts.PostListViewModel 
        return (T) new PostListViewModel(singletonC.dispatcherProvider.get(), singletonC.listStoreProvider.get(), singletonC.postStoreProvider.get(), singletonC.accountStoreProvider.get(), singletonC.postListItemUiStateHelper(), singletonC.networkUtilsWrapperProvider.get(), singletonC.uploadStarterProvider.get(), singletonC.readerUtilsWrapperProvider.get(), singletonC.uploadUtilsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.liveDataOfConnectionStatus());

        case 248: // org.wordpress.android.fluxc.store.ListStore 
        return (T) new ListStore(singletonC.listSqlUtilsProvider.get(), singletonC.listItemSqlUtilsProvider.get(), singletonC.provideCoroutineContextProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 249: // org.wordpress.android.fluxc.persistence.ListSqlUtils 
        return (T) new ListSqlUtils();

        case 250: // org.wordpress.android.fluxc.persistence.ListItemSqlUtils 
        return (T) new ListItemSqlUtils();

        case 251: // org.wordpress.android.ui.posts.PostListMainViewModel 
        return (T) new PostListMainViewModel(singletonC.dispatcherProvider.get(), singletonC.postStoreProvider.get(), singletonC.accountStoreProvider.get(), singletonC.uploadActionUseCaseProvider.get(), singletonC.uploadStoreProvider.get(), singletonC.mediaStoreProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.appPrefsWrapperProvider.get(), new org.wordpress.android.ui.posts.PostListEventListener.Factory(), singletonC.previewStateHelperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.savePostToDbUseCase(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.uploadStarterProvider.get());

        case 252: // org.wordpress.android.ui.plans.PlansViewModel 
        return (T) new PlansViewModel(singletonC.dispatcherProvider.get(), singletonC.planOffersStoreProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.analyticsTrackerWrapperProvider.get());

        case 253: // org.wordpress.android.fluxc.store.PlanOffersStore 
        return (T) new PlanOffersStore(singletonC.planOffersRestClientProvider.get(), singletonC.planOffersSqlUtilsProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 254: // org.wordpress.android.fluxc.network.rest.wpcom.planoffers.PlanOffersRestClient 
        return (T) new PlanOffersRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 255: // org.wordpress.android.fluxc.persistence.PlanOffersSqlUtils 
        return (T) new PlanOffersSqlUtils(singletonC.providePlanOffersDaoProvider.get(), singletonC.planOffersMapperProvider.get());

        case 256: // org.wordpress.android.fluxc.persistence.PlanOffersDao 
        return (T) DatabaseModule_ProvidePlanOffersDaoFactory.providePlanOffersDao(singletonC.databaseModule, singletonC.provideDatabaseProvider.get());

        case 257: // org.wordpress.android.fluxc.model.plans.PlanOffersMapper 
        return (T) new PlanOffersMapper();

        case 258: // org.wordpress.android.ui.domains.DomainsDashboardViewModel 
        return (T) new DomainsDashboardViewModel(singletonC.siteStoreProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.htmlMessageUtils(), singletonC.fetchPlansUseCase(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 259: // org.wordpress.android.ui.domains.DomainSuggestionsViewModel 
        return (T) new DomainSuggestionsViewModel(singletonC.productsStoreProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.dispatcherProvider.get(), ThreadModule_ProvideDebouncerFactory.provideDebouncer(singletonC.threadModule), singletonC.siteDomainsFeatureConfig(), singletonC.createCartUseCase(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 260: // org.wordpress.android.fluxc.store.ProductsStore 
        return (T) new ProductsStore(singletonC.productsRestClientProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 261: // org.wordpress.android.fluxc.network.rest.wpcom.products.ProductsRestClient 
        return (T) new ProductsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 262: // org.wordpress.android.fluxc.store.TransactionsStore 
        return (T) new TransactionsStore(singletonC.transactionsRestClientProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 263: // org.wordpress.android.fluxc.network.rest.wpcom.transactions.TransactionsRestClient 
        return (T) new TransactionsRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 264: // org.wordpress.android.viewmodel.wpwebview.WPWebViewViewModel 
        return (T) new WPWebViewViewModel(singletonC.displayUtilsWrapperProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.liveDataOfConnectionStatus());

        case 265: // org.wordpress.android.ui.domains.DomainRegistrationDetailsViewModel 
        return (T) new DomainRegistrationDetailsViewModel(singletonC.dispatcherProvider.get(), singletonC.transactionsStoreProvider.get(), singletonC.siteStoreProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 266: // org.wordpress.android.ui.domains.DomainRegistrationMainViewModel 
        return (T) new DomainRegistrationMainViewModel(singletonC.analyticsTrackerWrapperProvider.get());

        case 267: // org.wordpress.android.ui.posts.editor.StorePostViewModel 
        return (T) new StorePostViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.siteStoreProvider.get(), singletonC.postUtilsWrapperProvider.get(), singletonC.uploadServiceFacade(), singletonC.savePostToDbUseCase(), singletonC.networkUtilsWrapperProvider.get(), singletonC.dispatcherProvider.get());

        case 268: // org.wordpress.android.ui.posts.EditPostPublishSettingsViewModel 
        return (T) new EditPostPublishSettingsViewModel(singletonC.resourceProvider(), singletonC.postSettingsUtils(), singletonC.localeManagerWrapper(), singletonC.postSchedulingNotificationStoreProvider.get(), singletonC.siteStoreProvider.get());

        case 269: // org.wordpress.android.fluxc.store.PostSchedulingNotificationStore 
        return (T) new PostSchedulingNotificationStore(singletonC.postSchedulingNotificationSqlUtilsProvider.get());

        case 270: // org.wordpress.android.fluxc.persistence.PostSchedulingNotificationSqlUtils 
        return (T) new PostSchedulingNotificationSqlUtils();

        case 271: // org.wordpress.android.ui.reader.ReaderCommentListViewModel 
        return (T) new ReaderCommentListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 272: // org.wordpress.android.viewmodel.main.WPMainActivityViewModel 
        return (T) new WPMainActivityViewModel(singletonC.featureAnnouncementProvider(), new org.wordpress.android.util.BuildConfigWrapper(), singletonC.appPrefsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.quickStartRepositoryProvider.get(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.accountStoreProvider.get(), singletonC.siteStoreProvider.get(), singletonC.mySiteDefaultTabExperiment(), singletonC.bloggingPromptsFeatureConfig(), singletonC.bloggingPromptsStoreProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 273: // org.wordpress.android.fluxc.store.WhatsNewStore 
        return (T) new WhatsNewStore(singletonC.whatsNewRestClientProvider.get(), singletonC.whatsNewSqlUtilsProvider.get(), singletonC.provideCoroutineContextProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 274: // org.wordpress.android.fluxc.network.rest.wpcom.whatsnew.WhatsNewRestClient 
        return (T) new WhatsNewRestClient(singletonC.dispatcherProvider.get(), singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 275: // org.wordpress.android.fluxc.persistence.WhatsNewSqlUtils 
        return (T) new WhatsNewSqlUtils();

        case 276: // org.wordpress.android.ui.mysite.cards.quickstart.QuickStartRepository 
        return (T) new QuickStartRepository(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.quickStartStoreProvider.get(), singletonC.quickStartUtilsWrapper(), singletonC.appPrefsWrapperProvider.get(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.resourceProvider(), singletonC.dispatcherProvider.get(), singletonC.eventBusWrapperProvider.get(), singletonC.dynamicCardStoreProvider.get(), new HtmlCompatWrapper(), singletonC.quickStartDynamicCardsFeatureConfig(), singletonC.contextProvider.get(), singletonC.htmlMessageUtils(), singletonC.quickStartTracker(), new org.wordpress.android.util.BuildConfigWrapper(), singletonC.mySiteDashboardTabsFeatureConfig(), singletonC.quickStartExistingUsersV2FeatureConfig());

        case 277: // org.wordpress.android.fluxc.store.DynamicCardStore 
        return (T) new DynamicCardStore(singletonC.coroutineEngine(), singletonC.dynamicCardSqlUtilsProvider.get());

        case 278: // org.wordpress.android.fluxc.persistence.DynamicCardSqlUtils 
        return (T) new DynamicCardSqlUtils();

        case 279: // org.wordpress.android.viewmodel.mlp.ModalLayoutPickerViewModel 
        return (T) new ModalLayoutPickerViewModel(singletonC.dispatcherProvider.get(), singletonC.siteStoreProvider.get(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.supportedBlocksProvider(), singletonC.modalLayoutPickerDimensionProvider(), singletonC.displayUtilsWrapperProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.modalLayoutPickerTrackerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 280: // org.wordpress.android.ui.mlp.ModalLayoutPickerTracker 
        return (T) new ModalLayoutPickerTracker(singletonC.analyticsTrackerWrapperProvider.get());

        case 281: // org.wordpress.android.viewmodel.accounts.PostSignupInterstitialViewModel 
        return (T) new PostSignupInterstitialViewModel(singletonC.appPrefsWrapperProvider.get(), singletonC.unifiedLoginTrackerProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

        case 282: // org.wordpress.android.viewmodel.pages.PageParentSearchViewModel 
        return (T) new PageParentSearchViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 283: // org.wordpress.android.ui.whatsnew.FeatureAnnouncementViewModel 
        return (T) new FeatureAnnouncementViewModel(singletonC.featureAnnouncementProvider(), singletonC.analyticsTrackerWrapperProvider.get(), new org.wordpress.android.util.BuildConfigWrapper(), singletonC.appPrefsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 284: // org.wordpress.android.viewmodel.main.SitePickerViewModel 
        return (T) new SitePickerViewModel();

        case 285: // org.wordpress.android.ui.reader.viewmodels.ReaderViewModel 
        return (T) new ReaderViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.appPrefsWrapperProvider.get(), new DateProvider(), singletonC.loadReaderTabsUseCaseProvider.get(), singletonC.readerTrackerProvider.get(), singletonC.accountStoreProvider.get(), singletonC.quickStartRepositoryProvider.get(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.snackbarSequencerProvider.get());

        case 286: // org.wordpress.android.ui.reader.usecases.LoadReaderTabsUseCase 
        return (T) new LoadReaderTabsUseCase(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.readerUtilsWrapperProvider.get());

        case 287: // org.wordpress.android.ui.reader.discover.ReaderDiscoverViewModel 
        return (T) new ReaderDiscoverViewModel(singletonC.readerPostUiStateBuilderProvider.get(), singletonC.readerPostMoreButtonUiStateBuilderProvider.get(), singletonC.readerPostCardActionsHandler(), singletonC.readerDiscoverDataProvider(), singletonC.reblogUseCaseProvider.get(), singletonC.readerUtilsWrapperProvider.get(), singletonC.appPrefsWrapperProvider.get(), singletonC.readerTrackerProvider.get(), singletonC.displayUtilsWrapperProvider.get(), singletonC.getFollowedTagsUseCase(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(singletonC.threadModule));

        case 288: // org.wordpress.android.ui.reader.utils.ReaderTagWrapper 
        return (T) new ReaderTagWrapper();

        case 289: // org.wordpress.android.ui.reader.repository.usecases.GetDiscoverCardsUseCase 
        return (T) new GetDiscoverCardsUseCase(singletonC.parseDiscoverCardsJsonUseCaseProvider.get(), singletonC.readerDiscoverCardsTableWrapperProvider.get(), singletonC.readerPostTableWrapperProvider.get(), singletonC.readerBlogTableWrapper(), new AppLogWrapper(), singletonC.appPrefsWrapperProvider.get(), ThreadModule_ProvideIoDispatcherFactory.provideIoDispatcher(singletonC.threadModule));

        case 290: // org.wordpress.android.ui.reader.repository.usecases.ParseDiscoverCardsJsonUseCase 
        return (T) new ParseDiscoverCardsJsonUseCase(singletonC.provideCrashLoggingProvider.get());

        case 291: // org.wordpress.android.datasets.ReaderDiscoverCardsTableWrapper 
        return (T) new ReaderDiscoverCardsTableWrapper();

        case 292: // org.wordpress.android.datasets.wrappers.ReaderTagTableWrapper 
        return (T) new ReaderTagTableWrapper();

        case 293: // org.wordpress.android.ui.reader.discover.interests.ReaderInterestsViewModel 
        return (T) new ReaderInterestsViewModel(singletonC.readerTagRepository(), singletonC.readerTrackerProvider.get());

        case 294: // org.wordpress.android.ui.reader.services.update.wrapper.ReaderUpdateServiceStarterWrapper 
        return (T) new ReaderUpdateServiceStarterWrapper();

        case 295: // org.wordpress.android.ui.prefs.homepage.HomepageSettingsViewModel 
        return (T) new HomepageSettingsViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.dispatcherProvider.get(), singletonC.homepageSettingsDataLoader(), singletonC.siteStoreProvider.get(), singletonC.siteOptionsStore());

        case 296: // org.wordpress.android.ui.posts.PrepublishingViewModel 
        return (T) new PrepublishingViewModel(singletonC.dispatcherProvider.get());

        case 297: // org.wordpress.android.ui.posts.PrepublishingHomeViewModel 
        return (T) new PrepublishingHomeViewModel(singletonC.getPostTagsUseCaseProvider.get(), singletonC.postSettingsUtils(), singletonC.getButtonUiStateUseCase(), singletonC.analyticsTrackerWrapperProvider.get(), new StoryRepositoryWrapper(), singletonC.updateStoryPostTitleUseCaseProvider.get(), singletonC.getCategoriesUseCaseProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 298: // org.wordpress.android.ui.posts.GetPostTagsUseCase 
        return (T) new GetPostTagsUseCase();

        case 299: // org.wordpress.android.ui.posts.editor.EditorActionsProvider 
        return (T) new EditorActionsProvider();

        default: throw new AssertionError(id);
      }
    }

    @SuppressWarnings("unchecked")
    private T get3() {
      switch (id) {
        case 300: // org.wordpress.android.ui.stories.usecase.UpdateStoryPostTitleUseCase 
        return (T) new UpdateStoryPostTitleUseCase();

        case 301: // org.wordpress.android.ui.posts.GetCategoriesUseCase 
        return (T) new GetCategoriesUseCase(singletonC.taxonomyStoreProvider.get(), singletonC.dispatcherProvider.get(), new AppLogWrapper(), singletonC.categoryNodeWrapperProvider.get());

        case 302: // org.wordpress.android.fluxc.store.TaxonomyStore 
        return (T) new TaxonomyStore(singletonC.dispatcherProvider.get(), singletonC.taxonomyRestClientProvider.get(), singletonC.taxonomyXMLRPCClientProvider.get());

        case 303: // org.wordpress.android.fluxc.network.rest.wpcom.taxonomy.TaxonomyRestClient 
        return (T) new TaxonomyRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 304: // org.wordpress.android.fluxc.network.xmlrpc.taxonomy.TaxonomyXMLRPCClient 
        return (T) new TaxonomyXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager());

        case 305: // org.wordpress.android.models.wrappers.CategoryNodeWrapper 
        return (T) new CategoryNodeWrapper();

        case 306: // org.wordpress.android.ui.posts.PrepublishingTagsViewModel 
        return (T) new PrepublishingTagsViewModel(singletonC.getPostTagsUseCaseProvider.get(), singletonC.updatePostTagsUseCaseProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 307: // org.wordpress.android.ui.posts.UpdatePostTagsUseCase 
        return (T) new UpdatePostTagsUseCase();

        case 308: // org.wordpress.android.ui.posts.prepublishing.PrepublishingPublishSettingsViewModel 
        return (T) new PrepublishingPublishSettingsViewModel(singletonC.resourceProvider(), singletonC.postSettingsUtils(), singletonC.localeManagerWrapper(), singletonC.postSchedulingNotificationStoreProvider.get(), singletonC.siteStoreProvider.get());

        case 309: // org.wordpress.android.ui.main.MeViewModel 
        return (T) new MeViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.selectedSiteRepositoryProvider.get(), singletonC.recommendApiCallsProvider(), singletonC.analyticsUtilsWrapperProvider.get());

        case 310: // org.wordpress.android.viewmodel.posts.PostListCreateMenuViewModel 
        return (T) new PostListCreateMenuViewModel(singletonC.appPrefsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

        case 311: // org.wordpress.android.ui.stories.StoryComposerViewModel 
        return (T) new StoryComposerViewModel(singletonC.systemNotificationsTracker(), singletonC.saveInitialPostUseCase(), singletonC.savePostToDbUseCase(), singletonC.setUntitledStoryTitleIfTitleEmptyUseCase(), new PostEditorAnalyticsSessionWrapper(), singletonC.dispatcherProvider.get());

        case 312: // org.wordpress.android.ui.stories.intro.StoriesIntroViewModel 
        return (T) new StoriesIntroViewModel(singletonC.analyticsTrackerWrapperProvider.get(), singletonC.appPrefsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 313: // org.wordpress.android.ui.photopicker.PhotoPickerViewModel 
        return (T) new PhotoPickerViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.deviceMediaListBuilder(), singletonC.analyticsUtilsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.permissionsHandler(), singletonC.resourceProvider(), singletonC.copyMediaToAppStorageUseCaseProvider.get(), singletonC.getMediaModelUseCaseProvider.get());

        case 314: // org.wordpress.android.ui.mediapicker.MediaPickerViewModel 
        return (T) new MediaPickerViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.mediaLoaderFactory(), singletonC.mediaInsertHandlerFactory(), singletonC.mediaPickerTracker(), singletonC.permissionsHandler(), singletonC.localeManagerWrapper(), singletonC.mediaUtilsWrapperProvider.get(), singletonC.mediaStoreProvider.get(), singletonC.resourceProvider());

        case 315: // org.wordpress.android.fluxc.store.StockMediaStore 
        return (T) new StockMediaStore(singletonC.dispatcherProvider.get(), singletonC.stockMediaRestClientProvider.get(), singletonC.coroutineEngine(), singletonC.stockMediaSqlUtilsProvider.get(), singletonC.mediaStoreProvider.get());

        case 316: // org.wordpress.android.fluxc.network.rest.wpcom.stockmedia.StockMediaRestClient 
        return (T) new StockMediaRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), new MediaResponseUtils(), singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 317: // org.wordpress.android.fluxc.persistence.StockMediaSqlUtils 
        return (T) new StockMediaSqlUtils();

        case 318: // org.wordpress.android.util.UriUtilsWrapper 
        return (T) new UriUtilsWrapper();

        case 319: // org.wordpress.android.util.MimeTypeMapUtilsWrapper 
        return (T) new MimeTypeMapUtilsWrapper();

        case 320: // org.wordpress.android.ui.debug.DebugSettingsViewModel 
        return (T) new DebugSettingsViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.manualFeatureConfig(), new RemoteConfig(), singletonC.debugUtils(), singletonC.weeklyRoundupNotifier(), singletonC.notificationManagerWrapper(), singletonC.contextProvider.get());

        case 321: // org.wordpress.android.ui.posts.PrepublishingCategoriesViewModel 
        return (T) new PrepublishingCategoriesViewModel(singletonC.getCategoriesUseCaseProvider.get(), singletonC.addCategoryUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.networkUtilsWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 322: // org.wordpress.android.ui.posts.AddCategoryUseCase 
        return (T) new AddCategoryUseCase(singletonC.dispatcherProvider.get());

        case 323: // org.wordpress.android.ui.posts.PrepublishingAddCategoryViewModel 
        return (T) new PrepublishingAddCategoryViewModel(singletonC.getCategoriesUseCaseProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.resourceProvider(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 324: // org.wordpress.android.ui.suggestion.SuggestionViewModel 
        return (T) new SuggestionViewModel(singletonC.suggestionSourceProvider(), singletonC.resourceProvider(), singletonC.networkUtilsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

        case 325: // org.wordpress.android.ui.activitylog.list.filter.ActivityLogTypeFilterViewModel 
        return (T) new ActivityLogTypeFilterViewModel(singletonC.activityLogStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 326: // org.wordpress.android.ui.jetpack.scan.ScanViewModel 
        return (T) new ScanViewModel(singletonC.scanStateListItemsBuilderProvider.get(), singletonC.fetchScanStateUseCase(), singletonC.startScanUseCase(), singletonC.fixThreatsUseCase(), singletonC.fetchFixThreatsStatusUseCase(), singletonC.scanStoreProvider.get(), singletonC.scanTrackerProvider.get(), singletonC.htmlMessageUtils(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 327: // org.wordpress.android.ui.jetpack.scan.builders.ScanStateListItemsBuilder 
        return (T) new ScanStateListItemsBuilder(new DateProvider(), singletonC.htmlMessageUtils(), singletonC.resourceProvider(), singletonC.threatItemBuilderProvider.get(), singletonC.threatDetailsListItemsBuilderProvider.get(), singletonC.scanStoreProvider.get());

        case 328: // org.wordpress.android.ui.jetpack.scan.builders.ThreatItemBuilder 
        return (T) new ThreatItemBuilder(singletonC.dateFormatWrapperProvider.get());

        case 329: // org.wordpress.android.util.DateFormatWrapper 
        return (T) new DateFormatWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 330: // org.wordpress.android.ui.jetpack.scan.details.ThreatDetailsListItemsBuilder 
        return (T) new ThreatDetailsListItemsBuilder(singletonC.htmlMessageUtils(), singletonC.threatItemBuilderProvider.get(), singletonC.dateFormatWrapperProvider.get());

        case 331: // org.wordpress.android.fluxc.store.ScanStore 
        return (T) new ScanStore(singletonC.scanRestClientProvider.get(), singletonC.scanSqlUtilsProvider.get(), singletonC.threatSqlUtilsProvider.get(), singletonC.coroutineEngine(), new AppLogWrapper(), singletonC.buildConfigWrapperProvider.get(), singletonC.dispatcherProvider.get());

        case 332: // org.wordpress.android.fluxc.network.rest.wpcom.scan.ScanRestClient 
        return (T) new ScanRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), new ThreatMapper(), singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 333: // org.wordpress.android.fluxc.persistence.ScanSqlUtils 
        return (T) new ScanSqlUtils();

        case 334: // org.wordpress.android.fluxc.persistence.ThreatSqlUtils 
        return (T) new ThreatSqlUtils(singletonC.provideGsonProvider.get(), new ThreatMapper());

        case 335: // org.wordpress.android.fluxc.utils.BuildConfigWrapper 
        return (T) new BuildConfigWrapper();

        case 336: // org.wordpress.android.util.analytics.ScanTracker 
        return (T) new ScanTracker(singletonC.scanStoreProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 337: // org.wordpress.android.ui.jetpack.scan.history.ScanHistoryViewModel 
        return (T) new ScanHistoryViewModel(singletonC.scanTrackerProvider.get(), singletonC.fetchScanHistoryUseCase(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 338: // org.wordpress.android.ui.jetpack.scan.history.ScanHistoryListViewModel 
        return (T) new ScanHistoryListViewModel(singletonC.threatItemBuilderProvider.get(), singletonC.scanTrackerProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 339: // org.wordpress.android.ui.jetpack.scan.details.ThreatDetailsViewModel 
        return (T) new ThreatDetailsViewModel(singletonC.getThreatModelUseCase(), singletonC.ignoreThreatUseCase(), singletonC.fixThreatsUseCase(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.scanStoreProvider.get(), singletonC.threatDetailsListItemsBuilderProvider.get(), singletonC.htmlMessageUtils(), singletonC.resourceProvider(), singletonC.scanTrackerProvider.get());

        case 340: // org.wordpress.android.ui.mysite.MySiteViewModel 
        return (T) new MySiteViewModel(singletonC.networkUtilsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.siteItemsBuilder(), singletonC.accountStoreProvider.get(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.wPMediaUtilsWrapper(), singletonC.mediaUtilsWrapperProvider.get(), singletonC.fluxCUtilsWrapperProvider.get(), singletonC.contextProvider.get(), singletonC.siteIconUploadHandler(), singletonC.siteStoriesHandler(), singletonC.displayUtilsWrapperProvider.get(), singletonC.quickStartRepositoryProvider.get(), new QuickStartCardBuilder(), singletonC.siteInfoHeaderCardBuilder(), singletonC.homePageDataLoaderProvider.get(), singletonC.quickStartDynamicCardsFeatureConfig(), singletonC.quickStartUtilsWrapper(), singletonC.snackbarSequencerProvider.get(), singletonC.cardsBuilder(), singletonC.dynamicCardsBuilder(), singletonC.landOnTheEditorFeatureConfig(), singletonC.mySiteSourceManager(), singletonC.cardsTracker(), singletonC.siteItemsTracker(), singletonC.domainRegistrationCardShownTracker(), new org.wordpress.android.util.BuildConfigWrapper(), singletonC.mySiteDashboardTabsFeatureConfig(), singletonC.bloggingPromptsFeatureConfig(), singletonC.appPrefsWrapperProvider.get(), singletonC.bloggingPromptsCardAnalyticsTracker(), singletonC.quickStartTracker(), singletonC.dispatcherProvider.get());

        case 341: // org.wordpress.android.ui.mysite.HomePageDataLoader 
        return (T) new HomePageDataLoader(singletonC.pageStoreProvider.get());

        case 342: // org.wordpress.android.fluxc.store.dashboard.CardsStore 
        return (T) new CardsStore(singletonC.cardsRestClientProvider.get(), singletonC.provideDashboardCardsDaoProvider.get(), singletonC.coroutineEngine());

        case 343: // org.wordpress.android.fluxc.network.rest.wpcom.dashboard.CardsRestClient 
        return (T) new CardsRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 344: // org.wordpress.android.fluxc.persistence.dashboard.CardsDao 
        return (T) DatabaseModule_ProvideDashboardCardsDaoFactory.provideDashboardCardsDao(singletonC.databaseModule, singletonC.provideDatabaseProvider.get());

        case 345: // org.wordpress.android.ui.posts.BasicDialogViewModel 
        return (T) new BasicDialogViewModel();

        case 346: // org.wordpress.android.ui.jetpack.backup.download.BackupDownloadViewModel 
        return (T) new BackupDownloadViewModel(singletonC.wizardManagerOfBackupDownloadStep(), singletonC.jetpackAvailableItemsProvider.get(), singletonC.getActivityLogItemUseCase(), singletonC.backupDownloadStateListItemBuilderProvider.get(), singletonC.postBackupDownloadUseCase(), singletonC.getBackupDownloadStatusUseCase(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 347: // org.wordpress.android.ui.jetpack.backup.download.BackupDownloadStepsProvider 
        return (T) new BackupDownloadStepsProvider();

        case 348: // org.wordpress.android.ui.jetpack.common.providers.JetpackAvailableItemsProvider 
        return (T) new JetpackAvailableItemsProvider();

        case 349: // org.wordpress.android.ui.jetpack.backup.download.builders.BackupDownloadStateListItemBuilder 
        return (T) new BackupDownloadStateListItemBuilder(singletonC.checkboxSpannableLabel());

        case 350: // org.wordpress.android.ui.jetpack.restore.RestoreViewModel 
        return (T) new RestoreViewModel(singletonC.wizardManagerOfRestoreStep(), singletonC.jetpackAvailableItemsProvider.get(), singletonC.getActivityLogItemUseCase(), singletonC.restoreStateListItemBuilderProvider.get(), singletonC.postRestoreUseCase(), singletonC.getRestoreStatusUseCase(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 351: // org.wordpress.android.ui.jetpack.restore.RestoreStepsProvider 
        return (T) new RestoreStepsProvider();

        case 352: // org.wordpress.android.ui.jetpack.restore.builders.RestoreStateListItemBuilder 
        return (T) new RestoreStateListItemBuilder(singletonC.checkboxSpannableLabel(), singletonC.htmlMessageUtils());

        case 353: // org.wordpress.android.ui.mysite.dynamiccards.DynamicCardMenuViewModel 
        return (T) new DynamicCardMenuViewModel();

        case 354: // org.wordpress.android.ui.people.PeopleInviteViewModel 
        return (T) new PeopleInviteViewModel(singletonC.inviteLinksHandler(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.dateTimeUtilsWrapper(), singletonC.contextProvider.get(), singletonC.invitePeopleUtilsProvider.get(), singletonC.analyticsUtilsWrapperProvider.get());

        case 355: // org.wordpress.android.models.InvitePeopleUtils 
        return (T) new InvitePeopleUtils(singletonC.siteStoreProvider.get(), singletonC.contextProvider.get(), singletonC.dateTimeUtilsWrapper(), singletonC.roleUtilsWrapperProvider.get(), singletonC.simpleDateFormatWrapperProvider.get());

        case 356: // org.wordpress.android.models.wrappers.RoleUtilsWrapper 
        return (T) new RoleUtilsWrapper();

        case 357: // org.wordpress.android.models.wrappers.SimpleDateFormatWrapper 
        return (T) new SimpleDateFormatWrapper();

        case 358: // org.wordpress.android.ui.engagement.EngagedPeopleListViewModel 
        return (T) new EngagedPeopleListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.getLikesHandler(), singletonC.readerUtilsWrapperProvider.get(), singletonC.engagementUtilsProvider.get(), singletonC.analyticsUtilsWrapperProvider.get());

        case 359: // org.wordpress.android.ui.engagement.UserProfileViewModel 
        return (T) new UserProfileViewModel(singletonC.resourceProvider(), singletonC.analyticsUtilsWrapperProvider.get());

        case 360: // org.wordpress.android.ui.prefs.timezone.SiteSettingsTimezoneViewModel 
        return (T) new SiteSettingsTimezoneViewModel(singletonC.resourceProvider());

        case 361: // org.wordpress.android.ui.accounts.login.jetpack.LoginNoSitesViewModel 
        return (T) new LoginNoSitesViewModel(singletonC.unifiedLoginTrackerProvider.get(), singletonC.accountStoreProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 362: // org.wordpress.android.ui.accounts.LoginEpilogueViewModel 
        return (T) new LoginEpilogueViewModel(singletonC.appPrefsWrapperProvider.get(), new org.wordpress.android.util.BuildConfigWrapper(), singletonC.siteStoreProvider.get(), singletonC.mySiteDefaultTabExperiment());

        case 363: // org.wordpress.android.ui.accounts.login.LoginPrologueViewModel 
        return (T) new LoginPrologueViewModel();

        case 364: // org.wordpress.android.ui.accounts.LoginViewModel 
        return (T) new LoginViewModel(new org.wordpress.android.util.BuildConfigWrapper());

        case 365: // org.wordpress.android.ui.deeplinks.DeepLinkingIntentReceiverViewModel 
        return (T) new DeepLinkingIntentReceiverViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.deepLinkHandlers(), singletonC.deepLinkUriUtils(), singletonC.accountStoreProvider.get(), singletonC.serverTrackingHandler(), singletonC.deepLinkTrackingUtils(), singletonC.analyticsUtilsWrapperProvider.get());

        case 366: // org.wordpress.android.ui.accounts.login.jetpack.LoginSiteCheckErrorViewModel 
        return (T) new LoginSiteCheckErrorViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 367: // org.wordpress.android.viewmodel.storage.StorageUtilsViewModel 
        return (T) new StorageUtilsViewModel(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.storageUtilsProvider.get());

        case 368: // org.wordpress.android.util.StorageUtilsProvider 
        return (T) new StorageUtilsProvider(singletonC.contextProvider.get());

        case 369: // org.wordpress.android.ui.comments.unified.UnifiedCommentListViewModel 
        return (T) new UnifiedCommentListViewModel(singletonC.commentListUiModelHelper(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.networkUtilsWrapperProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.unifiedCommentsListHandler(), singletonC.localCommentCacheUpdateHandlerProvider.get());

        case 370: // org.wordpress.android.models.usecases.PaginateCommentsResourceProvider 
        return (T) new PaginateCommentsResourceProvider(singletonC.commentsStoreProvider2.get(), singletonC.unrepliedCommentsUtils(), singletonC.networkUtilsWrapperProvider.get(), singletonC.resourceProvider());

        case 371: // org.wordpress.android.fluxc.store.CommentsStore 
        return (T) new org.wordpress.android.fluxc.store.CommentsStore(singletonC.commentsRestClientProvider2.get(), singletonC.commentsXMLRPCClientProvider.get(), singletonC.provideCommentsDaoProvider.get(), singletonC.commentsMapperProvider.get(), singletonC.coroutineEngine(), new AppLogWrapper(), singletonC.dispatcherProvider.get());

        case 372: // org.wordpress.android.fluxc.network.rest.wpcom.comment.CommentsRestClient 
        return (T) new org.wordpress.android.fluxc.network.rest.wpcom.comment.CommentsRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent(), singletonC.wPComGsonRequestBuilderProvider.get(), singletonC.commentErrorUtilsWrapperProvider.get(), singletonC.commentsMapperProvider.get());

        case 373: // org.wordpress.android.fluxc.utils.CommentErrorUtilsWrapper 
        return (T) new CommentErrorUtilsWrapper();

        case 374: // org.wordpress.android.fluxc.model.comments.CommentsMapper 
        return (T) new CommentsMapper(singletonC.dateTimeUtilsWrapperProvider.get());

        case 375: // org.wordpress.android.fluxc.utils.DateTimeUtilsWrapper 
        return (T) new DateTimeUtilsWrapper();

        case 376: // org.wordpress.android.fluxc.network.xmlrpc.comment.CommentsXMLRPCClient 
        return (T) new CommentsXMLRPCClient(singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent(), new HTTPAuthManager(), singletonC.commentErrorUtilsWrapperProvider.get(), singletonC.xMLRPCRequestBuilderProvider.get(), singletonC.commentsMapperProvider.get());

        case 377: // org.wordpress.android.fluxc.persistence.comments.CommentsDao 
        return (T) DatabaseModule_ProvideCommentsDaoFactory.provideCommentsDao(singletonC.databaseModule, singletonC.provideDatabaseProvider.get());

        case 378: // org.wordpress.android.models.usecases.ModerateCommentsResourceProvider 
        return (T) new ModerateCommentsResourceProvider(singletonC.commentsStoreProvider2.get(), singletonC.localCommentCacheUpdateHandlerProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 379: // org.wordpress.android.models.usecases.LocalCommentCacheUpdateHandler 
        return (T) new LocalCommentCacheUpdateHandler(new LocalCommentCacheUpdateUseCase());

        case 380: // org.wordpress.android.ui.bloggingreminders.BloggingRemindersViewModel 
        return (T) new BloggingRemindersViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.bloggingRemindersManager(), singletonC.bloggingRemindersStoreProvider.get(), singletonC.prologueBuilder(), singletonC.daySelectionBuilder(), singletonC.epilogueBuilder(), singletonC.dayLabelUtils(), singletonC.bloggingRemindersAnalyticsTracker(), singletonC.reminderScheduler(), new BloggingRemindersModelMapper(), singletonC.siteStoreProvider.get());

        case 381: // org.wordpress.android.ui.prefs.categories.list.CategoriesListViewModel 
        return (T) new CategoriesListViewModel(singletonC.getCategoriesUseCaseProvider.get(), singletonC.networkUtilsWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.dispatcherProvider.get());

        case 382: // org.wordpress.android.ui.prefs.language.LocalePickerViewModel 
        return (T) new LocalePickerViewModel(singletonC.resourceProvider(), new LocaleProvider());

        case 383: // org.wordpress.android.ui.prefs.categories.detail.CategoryDetailViewModel 
        return (T) new CategoryDetailViewModel(ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.networkUtilsWrapperProvider.get(), singletonC.getCategoriesUseCaseProvider.get(), singletonC.addCategoryUseCaseProvider.get(), singletonC.resourceProvider(), singletonC.dispatcherProvider.get(), singletonC.selectedSiteRepositoryProvider.get());

        case 384: // org.wordpress.android.ui.comments.unified.UnifiedCommentActivityViewModel 
        return (T) new UnifiedCommentActivityViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule));

        case 385: // org.wordpress.android.ui.comments.unified.UnifiedCommentsEditViewModel 
        return (T) new UnifiedCommentsEditViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.commentsStoreProvider2.get(), singletonC.resourceProvider(), singletonC.networkUtilsWrapperProvider.get(), singletonC.localCommentCacheUpdateHandlerProvider.get(), singletonC.getCommentUseCase(), singletonC.notificationsActionsWrapperProvider.get(), singletonC.readerCommentTableWrapperProvider.get(), singletonC.analyticsUtilsWrapperProvider.get());

        case 386: // org.wordpress.android.ui.notifications.utils.NotificationsActionsWrapper 
        return (T) new NotificationsActionsWrapper();

        case 387: // org.wordpress.android.ui.debug.cookies.DebugCookiesViewModel 
        return (T) new DebugCookiesViewModel(singletonC.debugCookieManager());

        case 388: // org.wordpress.android.ui.reader.viewmodels.ConversationNotificationsViewModel 
        return (T) new ConversationNotificationsViewModel(singletonC.readerFollowCommentsHandler(), singletonC.readerPostTableWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 389: // org.wordpress.android.ui.bloggingprompts.onboarding.BloggingPromptsOnboardingViewModel 
        return (T) new BloggingPromptsOnboardingViewModel(singletonC.siteStoreProvider.get(), new BloggingPromptsOnboardingUiStateMapper(), singletonC.selectedSiteRepositoryProvider.get(), singletonC.bloggingPromptsStoreProvider.get(), singletonC.bloggingPromptsOnboardingAnalyticsTracker(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 390: // org.wordpress.android.ui.posts.EditorBloggingPromptsViewModel 
        return (T) new EditorBloggingPromptsViewModel(singletonC.bloggingPromptsStoreProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 391: // org.wordpress.android.ui.stats.refresh.lists.TotalLikesDetailListViewModel 
        return (T) new TotalLikesDetailListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideLikesDetailStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 392: // @javax.inject.Named("LikesDetailUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideLikesDetailStatsUseCaseFactory.provideLikesDetailStatsUseCase(singletonC.statsModule, ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideLikesDetailUseCasesProvider.get(), singletonC.uiModelMapper());

        case 393: // @javax.inject.Named("LikesDetailUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.granular.GranularUseCaseFactory> 
        return (T) StatsModule_ProvideLikesDetailUseCasesFactory.provideLikesDetailUseCases(singletonC.statsModule, singletonC.totalLikesGranularUseCaseFactory(), singletonC.postsAndPagesUseCaseFactory());

        case 394: // org.wordpress.android.ui.featureintroduction.FeatureIntroductionViewModel 
        return (T) new FeatureIntroductionViewModel(singletonC.analyticsTrackerWrapperProvider.get());

        case 395: // org.wordpress.android.ui.stats.refresh.lists.TotalCommentsDetailListViewModel 
        return (T) new TotalCommentsDetailListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideCommentsDetailStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 396: // @javax.inject.Named("CommentsDetailUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideCommentsDetailStatsUseCaseFactory.provideCommentsDetailStatsUseCase(singletonC.statsModule, ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideCommentsDetailUseCasesProvider.get(), singletonC.uiModelMapper());

        case 397: // @javax.inject.Named("CommentsDetailUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.BaseStatsUseCase<?,?>> 
        return (T) StatsModule_ProvideCommentsDetailUseCasesFactory.provideCommentsDetailUseCases(singletonC.statsModule, singletonC.totalCommentsUseCaseFactory(), singletonC.authorsCommentsUseCase(), singletonC.postsCommentsUseCase());

        case 398: // org.wordpress.android.ui.stats.refresh.lists.TotalFollowersDetailListViewModel 
        return (T) new TotalFollowersDetailListViewModel(ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.provideFollowersDetailStatsUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get(), singletonC.statsDateSelectorFactory());

        case 399: // @javax.inject.Named("FollowersDetailUseCase") org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase 
        return (T) StatsModule_ProvideFollowersDetailStatsUseCaseFactory.provideFollowersDetailStatsUseCase(singletonC.statsModule, ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.statsSiteProvider.get(), singletonC.provideFollowersDetailUseCasesProvider.get(), singletonC.uiModelMapper());

        default: throw new AssertionError(id);
      }
    }

    @SuppressWarnings("unchecked")
    private T get4() {
      switch (id) {
        case 400: // @javax.inject.Named("FollowersDetailUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.BaseStatsUseCase<?,?>> 
        return (T) StatsModule_ProvideFollowersDetailUseCasesFactory.provideFollowersDetailUseCases(singletonC.statsModule, singletonC.totalFollowersUseCaseFactory(), singletonC.followerTypesUseCase(), singletonC.followersUseCaseFactory());

        case 401: // org.wordpress.android.ui.prefs.accountsettings.AccountSettingsViewModel 
        return (T) new AccountSettingsViewModel(singletonC.resourceProvider(), singletonC.networkUtilsWrapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), singletonC.fetchAccountSettingsUseCase(), singletonC.pushAccountSettingsUseCase(), singletonC.getAccountUseCase(), singletonC.getSitesUseCase(), new AccountSettingsOptimisticUpdateHandler());

        case 402: // @javax.inject.Named("DEFAULT_CONTINUATION") org.wordpress.android.ui.utils.ContinuationWrapper<org.wordpress.android.fluxc.store.AccountStore.OnAccountChanged> 
        return (T) AccountSettingsModule_ProvideDefaultContinuationWrapperFactory.provideDefaultContinuationWrapper(singletonC.accountSettingsModule);

        case 403: // @javax.inject.Named("CONCURRENT_CONTINUATION") org.wordpress.android.ui.utils.ContinuationWrapper<org.wordpress.android.fluxc.store.AccountStore.OnAccountChanged> 
        return (T) AccountSettingsModule_ProvideConcurrentContinuationWrapperFactory.provideConcurrentContinuationWrapper(singletonC.accountSettingsModule);

        case 404: // org.wordpress.android.ui.sitecreation.misc.SiteCreationTracker 
        return (T) new SiteCreationTracker(singletonC.analyticsTrackerWrapperProvider.get());

        case 405: // org.wordpress.android.ui.comments.unified.CommentsStoreAdapter 
        return (T) new CommentsStoreAdapter(singletonC.commentsStoreProvider2.get(), singletonC.commentsMapperProvider.get(), ThreadModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.threadModule), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule), singletonC.dispatcherProvider.get());

        case 406: // org.wordpress.android.ui.main.utils.MeGravatarLoader 
        return (T) new MeGravatarLoader(singletonC.appPrefsWrapperProvider.get(), singletonC.imageManagerProvider.get(), singletonC.resourceProvider());

        case 407: // org.wordpress.android.ui.media.ExoPlayerUtils 
        return (T) new ExoPlayerUtils(singletonC.authenticationUtilsProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 408: // org.wordpress.android.ui.posts.FeaturedImageHelper 
        return (T) new FeaturedImageHelper(singletonC.uploadStoreProvider.get(), singletonC.mediaStoreProvider.get(), singletonC.uploadServiceFacade(), singletonC.resourceProvider(), singletonC.readerUtilsWrapperProvider.get(), singletonC.fluxCUtilsWrapperProvider.get(), singletonC.siteUtilsWrapperProvider.get(), singletonC.dispatcherProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

        case 409: // org.wordpress.android.fluxc.store.EditorThemeStore 
        return (T) new EditorThemeStore(singletonC.reactNativeStoreProvider.get(), singletonC.coroutineEngine(), singletonC.dispatcherProvider.get());

        case 410: // org.wordpress.android.fluxc.store.ReactNativeStore 
        return (T) new ReactNativeStore(singletonC.reactNativeWPComRestClientProvider.get(), singletonC.reactNativeWPAPIRestClientProvider.get(), singletonC.nonceRestClientProvider.get(), singletonC.discoveryWPAPIRestClientProvider.get(), singletonC.siteSqlUtilsProvider.get(), singletonC.coroutineEngine());

        case 411: // org.wordpress.android.fluxc.network.rest.wpcom.reactnative.ReactNativeWPComRestClient 
        return (T) new ReactNativeWPComRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 412: // org.wordpress.android.fluxc.network.rest.wpapi.reactnative.ReactNativeWPAPIRestClient 
        return (T) new ReactNativeWPAPIRestClient(new WPAPIGsonRequestBuilder(), singletonC.nonceRestClientProvider.get(), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueCustomSSLProvider.get(), singletonC.userAgent());

        case 413: // org.wordpress.android.ui.posts.RemotePreviewLogicHelper 
        return (T) new RemotePreviewLogicHelper(singletonC.networkUtilsWrapperProvider.get(), singletonC.activityLauncherWrapperProvider.get(), singletonC.postUtilsWrapperProvider.get(), singletonC.uploadActionUseCaseProvider.get());

        case 414: // org.wordpress.android.ui.ActivityLauncherWrapper 
        return (T) new ActivityLauncherWrapper();

        case 415: // org.wordpress.android.ui.posts.ProgressDialogHelper 
        return (T) new ProgressDialogHelper();

        case 416: // org.wordpress.android.ui.posts.editor.media.AddExistingMediaToPostUseCase 
        return (T) new AddExistingMediaToPostUseCase(singletonC.editorTrackerProvider.get(), singletonC.getMediaModelUseCaseProvider.get(), singletonC.appendMediaToEditorUseCaseProvider.get());

        case 417: // org.wordpress.android.ui.posts.editor.media.RetryFailedMediaUploadUseCase 
        return (T) new RetryFailedMediaUploadUseCase(singletonC.getMediaModelUseCaseProvider.get(), singletonC.updateMediaModelUseCaseProvider.get(), singletonC.uploadMediaUseCaseProvider.get(), singletonC.analyticsTrackerWrapperProvider.get());

        case 418: // org.wordpress.android.ui.posts.editor.media.CleanUpMediaToPostAssociationUseCase 
        return (T) new CleanUpMediaToPostAssociationUseCase(singletonC.dispatcherProvider.get(), singletonC.uploadStoreProvider.get(), singletonC.aztecEditorFragmentStaticWrapperProvider.get(), singletonC.postUtilsWrapperProvider.get(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 419: // org.wordpress.android.ui.posts.editor.AztecEditorFragmentStaticWrapper 
        return (T) new AztecEditorFragmentStaticWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 420: // org.wordpress.android.util.ReblogUtils 
        return (T) new ReblogUtils(singletonC.urlUtilsWrapperProvider.get());

        case 421: // org.wordpress.android.fluxc.network.rest.wpcom.site.XPostsRestClient 
        return (T) new XPostsRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 422: // org.wordpress.android.ui.stories.usecase.LoadStoryFromStoriesPrefsUseCase 
        return (T) new LoadStoryFromStoriesPrefsUseCase(new StoryRepositoryWrapper(), singletonC.storiesPrefsProvider.get(), singletonC.mediaStoreProvider.get());

        case 423: // org.wordpress.android.ui.engagement.ListScenarioUtils 
        return (T) new ListScenarioUtils(singletonC.imageManagerProvider.get(), singletonC.notificationsUtilsWrapperProvider.get());

        case 424: // org.wordpress.android.ui.notifications.utils.NotificationsUtilsWrapper 
        return (T) new NotificationsUtilsWrapper(singletonC.formattableContentMapper());

        case 425: // org.wordpress.android.ui.utils.DownloadManagerWrapper 
        return (T) new DownloadManagerWrapper(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 426: // org.wordpress.android.fluxc.store.ReaderStore 
        return (T) new ReaderStore(singletonC.dispatcherProvider.get(), singletonC.readerRestClientProvider.get());

        case 427: // org.wordpress.android.fluxc.network.rest.wpcom.reader.ReaderRestClient 
        return (T) new ReaderRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 428: // org.wordpress.android.ui.reader.utils.ReaderPostSeenStatusWrapper 
        return (T) new ReaderPostSeenStatusWrapper(singletonC.readerSeenStatusToggleUseCase(), ThreadModule_ProvideBackgroundDispatcherFactory.provideBackgroundDispatcher(singletonC.threadModule));

        case 429: // org.wordpress.android.fluxc.store.ThemeStore 
        return (T) new ThemeStore(singletonC.dispatcherProvider.get(), singletonC.themeRestClientProvider.get());

        case 430: // org.wordpress.android.fluxc.network.rest.wpcom.theme.ThemeRestClient 
        return (T) new ThemeRestClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.dispatcherProvider.get(), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 431: // @javax.inject.Named("no-redirects") com.android.volley.RequestQueue 
        return (T) ReleaseNetworkModule_ProvideNoRedirectsRequestQueueFactory.provideNoRedirectsRequestQueue(singletonC.releaseNetworkModule, singletonC.namedOkHttpClient(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 432: // org.wordpress.android.networking.GlideRequestFactory 
        return (T) new GlideRequestFactory(singletonC.authenticationUtilsProvider.get());

        case 433: // org.wordpress.android.ui.stats.refresh.utils.StatsNavigator 
        return (T) new StatsNavigator(singletonC.statsSiteProvider.get(), singletonC.selectedDateProvider.get(), singletonC.readerTrackerProvider.get());

        case 434: // org.wordpress.android.ui.about.UnifiedAboutTracker 
        return (T) new UnifiedAboutTracker(singletonC.analyticsTrackerWrapperProvider.get());

        case 435: // org.wordpress.android.fluxc.store.qrcodeauth.QRCodeAuthStore 
        return (T) new QRCodeAuthStore(singletonC.qRCodeAuthRestClientProvider.get(), singletonC.coroutineEngine());

        case 436: // org.wordpress.android.fluxc.network.rest.wpcom.qrcodeauth.QRCodeAuthRestClient 
        return (T) new QRCodeAuthRestClient(singletonC.wPComGsonRequestBuilderProvider.get(), singletonC.dispatcherProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.provideRequestQueueProvider.get(), singletonC.accessTokenProvider.get(), singletonC.userAgent());

        case 437: // org.wordpress.android.ui.sitecreation.SiteCreationStepsProvider 
        return (T) new SiteCreationStepsProvider(singletonC.siteIntentQuestionFeatureConfig(), singletonC.siteNameFeatureConfig());

        case 438: // @javax.inject.Named("ListStatsUseCases") java.util.Map<org.wordpress.android.ui.stats.refresh.lists.StatsListViewModel.StatsSection,org.wordpress.android.ui.stats.refresh.lists.BaseListUseCase> 
        return (T) StatsModule_ProvideListStatsUseCasesFactory.provideListStatsUseCases(singletonC.statsModule, singletonC.provideInsightsUseCaseProvider.get(), singletonC.provideDayStatsUseCaseProvider.get(), singletonC.provideWeekStatsUseCaseProvider.get(), singletonC.provideMonthStatsUseCaseProvider.get(), singletonC.provideYearStatsUseCaseProvider.get());

        case 439: // @javax.inject.Named("ViewAllInsightsUseCases") java.util.List<org.wordpress.android.ui.stats.refresh.lists.sections.BaseStatsUseCase<?,?>> 
        return (T) StatsModule_ProvideViewAllInsightsUseCasesFactory.provideViewAllInsightsUseCases(singletonC.statsModule, singletonC.followersUseCaseFactory(), singletonC.tagsAndCategoriesUseCaseFactory(), singletonC.publicizeUseCaseFactory(), singletonC.postMonthsAndYearsUseCaseFactory(), singletonC.postAverageViewsPerDayUseCaseFactory(), singletonC.postRecentWeeksUseCaseFactory(), singletonC.annualSiteStatsUseCaseFactory());

        default: throw new AssertionError(id);
      }
    }

    @Override
    public T get() {
      switch (id / 100) {
        case 0: return get0();
        case 1: return get1();
        case 2: return get2();
        case 3: return get3();
        case 4: return get4();
        default: throw new AssertionError(id);
      }
    }
  }
}
