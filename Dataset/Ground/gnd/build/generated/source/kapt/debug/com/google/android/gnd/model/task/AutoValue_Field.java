package com.google.android.gnd.model.task;

import javax.annotation.Nullable;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_Field extends Field {

  private final String id;

  private final int index;

  private final Field.Type type;

  private final String label;

  private final boolean required;

  private final MultipleChoice multipleChoice;

  private AutoValue_Field(
      String id,
      int index,
      Field.Type type,
      String label,
      boolean required,
      @Nullable MultipleChoice multipleChoice) {
    this.id = id;
    this.index = index;
    this.type = type;
    this.label = label;
    this.required = required;
    this.multipleChoice = multipleChoice;
  }

  @Override
  public String getId() {
    return id;
  }

  @Override
  public int getIndex() {
    return index;
  }

  @Override
  public Field.Type getType() {
    return type;
  }

  @Override
  public String getLabel() {
    return label;
  }

  @Override
  public boolean isRequired() {
    return required;
  }

  @Nullable
  @Override
  public MultipleChoice getMultipleChoice() {
    return multipleChoice;
  }

  @Override
  public String toString() {
    return "Field{"
        + "id=" + id + ", "
        + "index=" + index + ", "
        + "type=" + type + ", "
        + "label=" + label + ", "
        + "required=" + required + ", "
        + "multipleChoice=" + multipleChoice
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Field) {
      Field that = (Field) o;
      return this.id.equals(that.getId())
          && this.index == that.getIndex()
          && this.type.equals(that.getType())
          && this.label.equals(that.getLabel())
          && this.required == that.isRequired()
          && (this.multipleChoice == null ? that.getMultipleChoice() == null : this.multipleChoice.equals(that.getMultipleChoice()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= id.hashCode();
    h$ *= 1000003;
    h$ ^= index;
    h$ *= 1000003;
    h$ ^= type.hashCode();
    h$ *= 1000003;
    h$ ^= label.hashCode();
    h$ *= 1000003;
    h$ ^= required ? 1231 : 1237;
    h$ *= 1000003;
    h$ ^= (multipleChoice == null) ? 0 : multipleChoice.hashCode();
    return h$;
  }

  static final class Builder extends Field.Builder {
    private String id;
    private Integer index;
    private Field.Type type;
    private String label;
    private Boolean required;
    private MultipleChoice multipleChoice;
    Builder() {
    }
    @Override
    public Field.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public Field.Builder setIndex(int index) {
      this.index = index;
      return this;
    }
    @Override
    public Field.Builder setType(Field.Type type) {
      if (type == null) {
        throw new NullPointerException("Null type");
      }
      this.type = type;
      return this;
    }
    @Override
    public Field.Builder setLabel(String label) {
      if (label == null) {
        throw new NullPointerException("Null label");
      }
      this.label = label;
      return this;
    }
    @Override
    public Field.Builder setRequired(boolean required) {
      this.required = required;
      return this;
    }
    @Override
    public Field.Builder setMultipleChoice(@Nullable MultipleChoice multipleChoice) {
      this.multipleChoice = multipleChoice;
      return this;
    }
    @Override
    public Field build() {
      String missing = "";
      if (this.id == null) {
        missing += " id";
      }
      if (this.index == null) {
        missing += " index";
      }
      if (this.type == null) {
        missing += " type";
      }
      if (this.label == null) {
        missing += " label";
      }
      if (this.required == null) {
        missing += " required";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_Field(
          this.id,
          this.index,
          this.type,
          this.label,
          this.required,
          this.multipleChoice);
    }
  }

}
