// Generated by Dagger (https://dagger.dev).
package com.haroldadmin.moonshot.features.search.di;

import com.haroldadmin.moonshot.database.LaunchDao;
import com.haroldadmin.moonshot.database.LaunchPadDao;
import com.haroldadmin.moonshot.database.RocketsDao;
import com.haroldadmin.moonshot.di.AppComponent;
import com.haroldadmin.moonshot.features.search.SearchFragment;
import com.haroldadmin.moonshot.features.search.SearchFragment_MembersInjector;
import com.haroldadmin.moonshot.features.search.SearchViewModel_AssistedFactory;
import com.haroldadmin.moonshotRepository.launch.PersistLaunchesUseCase;
import com.haroldadmin.moonshotRepository.launch.PersistLaunchesUseCase_Factory;
import com.haroldadmin.moonshotRepository.launchPad.PersistLaunchPadUseCase;
import com.haroldadmin.moonshotRepository.launchPad.PersistLaunchPadUseCase_Factory;
import com.haroldadmin.moonshotRepository.rocket.PersistRocketsUseCase;
import com.haroldadmin.moonshotRepository.rocket.PersistRocketsUseCase_Factory;
import com.haroldadmin.moonshotRepository.search.SearchLaunchesUseCase;
import com.haroldadmin.moonshotRepository.search.SearchLaunchesUseCase_Factory;
import com.haroldadmin.moonshotRepository.search.SearchLaunchpadsUseCase;
import com.haroldadmin.moonshotRepository.search.SearchLaunchpadsUseCase_Factory;
import com.haroldadmin.moonshotRepository.search.SearchRocketsUseCase;
import com.haroldadmin.moonshotRepository.search.SearchRocketsUseCase_Factory;
import com.haroldadmin.spacex_api_wrapper.launches.LaunchesService;
import com.haroldadmin.spacex_api_wrapper.launchpad.LaunchPadService;
import com.haroldadmin.spacex_api_wrapper.rocket.RocketsService;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSearchComponent implements SearchComponent {
  private Provider<LaunchDao> launchDaoProvider;

  private Provider<LaunchesService> launchServiceProvider;

  private Provider<PersistLaunchesUseCase> persistLaunchesUseCaseProvider;

  private Provider<SearchLaunchesUseCase> searchLaunchesUseCaseProvider;

  private Provider<RocketsDao> rocketsDaoProvider;

  private Provider<RocketsService> rocketsServiceProvider;

  private Provider<PersistRocketsUseCase> persistRocketsUseCaseProvider;

  private Provider<SearchRocketsUseCase> searchRocketsUseCaseProvider;

  private Provider<LaunchPadDao> launchPadDaoProvider;

  private Provider<LaunchPadService> launchPadsServiceProvider;

  private Provider<PersistLaunchPadUseCase> persistLaunchPadUseCaseProvider;

  private Provider<SearchLaunchpadsUseCase> searchLaunchpadsUseCaseProvider;

  private DaggerSearchComponent(AppComponent appComponentParam) {

    initialize(appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private SearchViewModel_AssistedFactory getSearchViewModel_AssistedFactory() {
    return new SearchViewModel_AssistedFactory(searchLaunchesUseCaseProvider, searchRocketsUseCaseProvider, searchLaunchpadsUseCaseProvider);}

  @SuppressWarnings("unchecked")
  private void initialize(final AppComponent appComponentParam) {
    this.launchDaoProvider = new com_haroldadmin_moonshot_di_AppComponent_launchDao(appComponentParam);
    this.launchServiceProvider = new com_haroldadmin_moonshot_di_AppComponent_launchService(appComponentParam);
    this.persistLaunchesUseCaseProvider = PersistLaunchesUseCase_Factory.create(launchDaoProvider);
    this.searchLaunchesUseCaseProvider = SearchLaunchesUseCase_Factory.create(launchDaoProvider, launchServiceProvider, persistLaunchesUseCaseProvider);
    this.rocketsDaoProvider = new com_haroldadmin_moonshot_di_AppComponent_rocketsDao(appComponentParam);
    this.rocketsServiceProvider = new com_haroldadmin_moonshot_di_AppComponent_rocketsService(appComponentParam);
    this.persistRocketsUseCaseProvider = PersistRocketsUseCase_Factory.create(rocketsDaoProvider);
    this.searchRocketsUseCaseProvider = SearchRocketsUseCase_Factory.create(rocketsDaoProvider, rocketsServiceProvider, persistRocketsUseCaseProvider);
    this.launchPadDaoProvider = new com_haroldadmin_moonshot_di_AppComponent_launchPadDao(appComponentParam);
    this.launchPadsServiceProvider = new com_haroldadmin_moonshot_di_AppComponent_launchPadsService(appComponentParam);
    this.persistLaunchPadUseCaseProvider = PersistLaunchPadUseCase_Factory.create(launchPadDaoProvider);
    this.searchLaunchpadsUseCaseProvider = SearchLaunchpadsUseCase_Factory.create(launchPadDaoProvider, launchPadsServiceProvider, persistLaunchPadUseCaseProvider);
  }

  @Override
  public void inject(SearchFragment arg0) {
    injectSearchFragment(arg0);}

  private SearchFragment injectSearchFragment(SearchFragment instance) {
    SearchFragment_MembersInjector.injectViewModelFactory(instance, getSearchViewModel_AssistedFactory());
    return instance;
  }

  public static final class Builder {
    private AppComponent appComponent;

    private Builder() {
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public SearchComponent build() {
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerSearchComponent(appComponent);
    }
  }

  private static class com_haroldadmin_moonshot_di_AppComponent_launchDao implements Provider<LaunchDao> {
    private final AppComponent appComponent;

    com_haroldadmin_moonshot_di_AppComponent_launchDao(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public LaunchDao get() {
      return Preconditions.checkNotNull(appComponent.launchDao(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_haroldadmin_moonshot_di_AppComponent_launchService implements Provider<LaunchesService> {
    private final AppComponent appComponent;

    com_haroldadmin_moonshot_di_AppComponent_launchService(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public LaunchesService get() {
      return Preconditions.checkNotNull(appComponent.launchService(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_haroldadmin_moonshot_di_AppComponent_rocketsDao implements Provider<RocketsDao> {
    private final AppComponent appComponent;

    com_haroldadmin_moonshot_di_AppComponent_rocketsDao(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RocketsDao get() {
      return Preconditions.checkNotNull(appComponent.rocketsDao(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_haroldadmin_moonshot_di_AppComponent_rocketsService implements Provider<RocketsService> {
    private final AppComponent appComponent;

    com_haroldadmin_moonshot_di_AppComponent_rocketsService(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RocketsService get() {
      return Preconditions.checkNotNull(appComponent.rocketsService(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_haroldadmin_moonshot_di_AppComponent_launchPadDao implements Provider<LaunchPadDao> {
    private final AppComponent appComponent;

    com_haroldadmin_moonshot_di_AppComponent_launchPadDao(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public LaunchPadDao get() {
      return Preconditions.checkNotNull(appComponent.launchPadDao(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_haroldadmin_moonshot_di_AppComponent_launchPadsService implements Provider<LaunchPadService> {
    private final AppComponent appComponent;

    com_haroldadmin_moonshot_di_AppComponent_launchPadsService(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public LaunchPadService get() {
      return Preconditions.checkNotNull(appComponent.launchPadsService(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
