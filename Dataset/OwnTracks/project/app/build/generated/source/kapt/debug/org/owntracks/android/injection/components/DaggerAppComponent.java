// Generated by Dagger (https://dagger.dev).
package org.owntracks.android.injection.components;

import android.content.Context;
import androidx.appcompat.app.AppCompatActivity;
import androidx.test.espresso.idling.CountingIdlingResource;
import androidx.work.ListenableWorker;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerApplication;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import org.greenrobot.eventbus.EventBus;
import org.owntracks.android.App;
import org.owntracks.android.App_MembersInjector;
import org.owntracks.android.data.repos.ContactsRepo;
import org.owntracks.android.data.repos.LocationRepo;
import org.owntracks.android.data.repos.LocationRepo_Factory;
import org.owntracks.android.data.repos.ObjectboxWaypointsRepo;
import org.owntracks.android.data.repos.ObjectboxWaypointsRepo_Factory;
import org.owntracks.android.geocoding.GeocoderProvider;
import org.owntracks.android.geocoding.GeocoderProvider_Factory;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindBackgroundService;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindBackgroundServiceReceiver;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindConnectionActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindContactsActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindEditorActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindLoadActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindLogViewerActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindMapActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindPreferencesActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindRegionActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindRegionsActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindStatusActivity;
import org.owntracks.android.injection.modules.AndroidBindingModule_BindWelcomeActivity;
import org.owntracks.android.injection.modules.SingletonModule;
import org.owntracks.android.injection.modules.SingletonModule_ProvideContactsRepoFactory;
import org.owntracks.android.injection.modules.SingletonModule_ProvideEventbusFactory;
import org.owntracks.android.injection.modules.SingletonModule_ProvideOutgoingQueueIdlingResourceFactory;
import org.owntracks.android.services.BackgroundService;
import org.owntracks.android.services.BackgroundService_MembersInjector;
import org.owntracks.android.services.LocationProcessor;
import org.owntracks.android.services.LocationProcessor_Factory;
import org.owntracks.android.services.MessageProcessor;
import org.owntracks.android.services.MessageProcessor_Factory;
import org.owntracks.android.services.worker.BackgroundWorkerFactory;
import org.owntracks.android.services.worker.ChildWorkerFactory;
import org.owntracks.android.services.worker.MQTTMaybeReconnectAndPingWorker;
import org.owntracks.android.services.worker.MQTTMaybeReconnectAndPingWorker_Factory_Factory;
import org.owntracks.android.services.worker.MQTTReconnectWorker;
import org.owntracks.android.services.worker.MQTTReconnectWorker_Factory_Factory;
import org.owntracks.android.services.worker.Scheduler;
import org.owntracks.android.services.worker.Scheduler_Factory;
import org.owntracks.android.services.worker.SendLocationPingWorker;
import org.owntracks.android.services.worker.SendLocationPingWorker_Factory_Factory;
import org.owntracks.android.support.ContactImageProvider;
import org.owntracks.android.support.ContactImageProvider_Factory;
import org.owntracks.android.support.DeviceMetricsProvider;
import org.owntracks.android.support.DeviceMetricsProvider_Factory;
import org.owntracks.android.support.DrawerProvider;
import org.owntracks.android.support.DrawerProvider_Factory;
import org.owntracks.android.support.EncryptionProvider;
import org.owntracks.android.support.EncryptionProvider_Factory;
import org.owntracks.android.support.Parser;
import org.owntracks.android.support.Parser_Factory;
import org.owntracks.android.support.Preferences;
import org.owntracks.android.support.Preferences_Factory;
import org.owntracks.android.support.RequirementsChecker;
import org.owntracks.android.support.RequirementsChecker_Factory;
import org.owntracks.android.support.RunThingsOnOtherThreads;
import org.owntracks.android.support.RunThingsOnOtherThreads_Factory;
import org.owntracks.android.support.ServiceBridge;
import org.owntracks.android.support.ServiceBridge_Factory;
import org.owntracks.android.support.preferences.SharedPreferencesStore;
import org.owntracks.android.support.preferences.SharedPreferencesStore_Factory;
import org.owntracks.android.support.receiver.StartBackgroundServiceReceiver;
import org.owntracks.android.support.receiver.StartBackgroundServiceReceiver_MembersInjector;
import org.owntracks.android.ui.base.BaseActivity_MembersInjector;
import org.owntracks.android.ui.base.BaseSupportFragment_MembersInjector;
import org.owntracks.android.ui.base.navigator.Navigator;
import org.owntracks.android.ui.base.navigator.Navigator_Factory;
import org.owntracks.android.ui.base.viewmodel.BaseViewModel_MembersInjector;
import org.owntracks.android.ui.base.viewmodel.NoOpViewModel;
import org.owntracks.android.ui.base.viewmodel.NoOpViewModel_Factory;
import org.owntracks.android.ui.contacts.ContactsActivity;
import org.owntracks.android.ui.contacts.ContactsActivity_MembersInjector;
import org.owntracks.android.ui.contacts.ContactsViewModel;
import org.owntracks.android.ui.contacts.ContactsViewModel_Factory;
import org.owntracks.android.ui.map.MapActivity;
import org.owntracks.android.ui.map.MapActivity_MembersInjector;
import org.owntracks.android.ui.map.MapViewModel;
import org.owntracks.android.ui.map.MapViewModel_Factory;
import org.owntracks.android.ui.preferences.AbstractPreferenceFragment_MembersInjector;
import org.owntracks.android.ui.preferences.AdvancedFragment;
import org.owntracks.android.ui.preferences.NotificationFragment;
import org.owntracks.android.ui.preferences.PreferencesActivity;
import org.owntracks.android.ui.preferences.PreferencesActivityModule_BindAdvancedPreferencesFragment;
import org.owntracks.android.ui.preferences.PreferencesActivityModule_BindNotificationPreferencesFragment;
import org.owntracks.android.ui.preferences.PreferencesActivityModule_BindPreferencesFragment;
import org.owntracks.android.ui.preferences.PreferencesActivityModule_BindReportingPreferencesFragment;
import org.owntracks.android.ui.preferences.PreferencesFragment;
import org.owntracks.android.ui.preferences.ReportingFragment;
import org.owntracks.android.ui.preferences.connection.ConnectionActivity;
import org.owntracks.android.ui.preferences.connection.ConnectionActivity_MembersInjector;
import org.owntracks.android.ui.preferences.connection.ConnectionViewModel;
import org.owntracks.android.ui.preferences.connection.ConnectionViewModel_Factory;
import org.owntracks.android.ui.preferences.editor.EditorActivity;
import org.owntracks.android.ui.preferences.editor.EditorActivity_MembersInjector;
import org.owntracks.android.ui.preferences.editor.EditorViewModel;
import org.owntracks.android.ui.preferences.editor.EditorViewModel_Factory;
import org.owntracks.android.ui.preferences.load.LoadActivity;
import org.owntracks.android.ui.preferences.load.LoadActivity_MembersInjector;
import org.owntracks.android.ui.preferences.load.LoadViewModel;
import org.owntracks.android.ui.preferences.load.LoadViewModel_Factory;
import org.owntracks.android.ui.region.RegionActivity;
import org.owntracks.android.ui.region.RegionActivity_MembersInjector;
import org.owntracks.android.ui.region.RegionViewModel;
import org.owntracks.android.ui.region.RegionViewModel_Factory;
import org.owntracks.android.ui.regions.RegionsActivity;
import org.owntracks.android.ui.regions.RegionsActivity_MembersInjector;
import org.owntracks.android.ui.regions.RegionsViewModel;
import org.owntracks.android.ui.regions.RegionsViewModel_Factory;
import org.owntracks.android.ui.status.LogViewerActivity;
import org.owntracks.android.ui.status.StatusActivity;
import org.owntracks.android.ui.status.StatusViewModel;
import org.owntracks.android.ui.status.StatusViewModel_Factory;
import org.owntracks.android.ui.welcome.WelcomeActivity;
import org.owntracks.android.ui.welcome.WelcomeActivityModule_BindFinishFragment;
import org.owntracks.android.ui.welcome.WelcomeActivityModule_BindIntroFragment;
import org.owntracks.android.ui.welcome.WelcomeActivityModule_BindPermissionFragment;
import org.owntracks.android.ui.welcome.WelcomeActivityModule_BindPlayFragment;
import org.owntracks.android.ui.welcome.WelcomeActivityModule_BindVersionFragment;
import org.owntracks.android.ui.welcome.WelcomeActivity_MembersInjector;
import org.owntracks.android.ui.welcome.WelcomeViewModel;
import org.owntracks.android.ui.welcome.WelcomeViewModel_Factory;
import org.owntracks.android.ui.welcome.finish.FinishFragment;
import org.owntracks.android.ui.welcome.intro.IntroFragment;
import org.owntracks.android.ui.welcome.permission.PermissionFragment;
import org.owntracks.android.ui.welcome.permission.PermissionFragmentViewModel;
import org.owntracks.android.ui.welcome.permission.PermissionFragmentViewModel_Factory;
import org.owntracks.android.ui.welcome.permission.PermissionFragment_MembersInjector;
import org.owntracks.android.ui.welcome.play.PlayFragment;
import org.owntracks.android.ui.welcome.play.PlayFragmentViewModel;
import org.owntracks.android.ui.welcome.play.PlayFragmentViewModel_Factory;
import org.owntracks.android.ui.welcome.version.VersionFragment;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<AndroidBindingModule_BindContactsActivity.ContactsActivitySubcomponent.Factory> contactsActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindMapActivity.MapActivitySubcomponent.Factory> mapActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindPreferencesActivity.PreferencesActivitySubcomponent.Factory> preferencesActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindConnectionActivity.ConnectionActivitySubcomponent.Factory> connectionActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindLogViewerActivity.LogViewerActivitySubcomponent.Factory> logViewerActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindEditorActivity.EditorActivitySubcomponent.Factory> editorActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindLoadActivity.LoadActivitySubcomponent.Factory> loadActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindStatusActivity.StatusActivitySubcomponent.Factory> statusActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindWelcomeActivity.WelcomeActivitySubcomponent.Factory> welcomeActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindRegionsActivity.RegionsActivitySubcomponent.Factory> regionsActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindRegionActivity.RegionActivitySubcomponent.Factory> regionActivitySubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindBackgroundService.BackgroundServiceSubcomponent.Factory> backgroundServiceSubcomponentFactoryProvider;

  private Provider<AndroidBindingModule_BindBackgroundServiceReceiver.StartBackgroundServiceReceiverSubcomponent.Factory> startBackgroundServiceReceiverSubcomponentFactoryProvider;

  private Provider<App> appProvider;

  private Provider<Context> provideContextProvider;

  private Provider<EventBus> provideEventbusProvider;

  private Provider<SharedPreferencesStore> sharedPreferencesStoreProvider;

  private Provider<Preferences> preferencesProvider;

  private Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider;

  private Provider<ContactImageProvider> contactImageProvider;

  private Provider<ContactsRepo> provideContactsRepoProvider;

  private Provider<ObjectboxWaypointsRepo> objectboxWaypointsRepoProvider;

  private Provider<EncryptionProvider> encryptionProvider;

  private Provider<Parser> parserProvider;

  private Provider<Scheduler> schedulerProvider;

  private Provider<ServiceBridge> serviceBridgeProvider;

  private Provider<MessageProcessor> messageProcessorProvider;

  private Provider<LocationRepo> locationRepoProvider;

  private Provider<DeviceMetricsProvider> deviceMetricsProvider;

  private Provider<LocationProcessor> locationProcessorProvider;

  private Provider<CountingIdlingResource> provideOutgoingQueueIdlingResourceProvider;

  private Provider<MQTTMaybeReconnectAndPingWorker.Factory> factoryProvider;

  private Provider<MQTTReconnectWorker.Factory> factoryProvider2;

  private Provider<SendLocationPingWorker.Factory> factoryProvider3;

  private Provider<GeocoderProvider> geocoderProvider;

  private DaggerAppComponent(SingletonModule singletonModuleParam, App appParam) {

    initialize(singletonModuleParam, appParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(13).put(ContactsActivity.class, (Provider) contactsActivitySubcomponentFactoryProvider).put(MapActivity.class, (Provider) mapActivitySubcomponentFactoryProvider).put(PreferencesActivity.class, (Provider) preferencesActivitySubcomponentFactoryProvider).put(ConnectionActivity.class, (Provider) connectionActivitySubcomponentFactoryProvider).put(LogViewerActivity.class, (Provider) logViewerActivitySubcomponentFactoryProvider).put(EditorActivity.class, (Provider) editorActivitySubcomponentFactoryProvider).put(LoadActivity.class, (Provider) loadActivitySubcomponentFactoryProvider).put(StatusActivity.class, (Provider) statusActivitySubcomponentFactoryProvider).put(WelcomeActivity.class, (Provider) welcomeActivitySubcomponentFactoryProvider).put(RegionsActivity.class, (Provider) regionsActivitySubcomponentFactoryProvider).put(RegionActivity.class, (Provider) regionActivitySubcomponentFactoryProvider).put(BackgroundService.class, (Provider) backgroundServiceSubcomponentFactoryProvider).put(StartBackgroundServiceReceiver.class, (Provider) startBackgroundServiceReceiverSubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private Map<Class<? extends ListenableWorker>, Provider<ChildWorkerFactory>> mapOfClassOfAndProviderOfChildWorkerFactory(
      ) {
    return MapBuilder.<Class<? extends ListenableWorker>, Provider<ChildWorkerFactory>>newMapBuilder(3).put(MQTTMaybeReconnectAndPingWorker.class, (Provider) factoryProvider).put(MQTTReconnectWorker.class, (Provider) factoryProvider2).put(SendLocationPingWorker.class, (Provider) factoryProvider3).build();
  }

  private BackgroundWorkerFactory backgroundWorkerFactory() {
    return new BackgroundWorkerFactory(mapOfClassOfAndProviderOfChildWorkerFactory());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final SingletonModule singletonModuleParam, final App appParam) {
    this.contactsActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindContactsActivity.ContactsActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindContactsActivity.ContactsActivitySubcomponent.Factory get() {
        return new ContactsActivitySubcomponentFactory();
      }
    };
    this.mapActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindMapActivity.MapActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindMapActivity.MapActivitySubcomponent.Factory get() {
        return new MapActivitySubcomponentFactory();
      }
    };
    this.preferencesActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindPreferencesActivity.PreferencesActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindPreferencesActivity.PreferencesActivitySubcomponent.Factory get(
          ) {
        return new PreferencesActivitySubcomponentFactory();
      }
    };
    this.connectionActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindConnectionActivity.ConnectionActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindConnectionActivity.ConnectionActivitySubcomponent.Factory get(
          ) {
        return new ConnectionActivitySubcomponentFactory();
      }
    };
    this.logViewerActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindLogViewerActivity.LogViewerActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindLogViewerActivity.LogViewerActivitySubcomponent.Factory get(
          ) {
        return new LogViewerActivitySubcomponentFactory();
      }
    };
    this.editorActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindEditorActivity.EditorActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindEditorActivity.EditorActivitySubcomponent.Factory get() {
        return new EditorActivitySubcomponentFactory();
      }
    };
    this.loadActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindLoadActivity.LoadActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindLoadActivity.LoadActivitySubcomponent.Factory get() {
        return new LoadActivitySubcomponentFactory();
      }
    };
    this.statusActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindStatusActivity.StatusActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindStatusActivity.StatusActivitySubcomponent.Factory get() {
        return new StatusActivitySubcomponentFactory();
      }
    };
    this.welcomeActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindWelcomeActivity.WelcomeActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindWelcomeActivity.WelcomeActivitySubcomponent.Factory get() {
        return new WelcomeActivitySubcomponentFactory();
      }
    };
    this.regionsActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindRegionsActivity.RegionsActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindRegionsActivity.RegionsActivitySubcomponent.Factory get() {
        return new RegionsActivitySubcomponentFactory();
      }
    };
    this.regionActivitySubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindRegionActivity.RegionActivitySubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindRegionActivity.RegionActivitySubcomponent.Factory get() {
        return new RegionActivitySubcomponentFactory();
      }
    };
    this.backgroundServiceSubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindBackgroundService.BackgroundServiceSubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindBackgroundService.BackgroundServiceSubcomponent.Factory get(
          ) {
        return new BackgroundServiceSubcomponentFactory();
      }
    };
    this.startBackgroundServiceReceiverSubcomponentFactoryProvider = new Provider<AndroidBindingModule_BindBackgroundServiceReceiver.StartBackgroundServiceReceiverSubcomponent.Factory>() {
      @Override
      public AndroidBindingModule_BindBackgroundServiceReceiver.StartBackgroundServiceReceiverSubcomponent.Factory get(
          ) {
        return new StartBackgroundServiceReceiverSubcomponentFactory();
      }
    };
    this.appProvider = InstanceFactory.create(appParam);
    this.provideContextProvider = DoubleCheck.provider((Provider) appProvider);
    this.provideEventbusProvider = DoubleCheck.provider(SingletonModule_ProvideEventbusFactory.create(singletonModuleParam));
    this.sharedPreferencesStoreProvider = DoubleCheck.provider(SharedPreferencesStore_Factory.create(provideContextProvider));
    this.preferencesProvider = DoubleCheck.provider(Preferences_Factory.create(provideContextProvider, provideEventbusProvider, (Provider) sharedPreferencesStoreProvider));
    this.runThingsOnOtherThreadsProvider = DoubleCheck.provider(RunThingsOnOtherThreads_Factory.create(provideContextProvider));
    this.contactImageProvider = DoubleCheck.provider(ContactImageProvider_Factory.create(provideContextProvider));
    this.provideContactsRepoProvider = DoubleCheck.provider(SingletonModule_ProvideContactsRepoFactory.create(singletonModuleParam, provideEventbusProvider, contactImageProvider));
    this.objectboxWaypointsRepoProvider = DoubleCheck.provider(ObjectboxWaypointsRepo_Factory.create(provideContextProvider, provideEventbusProvider, preferencesProvider));
    this.encryptionProvider = DoubleCheck.provider(EncryptionProvider_Factory.create(preferencesProvider));
    this.parserProvider = DoubleCheck.provider(Parser_Factory.create(encryptionProvider));
    this.schedulerProvider = DoubleCheck.provider(Scheduler_Factory.create(provideContextProvider, preferencesProvider));
    this.serviceBridgeProvider = DoubleCheck.provider(ServiceBridge_Factory.create());
    this.messageProcessorProvider = new DelegateFactory<>();
    this.locationRepoProvider = DoubleCheck.provider(LocationRepo_Factory.create(provideEventbusProvider));
    this.deviceMetricsProvider = DoubleCheck.provider(DeviceMetricsProvider_Factory.create(provideContextProvider));
    this.locationProcessorProvider = DoubleCheck.provider(LocationProcessor_Factory.create(messageProcessorProvider, preferencesProvider, locationRepoProvider, (Provider) objectboxWaypointsRepoProvider, deviceMetricsProvider));
    this.provideOutgoingQueueIdlingResourceProvider = DoubleCheck.provider(SingletonModule_ProvideOutgoingQueueIdlingResourceFactory.create(singletonModuleParam));
    DelegateFactory.setDelegate(messageProcessorProvider, DoubleCheck.provider(MessageProcessor_Factory.create(provideContextProvider, provideEventbusProvider, provideContactsRepoProvider, preferencesProvider, (Provider) objectboxWaypointsRepoProvider, parserProvider, schedulerProvider, serviceBridgeProvider, runThingsOnOtherThreadsProvider, locationProcessorProvider, provideOutgoingQueueIdlingResourceProvider)));
    this.factoryProvider = MQTTMaybeReconnectAndPingWorker_Factory_Factory.create(messageProcessorProvider);
    this.factoryProvider2 = MQTTReconnectWorker_Factory_Factory.create(messageProcessorProvider);
    this.factoryProvider3 = SendLocationPingWorker_Factory_Factory.create(locationProcessorProvider);
    this.geocoderProvider = DoubleCheck.provider(GeocoderProvider_Factory.create(provideContextProvider, preferencesProvider));
  }

  @Override
  public void inject(DaggerApplication instance) {
    injectDaggerApplication(instance);
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    App_MembersInjector.injectPreferences(instance, preferencesProvider.get());
    App_MembersInjector.injectRunThingsOnOtherThreads(instance, runThingsOnOtherThreadsProvider.get());
    App_MembersInjector.injectMessageProcessor(instance, messageProcessorProvider.get());
    App_MembersInjector.injectEventBus(instance, provideEventbusProvider.get());
    App_MembersInjector.injectWorkerFactory(instance, backgroundWorkerFactory());
    App_MembersInjector.injectScheduler(instance, schedulerProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private App app;

    @Override
    public Builder app(App app) {
      this.app = Preconditions.checkNotNull(app);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(app, App.class);
      return new DaggerAppComponent(new SingletonModule(), app);
    }
  }

  private final class ContactsActivitySubcomponentFactory implements AndroidBindingModule_BindContactsActivity.ContactsActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindContactsActivity.ContactsActivitySubcomponent create(
        ContactsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ContactsActivitySubcomponentImpl(arg0);
    }
  }

  private final class ContactsActivitySubcomponentImpl implements AndroidBindingModule_BindContactsActivity.ContactsActivitySubcomponent {
    private Provider<ContactsActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<ContactsViewModel> contactsViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private ContactsActivitySubcomponentImpl(ContactsActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ContactsActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.contactsViewModelProvider = DoubleCheck.provider(ContactsViewModel_Factory.create(DaggerAppComponent.this.provideContactsRepoProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(ContactsActivity arg0) {
      injectContactsActivity(arg0);
    }

    private ContactsActivity injectContactsActivity(ContactsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, contactsViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      ContactsActivity_MembersInjector.injectGeocoderProvider(instance, DaggerAppComponent.this.geocoderProvider.get());
      return instance;
    }
  }

  private final class MapActivitySubcomponentFactory implements AndroidBindingModule_BindMapActivity.MapActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindMapActivity.MapActivitySubcomponent create(MapActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MapActivitySubcomponentImpl(arg0);
    }
  }

  private final class MapActivitySubcomponentImpl implements AndroidBindingModule_BindMapActivity.MapActivitySubcomponent {
    private Provider<MapActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<MapViewModel> mapViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private Provider<RequirementsChecker> requirementsCheckerProvider;

    private MapActivitySubcomponentImpl(MapActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MapActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.mapViewModelProvider = DoubleCheck.provider(MapViewModel_Factory.create(DaggerAppComponent.this.provideContactsRepoProvider, DaggerAppComponent.this.locationProcessorProvider, DaggerAppComponent.this.messageProcessorProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
      this.requirementsCheckerProvider = DoubleCheck.provider(RequirementsChecker_Factory.create(DaggerAppComponent.this.preferencesProvider, bindActivityProvider));
    }

    @Override
    public void inject(MapActivity arg0) {
      injectMapActivity(arg0);
    }

    private MapActivity injectMapActivity(MapActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, mapViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      MapActivity_MembersInjector.injectLocationRepo(instance, DaggerAppComponent.this.locationRepoProvider.get());
      MapActivity_MembersInjector.injectRunThingsOnOtherThreads(instance, DaggerAppComponent.this.runThingsOnOtherThreadsProvider.get());
      MapActivity_MembersInjector.injectContactImageProvider(instance, DaggerAppComponent.this.contactImageProvider.get());
      MapActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      MapActivity_MembersInjector.injectGeocoderProvider(instance, DaggerAppComponent.this.geocoderProvider.get());
      MapActivity_MembersInjector.injectCountingIdlingResource(instance, DaggerAppComponent.this.provideOutgoingQueueIdlingResourceProvider.get());
      MapActivity_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      MapActivity_MembersInjector.injectRequirementsChecker(instance, requirementsCheckerProvider.get());
      return instance;
    }
  }

  private final class PreferencesActivitySubcomponentFactory implements AndroidBindingModule_BindPreferencesActivity.PreferencesActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindPreferencesActivity.PreferencesActivitySubcomponent create(
        PreferencesActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new PreferencesActivitySubcomponentImpl(arg0);
    }
  }

  private final class PreferencesActivitySubcomponentImpl implements AndroidBindingModule_BindPreferencesActivity.PreferencesActivitySubcomponent {
    private Provider<PreferencesActivityModule_BindPreferencesFragment.PreferencesFragmentSubcomponent.Factory> preferencesFragmentSubcomponentFactoryProvider;

    private Provider<PreferencesActivityModule_BindReportingPreferencesFragment.ReportingFragmentSubcomponent.Factory> reportingFragmentSubcomponentFactoryProvider;

    private Provider<PreferencesActivityModule_BindNotificationPreferencesFragment.NotificationFragmentSubcomponent.Factory> notificationFragmentSubcomponentFactoryProvider;

    private Provider<PreferencesActivityModule_BindAdvancedPreferencesFragment.AdvancedFragmentSubcomponent.Factory> advancedFragmentSubcomponentFactoryProvider;

    private Provider<PreferencesActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<DrawerProvider> drawerProvider;

    private PreferencesActivitySubcomponentImpl(PreferencesActivity arg0Param) {

      initialize(arg0Param);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(17).put(ContactsActivity.class, (Provider) DaggerAppComponent.this.contactsActivitySubcomponentFactoryProvider).put(MapActivity.class, (Provider) DaggerAppComponent.this.mapActivitySubcomponentFactoryProvider).put(PreferencesActivity.class, (Provider) DaggerAppComponent.this.preferencesActivitySubcomponentFactoryProvider).put(ConnectionActivity.class, (Provider) DaggerAppComponent.this.connectionActivitySubcomponentFactoryProvider).put(LogViewerActivity.class, (Provider) DaggerAppComponent.this.logViewerActivitySubcomponentFactoryProvider).put(EditorActivity.class, (Provider) DaggerAppComponent.this.editorActivitySubcomponentFactoryProvider).put(LoadActivity.class, (Provider) DaggerAppComponent.this.loadActivitySubcomponentFactoryProvider).put(StatusActivity.class, (Provider) DaggerAppComponent.this.statusActivitySubcomponentFactoryProvider).put(WelcomeActivity.class, (Provider) DaggerAppComponent.this.welcomeActivitySubcomponentFactoryProvider).put(RegionsActivity.class, (Provider) DaggerAppComponent.this.regionsActivitySubcomponentFactoryProvider).put(RegionActivity.class, (Provider) DaggerAppComponent.this.regionActivitySubcomponentFactoryProvider).put(BackgroundService.class, (Provider) DaggerAppComponent.this.backgroundServiceSubcomponentFactoryProvider).put(StartBackgroundServiceReceiver.class, (Provider) DaggerAppComponent.this.startBackgroundServiceReceiverSubcomponentFactoryProvider).put(PreferencesFragment.class, (Provider) preferencesFragmentSubcomponentFactoryProvider).put(ReportingFragment.class, (Provider) reportingFragmentSubcomponentFactoryProvider).put(NotificationFragment.class, (Provider) notificationFragmentSubcomponentFactoryProvider).put(AdvancedFragment.class, (Provider) advancedFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private NoOpViewModel noOpViewModel() {
      return injectNoOpViewModel(NoOpViewModel_Factory.newInstance());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PreferencesActivity arg0Param) {
      this.preferencesFragmentSubcomponentFactoryProvider = new Provider<PreferencesActivityModule_BindPreferencesFragment.PreferencesFragmentSubcomponent.Factory>() {
        @Override
        public PreferencesActivityModule_BindPreferencesFragment.PreferencesFragmentSubcomponent.Factory get(
            ) {
          return new PreferencesFragmentSubcomponentFactory();
        }
      };
      this.reportingFragmentSubcomponentFactoryProvider = new Provider<PreferencesActivityModule_BindReportingPreferencesFragment.ReportingFragmentSubcomponent.Factory>() {
        @Override
        public PreferencesActivityModule_BindReportingPreferencesFragment.ReportingFragmentSubcomponent.Factory get(
            ) {
          return new ReportingFragmentSubcomponentFactory();
        }
      };
      this.notificationFragmentSubcomponentFactoryProvider = new Provider<PreferencesActivityModule_BindNotificationPreferencesFragment.NotificationFragmentSubcomponent.Factory>() {
        @Override
        public PreferencesActivityModule_BindNotificationPreferencesFragment.NotificationFragmentSubcomponent.Factory get(
            ) {
          return new NotificationFragmentSubcomponentFactory();
        }
      };
      this.advancedFragmentSubcomponentFactoryProvider = new Provider<PreferencesActivityModule_BindAdvancedPreferencesFragment.AdvancedFragmentSubcomponent.Factory>() {
        @Override
        public PreferencesActivityModule_BindAdvancedPreferencesFragment.AdvancedFragmentSubcomponent.Factory get(
            ) {
          return new AdvancedFragmentSubcomponentFactory();
        }
      };
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(PreferencesActivity arg0) {
      injectPreferencesActivity(arg0);
    }

    private NoOpViewModel injectNoOpViewModel(NoOpViewModel instance) {
      BaseViewModel_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      return instance;
    }

    private PreferencesActivity injectPreferencesActivity(PreferencesActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, noOpViewModel());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      return instance;
    }

    private final class PreferencesFragmentSubcomponentFactory implements PreferencesActivityModule_BindPreferencesFragment.PreferencesFragmentSubcomponent.Factory {
      @Override
      public PreferencesActivityModule_BindPreferencesFragment.PreferencesFragmentSubcomponent create(
          PreferencesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PreferencesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PreferencesFragmentSubcomponentImpl implements PreferencesActivityModule_BindPreferencesFragment.PreferencesFragmentSubcomponent {
      private PreferencesFragmentSubcomponentImpl(PreferencesFragment arg0) {

      }

      @Override
      public void inject(PreferencesFragment arg0) {
        injectPreferencesFragment(arg0);
      }

      private PreferencesFragment injectPreferencesFragment(PreferencesFragment instance) {
        AbstractPreferenceFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
        return instance;
      }
    }

    private final class ReportingFragmentSubcomponentFactory implements PreferencesActivityModule_BindReportingPreferencesFragment.ReportingFragmentSubcomponent.Factory {
      @Override
      public PreferencesActivityModule_BindReportingPreferencesFragment.ReportingFragmentSubcomponent create(
          ReportingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ReportingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ReportingFragmentSubcomponentImpl implements PreferencesActivityModule_BindReportingPreferencesFragment.ReportingFragmentSubcomponent {
      private ReportingFragmentSubcomponentImpl(ReportingFragment arg0) {

      }

      @Override
      public void inject(ReportingFragment arg0) {
        injectReportingFragment(arg0);
      }

      private ReportingFragment injectReportingFragment(ReportingFragment instance) {
        AbstractPreferenceFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
        return instance;
      }
    }

    private final class NotificationFragmentSubcomponentFactory implements PreferencesActivityModule_BindNotificationPreferencesFragment.NotificationFragmentSubcomponent.Factory {
      @Override
      public PreferencesActivityModule_BindNotificationPreferencesFragment.NotificationFragmentSubcomponent create(
          NotificationFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NotificationFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NotificationFragmentSubcomponentImpl implements PreferencesActivityModule_BindNotificationPreferencesFragment.NotificationFragmentSubcomponent {
      private NotificationFragmentSubcomponentImpl(NotificationFragment arg0) {

      }

      @Override
      public void inject(NotificationFragment arg0) {
        injectNotificationFragment(arg0);
      }

      private NotificationFragment injectNotificationFragment(NotificationFragment instance) {
        AbstractPreferenceFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
        return instance;
      }
    }

    private final class AdvancedFragmentSubcomponentFactory implements PreferencesActivityModule_BindAdvancedPreferencesFragment.AdvancedFragmentSubcomponent.Factory {
      @Override
      public PreferencesActivityModule_BindAdvancedPreferencesFragment.AdvancedFragmentSubcomponent create(
          AdvancedFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AdvancedFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AdvancedFragmentSubcomponentImpl implements PreferencesActivityModule_BindAdvancedPreferencesFragment.AdvancedFragmentSubcomponent {
      private AdvancedFragmentSubcomponentImpl(AdvancedFragment arg0) {

      }

      @Override
      public void inject(AdvancedFragment arg0) {
        injectAdvancedFragment(arg0);
      }

      private AdvancedFragment injectAdvancedFragment(AdvancedFragment instance) {
        AbstractPreferenceFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
        return instance;
      }
    }
  }

  private final class ConnectionActivitySubcomponentFactory implements AndroidBindingModule_BindConnectionActivity.ConnectionActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindConnectionActivity.ConnectionActivitySubcomponent create(
        ConnectionActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ConnectionActivitySubcomponentImpl(arg0);
    }
  }

  private final class ConnectionActivitySubcomponentImpl implements AndroidBindingModule_BindConnectionActivity.ConnectionActivitySubcomponent {
    private Provider<ConnectionActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<ConnectionViewModel> connectionViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private ConnectionActivitySubcomponentImpl(ConnectionActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ConnectionActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.connectionViewModelProvider = DoubleCheck.provider(ConnectionViewModel_Factory.create(DaggerAppComponent.this.preferencesProvider, DaggerAppComponent.this.provideContextProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(ConnectionActivity arg0) {
      injectConnectionActivity(arg0);
    }

    private ConnectionActivity injectConnectionActivity(ConnectionActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, connectionViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      ConnectionActivity_MembersInjector.injectRunThingsOnOtherThreads(instance, DaggerAppComponent.this.runThingsOnOtherThreadsProvider.get());
      ConnectionActivity_MembersInjector.injectMessageProcessor(instance, DaggerAppComponent.this.messageProcessorProvider.get());
      return instance;
    }
  }

  private final class LogViewerActivitySubcomponentFactory implements AndroidBindingModule_BindLogViewerActivity.LogViewerActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindLogViewerActivity.LogViewerActivitySubcomponent create(
        LogViewerActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LogViewerActivitySubcomponentImpl(arg0);
    }
  }

  private final class LogViewerActivitySubcomponentImpl implements AndroidBindingModule_BindLogViewerActivity.LogViewerActivitySubcomponent {
    private Provider<LogViewerActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<DrawerProvider> drawerProvider;

    private LogViewerActivitySubcomponentImpl(LogViewerActivity arg0Param) {

      initialize(arg0Param);
    }

    private NoOpViewModel noOpViewModel() {
      return injectNoOpViewModel(NoOpViewModel_Factory.newInstance());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LogViewerActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(LogViewerActivity arg0) {
      injectLogViewerActivity(arg0);
    }

    private NoOpViewModel injectNoOpViewModel(NoOpViewModel instance) {
      BaseViewModel_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      return instance;
    }

    private LogViewerActivity injectLogViewerActivity(LogViewerActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, noOpViewModel());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      return instance;
    }
  }

  private final class EditorActivitySubcomponentFactory implements AndroidBindingModule_BindEditorActivity.EditorActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindEditorActivity.EditorActivitySubcomponent create(
        EditorActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new EditorActivitySubcomponentImpl(arg0);
    }
  }

  private final class EditorActivitySubcomponentImpl implements AndroidBindingModule_BindEditorActivity.EditorActivitySubcomponent {
    private Provider<EditorActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<EditorViewModel> editorViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private EditorActivitySubcomponentImpl(EditorActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EditorActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.editorViewModelProvider = DoubleCheck.provider(EditorViewModel_Factory.create(DaggerAppComponent.this.preferencesProvider, DaggerAppComponent.this.parserProvider, navigatorProvider, (Provider) DaggerAppComponent.this.objectboxWaypointsRepoProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(EditorActivity arg0) {
      injectEditorActivity(arg0);
    }

    private EditorActivity injectEditorActivity(EditorActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, editorViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      EditorActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      EditorActivity_MembersInjector.injectWaypointsRepo(instance, DaggerAppComponent.this.objectboxWaypointsRepoProvider.get());
      EditorActivity_MembersInjector.injectParser(instance, DaggerAppComponent.this.parserProvider.get());
      EditorActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      EditorActivity_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      return instance;
    }
  }

  private final class LoadActivitySubcomponentFactory implements AndroidBindingModule_BindLoadActivity.LoadActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindLoadActivity.LoadActivitySubcomponent create(
        LoadActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoadActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoadActivitySubcomponentImpl implements AndroidBindingModule_BindLoadActivity.LoadActivitySubcomponent {
    private Provider<LoadActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<LoadViewModel> loadViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private LoadActivitySubcomponentImpl(LoadActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoadActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.loadViewModelProvider = DoubleCheck.provider(LoadViewModel_Factory.create(DaggerAppComponent.this.preferencesProvider, DaggerAppComponent.this.parserProvider, (Provider) DaggerAppComponent.this.objectboxWaypointsRepoProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(LoadActivity arg0) {
      injectLoadActivity(arg0);
    }

    private LoadActivity injectLoadActivity(LoadActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, loadViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      LoadActivity_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      LoadActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      return instance;
    }
  }

  private final class StatusActivitySubcomponentFactory implements AndroidBindingModule_BindStatusActivity.StatusActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindStatusActivity.StatusActivitySubcomponent create(
        StatusActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatusActivitySubcomponentImpl(arg0);
    }
  }

  private final class StatusActivitySubcomponentImpl implements AndroidBindingModule_BindStatusActivity.StatusActivitySubcomponent {
    private Provider<StatusActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<StatusViewModel> statusViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private StatusActivitySubcomponentImpl(StatusActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final StatusActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.statusViewModelProvider = DoubleCheck.provider(StatusViewModel_Factory.create(DaggerAppComponent.this.provideContextProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(StatusActivity arg0) {
      injectStatusActivity(arg0);
    }

    private StatusActivity injectStatusActivity(StatusActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, statusViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      return instance;
    }
  }

  private final class WelcomeActivitySubcomponentFactory implements AndroidBindingModule_BindWelcomeActivity.WelcomeActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindWelcomeActivity.WelcomeActivitySubcomponent create(
        WelcomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new WelcomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class WelcomeActivitySubcomponentImpl implements AndroidBindingModule_BindWelcomeActivity.WelcomeActivitySubcomponent {
    private Provider<WelcomeActivityModule_BindPlayFragment.PlayFragmentSubcomponent.Factory> playFragmentSubcomponentFactoryProvider;

    private Provider<WelcomeActivityModule_BindIntroFragment.IntroFragmentSubcomponent.Factory> introFragmentSubcomponentFactoryProvider;

    private Provider<WelcomeActivityModule_BindVersionFragment.VersionFragmentSubcomponent.Factory> versionFragmentSubcomponentFactoryProvider;

    private Provider<WelcomeActivityModule_BindPermissionFragment.PermissionFragmentSubcomponent.Factory> permissionFragmentSubcomponentFactoryProvider;

    private Provider<WelcomeActivityModule_BindFinishFragment.FinishFragmentSubcomponent.Factory> finishFragmentSubcomponentFactoryProvider;

    private Provider<WelcomeActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<WelcomeViewModel> welcomeViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private Provider<RequirementsChecker> requirementsCheckerProvider;

    private Provider<PermissionFragmentViewModel> permissionFragmentViewModelProvider;

    private WelcomeActivitySubcomponentImpl(WelcomeActivity arg0Param) {

      initialize(arg0Param);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(18).put(ContactsActivity.class, (Provider) DaggerAppComponent.this.contactsActivitySubcomponentFactoryProvider).put(MapActivity.class, (Provider) DaggerAppComponent.this.mapActivitySubcomponentFactoryProvider).put(PreferencesActivity.class, (Provider) DaggerAppComponent.this.preferencesActivitySubcomponentFactoryProvider).put(ConnectionActivity.class, (Provider) DaggerAppComponent.this.connectionActivitySubcomponentFactoryProvider).put(LogViewerActivity.class, (Provider) DaggerAppComponent.this.logViewerActivitySubcomponentFactoryProvider).put(EditorActivity.class, (Provider) DaggerAppComponent.this.editorActivitySubcomponentFactoryProvider).put(LoadActivity.class, (Provider) DaggerAppComponent.this.loadActivitySubcomponentFactoryProvider).put(StatusActivity.class, (Provider) DaggerAppComponent.this.statusActivitySubcomponentFactoryProvider).put(WelcomeActivity.class, (Provider) DaggerAppComponent.this.welcomeActivitySubcomponentFactoryProvider).put(RegionsActivity.class, (Provider) DaggerAppComponent.this.regionsActivitySubcomponentFactoryProvider).put(RegionActivity.class, (Provider) DaggerAppComponent.this.regionActivitySubcomponentFactoryProvider).put(BackgroundService.class, (Provider) DaggerAppComponent.this.backgroundServiceSubcomponentFactoryProvider).put(StartBackgroundServiceReceiver.class, (Provider) DaggerAppComponent.this.startBackgroundServiceReceiverSubcomponentFactoryProvider).put(PlayFragment.class, (Provider) playFragmentSubcomponentFactoryProvider).put(IntroFragment.class, (Provider) introFragmentSubcomponentFactoryProvider).put(VersionFragment.class, (Provider) versionFragmentSubcomponentFactoryProvider).put(PermissionFragment.class, (Provider) permissionFragmentSubcomponentFactoryProvider).put(FinishFragment.class, (Provider) finishFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final WelcomeActivity arg0Param) {
      this.playFragmentSubcomponentFactoryProvider = new Provider<WelcomeActivityModule_BindPlayFragment.PlayFragmentSubcomponent.Factory>() {
        @Override
        public WelcomeActivityModule_BindPlayFragment.PlayFragmentSubcomponent.Factory get() {
          return new PlayFragmentSubcomponentFactory();
        }
      };
      this.introFragmentSubcomponentFactoryProvider = new Provider<WelcomeActivityModule_BindIntroFragment.IntroFragmentSubcomponent.Factory>() {
        @Override
        public WelcomeActivityModule_BindIntroFragment.IntroFragmentSubcomponent.Factory get() {
          return new IntroFragmentSubcomponentFactory();
        }
      };
      this.versionFragmentSubcomponentFactoryProvider = new Provider<WelcomeActivityModule_BindVersionFragment.VersionFragmentSubcomponent.Factory>() {
        @Override
        public WelcomeActivityModule_BindVersionFragment.VersionFragmentSubcomponent.Factory get() {
          return new VersionFragmentSubcomponentFactory();
        }
      };
      this.permissionFragmentSubcomponentFactoryProvider = new Provider<WelcomeActivityModule_BindPermissionFragment.PermissionFragmentSubcomponent.Factory>() {
        @Override
        public WelcomeActivityModule_BindPermissionFragment.PermissionFragmentSubcomponent.Factory get(
            ) {
          return new PermissionFragmentSubcomponentFactory();
        }
      };
      this.finishFragmentSubcomponentFactoryProvider = new Provider<WelcomeActivityModule_BindFinishFragment.FinishFragmentSubcomponent.Factory>() {
        @Override
        public WelcomeActivityModule_BindFinishFragment.FinishFragmentSubcomponent.Factory get() {
          return new FinishFragmentSubcomponentFactory();
        }
      };
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.welcomeViewModelProvider = DoubleCheck.provider(WelcomeViewModel_Factory.create(DaggerAppComponent.this.preferencesProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
      this.requirementsCheckerProvider = DoubleCheck.provider(RequirementsChecker_Factory.create(DaggerAppComponent.this.preferencesProvider, bindActivityProvider));
      this.permissionFragmentViewModelProvider = DoubleCheck.provider(PermissionFragmentViewModel_Factory.create(navigatorProvider));
    }

    @Override
    public void inject(WelcomeActivity arg0) {
      injectWelcomeActivity(arg0);
    }

    private WelcomeActivity injectWelcomeActivity(WelcomeActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, welcomeViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      WelcomeActivity_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      WelcomeActivity_MembersInjector.injectRequirementsChecker(instance, requirementsCheckerProvider.get());
      return instance;
    }

    private final class PlayFragmentSubcomponentFactory implements WelcomeActivityModule_BindPlayFragment.PlayFragmentSubcomponent.Factory {
      @Override
      public WelcomeActivityModule_BindPlayFragment.PlayFragmentSubcomponent create(
          PlayFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PlayFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PlayFragmentSubcomponentImpl implements WelcomeActivityModule_BindPlayFragment.PlayFragmentSubcomponent {
      private Provider<PlayFragmentViewModel> playFragmentViewModelProvider;

      private PlayFragmentSubcomponentImpl(PlayFragment arg0) {

        initialize(arg0);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PlayFragment arg0) {
        this.playFragmentViewModelProvider = DoubleCheck.provider(PlayFragmentViewModel_Factory.create(WelcomeActivitySubcomponentImpl.this.navigatorProvider));
      }

      @Override
      public void inject(PlayFragment arg0) {
        injectPlayFragment(arg0);
      }

      private PlayFragment injectPlayFragment(PlayFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, WelcomeActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseSupportFragment_MembersInjector.injectViewModel(instance, playFragmentViewModelProvider.get());
        BaseSupportFragment_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }
    }

    private final class IntroFragmentSubcomponentFactory implements WelcomeActivityModule_BindIntroFragment.IntroFragmentSubcomponent.Factory {
      @Override
      public WelcomeActivityModule_BindIntroFragment.IntroFragmentSubcomponent create(
          IntroFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new IntroFragmentSubcomponentImpl(arg0);
      }
    }

    private final class IntroFragmentSubcomponentImpl implements WelcomeActivityModule_BindIntroFragment.IntroFragmentSubcomponent {
      private IntroFragmentSubcomponentImpl(IntroFragment arg0) {

      }

      private NoOpViewModel noOpViewModel() {
        return injectNoOpViewModel(NoOpViewModel_Factory.newInstance());
      }

      @Override
      public void inject(IntroFragment arg0) {
        injectIntroFragment(arg0);
      }

      private NoOpViewModel injectNoOpViewModel(NoOpViewModel instance) {
        BaseViewModel_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }

      private IntroFragment injectIntroFragment(IntroFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, WelcomeActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseSupportFragment_MembersInjector.injectViewModel(instance, noOpViewModel());
        BaseSupportFragment_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }
    }

    private final class VersionFragmentSubcomponentFactory implements WelcomeActivityModule_BindVersionFragment.VersionFragmentSubcomponent.Factory {
      @Override
      public WelcomeActivityModule_BindVersionFragment.VersionFragmentSubcomponent create(
          VersionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new VersionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class VersionFragmentSubcomponentImpl implements WelcomeActivityModule_BindVersionFragment.VersionFragmentSubcomponent {
      private VersionFragmentSubcomponentImpl(VersionFragment arg0) {

      }

      private NoOpViewModel noOpViewModel() {
        return injectNoOpViewModel(NoOpViewModel_Factory.newInstance());
      }

      @Override
      public void inject(VersionFragment arg0) {
        injectVersionFragment(arg0);
      }

      private NoOpViewModel injectNoOpViewModel(NoOpViewModel instance) {
        BaseViewModel_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }

      private VersionFragment injectVersionFragment(VersionFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, WelcomeActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseSupportFragment_MembersInjector.injectViewModel(instance, noOpViewModel());
        BaseSupportFragment_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }
    }

    private final class PermissionFragmentSubcomponentFactory implements WelcomeActivityModule_BindPermissionFragment.PermissionFragmentSubcomponent.Factory {
      @Override
      public WelcomeActivityModule_BindPermissionFragment.PermissionFragmentSubcomponent create(
          PermissionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PermissionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PermissionFragmentSubcomponentImpl implements WelcomeActivityModule_BindPermissionFragment.PermissionFragmentSubcomponent {
      private PermissionFragmentSubcomponentImpl(PermissionFragment arg0) {

      }

      @Override
      public void inject(PermissionFragment arg0) {
        injectPermissionFragment(arg0);
      }

      private PermissionFragment injectPermissionFragment(PermissionFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, WelcomeActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseSupportFragment_MembersInjector.injectViewModel(instance, WelcomeActivitySubcomponentImpl.this.permissionFragmentViewModelProvider.get());
        BaseSupportFragment_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        PermissionFragment_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
        return instance;
      }
    }

    private final class FinishFragmentSubcomponentFactory implements WelcomeActivityModule_BindFinishFragment.FinishFragmentSubcomponent.Factory {
      @Override
      public WelcomeActivityModule_BindFinishFragment.FinishFragmentSubcomponent create(
          FinishFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FinishFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FinishFragmentSubcomponentImpl implements WelcomeActivityModule_BindFinishFragment.FinishFragmentSubcomponent {
      private FinishFragmentSubcomponentImpl(FinishFragment arg0) {

      }

      private NoOpViewModel noOpViewModel() {
        return injectNoOpViewModel(NoOpViewModel_Factory.newInstance());
      }

      @Override
      public void inject(FinishFragment arg0) {
        injectFinishFragment(arg0);
      }

      private NoOpViewModel injectNoOpViewModel(NoOpViewModel instance) {
        BaseViewModel_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }

      private FinishFragment injectFinishFragment(FinishFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, WelcomeActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseSupportFragment_MembersInjector.injectViewModel(instance, noOpViewModel());
        BaseSupportFragment_MembersInjector.injectNavigator(instance, WelcomeActivitySubcomponentImpl.this.navigatorProvider.get());
        return instance;
      }
    }
  }

  private final class RegionsActivitySubcomponentFactory implements AndroidBindingModule_BindRegionsActivity.RegionsActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindRegionsActivity.RegionsActivitySubcomponent create(
        RegionsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegionsActivitySubcomponentImpl(arg0);
    }
  }

  private final class RegionsActivitySubcomponentImpl implements AndroidBindingModule_BindRegionsActivity.RegionsActivitySubcomponent {
    private Provider<RegionsActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<RegionsViewModel> regionsViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private RegionsActivitySubcomponentImpl(RegionsActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RegionsActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.regionsViewModelProvider = DoubleCheck.provider(RegionsViewModel_Factory.create((Provider) DaggerAppComponent.this.objectboxWaypointsRepoProvider, DaggerAppComponent.this.locationProcessorProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(RegionsActivity arg0) {
      injectRegionsActivity(arg0);
    }

    private RegionsActivity injectRegionsActivity(RegionsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, regionsViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      RegionsActivity_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      return instance;
    }
  }

  private final class RegionActivitySubcomponentFactory implements AndroidBindingModule_BindRegionActivity.RegionActivitySubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindRegionActivity.RegionActivitySubcomponent create(
        RegionActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegionActivitySubcomponentImpl(arg0);
    }
  }

  private final class RegionActivitySubcomponentImpl implements AndroidBindingModule_BindRegionActivity.RegionActivitySubcomponent {
    private Provider<RegionActivity> arg0Provider;

    private Provider<AppCompatActivity> bindActivityProvider;

    private Provider<Navigator> navigatorProvider;

    private Provider<RegionViewModel> regionViewModelProvider;

    private Provider<DrawerProvider> drawerProvider;

    private RegionActivitySubcomponentImpl(RegionActivity arg0Param) {

      initialize(arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RegionActivity arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.bindActivityProvider = DoubleCheck.provider((Provider) arg0Provider);
      this.navigatorProvider = DoubleCheck.provider(Navigator_Factory.create(bindActivityProvider));
      this.regionViewModelProvider = DoubleCheck.provider(RegionViewModel_Factory.create((Provider) DaggerAppComponent.this.objectboxWaypointsRepoProvider, DaggerAppComponent.this.locationRepoProvider, navigatorProvider));
      this.drawerProvider = DoubleCheck.provider(DrawerProvider_Factory.create(bindActivityProvider, DaggerAppComponent.this.schedulerProvider));
    }

    @Override
    public void inject(RegionActivity arg0) {
      injectRegionActivity(arg0);
    }

    private RegionActivity injectRegionActivity(RegionActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModel(instance, regionViewModelProvider.get());
      BaseActivity_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
      BaseActivity_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      RegionActivity_MembersInjector.injectNavigator(instance, navigatorProvider.get());
      return instance;
    }
  }

  private final class BackgroundServiceSubcomponentFactory implements AndroidBindingModule_BindBackgroundService.BackgroundServiceSubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindBackgroundService.BackgroundServiceSubcomponent create(
        BackgroundService arg0) {
      Preconditions.checkNotNull(arg0);
      return new BackgroundServiceSubcomponentImpl(arg0);
    }
  }

  private final class BackgroundServiceSubcomponentImpl implements AndroidBindingModule_BindBackgroundService.BackgroundServiceSubcomponent {
    private BackgroundServiceSubcomponentImpl(BackgroundService arg0) {

    }

    @Override
    public void inject(BackgroundService arg0) {
      injectBackgroundService(arg0);
    }

    private BackgroundService injectBackgroundService(BackgroundService instance) {
      BackgroundService_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      BackgroundService_MembersInjector.injectEventBus(instance, DaggerAppComponent.this.provideEventbusProvider.get());
      BackgroundService_MembersInjector.injectScheduler(instance, DaggerAppComponent.this.schedulerProvider.get());
      BackgroundService_MembersInjector.injectLocationProcessor(instance, DaggerAppComponent.this.locationProcessorProvider.get());
      BackgroundService_MembersInjector.injectGeocoderProvider(instance, DaggerAppComponent.this.geocoderProvider.get());
      BackgroundService_MembersInjector.injectContactsRepo(instance, DaggerAppComponent.this.provideContactsRepoProvider.get());
      BackgroundService_MembersInjector.injectLocationRepo(instance, DaggerAppComponent.this.locationRepoProvider.get());
      BackgroundService_MembersInjector.injectRunThingsOnOtherThreads(instance, DaggerAppComponent.this.runThingsOnOtherThreadsProvider.get());
      BackgroundService_MembersInjector.injectWaypointsRepo(instance, DaggerAppComponent.this.objectboxWaypointsRepoProvider.get());
      BackgroundService_MembersInjector.injectServiceBridge(instance, DaggerAppComponent.this.serviceBridgeProvider.get());
      BackgroundService_MembersInjector.injectMessageProcessor(instance, DaggerAppComponent.this.messageProcessorProvider.get());
      return instance;
    }
  }

  private final class StartBackgroundServiceReceiverSubcomponentFactory implements AndroidBindingModule_BindBackgroundServiceReceiver.StartBackgroundServiceReceiverSubcomponent.Factory {
    @Override
    public AndroidBindingModule_BindBackgroundServiceReceiver.StartBackgroundServiceReceiverSubcomponent create(
        StartBackgroundServiceReceiver arg0) {
      Preconditions.checkNotNull(arg0);
      return new StartBackgroundServiceReceiverSubcomponentImpl(arg0);
    }
  }

  private final class StartBackgroundServiceReceiverSubcomponentImpl implements AndroidBindingModule_BindBackgroundServiceReceiver.StartBackgroundServiceReceiverSubcomponent {
    private StartBackgroundServiceReceiverSubcomponentImpl(StartBackgroundServiceReceiver arg0) {

    }

    @Override
    public void inject(StartBackgroundServiceReceiver arg0) {
      injectStartBackgroundServiceReceiver(arg0);
    }

    private StartBackgroundServiceReceiver injectStartBackgroundServiceReceiver(
        StartBackgroundServiceReceiver instance) {
      StartBackgroundServiceReceiver_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.preferencesProvider.get());
      return instance;
    }
  }
}
