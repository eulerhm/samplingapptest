// Generated by Dagger (https://dagger.dev).
package org.owntracks.android.ui.preferences.connection;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.greenrobot.eventbus.EventBus;
import org.owntracks.android.services.MessageProcessor;
import org.owntracks.android.support.DrawerProvider;
import org.owntracks.android.support.Preferences;
import org.owntracks.android.support.RunThingsOnOtherThreads;
import org.owntracks.android.ui.base.BaseActivity_MembersInjector;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ConnectionActivity_MembersInjector implements MembersInjector<ConnectionActivity> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<ConnectionMvvm.ViewModel<ConnectionMvvm.View>> viewModelProvider;

  private final Provider<EventBus> eventBusProvider;

  private final Provider<DrawerProvider> drawerProvider;

  private final Provider<Preferences> preferencesProvider;

  private final Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider;

  private final Provider<MessageProcessor> messageProcessorProvider;

  public ConnectionActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ConnectionMvvm.ViewModel<ConnectionMvvm.View>> viewModelProvider,
      Provider<EventBus> eventBusProvider, Provider<DrawerProvider> drawerProvider,
      Provider<Preferences> preferencesProvider,
      Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider,
      Provider<MessageProcessor> messageProcessorProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.viewModelProvider = viewModelProvider;
    this.eventBusProvider = eventBusProvider;
    this.drawerProvider = drawerProvider;
    this.preferencesProvider = preferencesProvider;
    this.runThingsOnOtherThreadsProvider = runThingsOnOtherThreadsProvider;
    this.messageProcessorProvider = messageProcessorProvider;
  }

  public static MembersInjector<ConnectionActivity> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<ConnectionMvvm.ViewModel<ConnectionMvvm.View>> viewModelProvider,
      Provider<EventBus> eventBusProvider, Provider<DrawerProvider> drawerProvider,
      Provider<Preferences> preferencesProvider,
      Provider<RunThingsOnOtherThreads> runThingsOnOtherThreadsProvider,
      Provider<MessageProcessor> messageProcessorProvider) {
    return new ConnectionActivity_MembersInjector(androidInjectorProvider, viewModelProvider, eventBusProvider, drawerProvider, preferencesProvider, runThingsOnOtherThreadsProvider, messageProcessorProvider);
  }

  @Override
  public void injectMembers(ConnectionActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    BaseActivity_MembersInjector.injectViewModel(instance, viewModelProvider.get());
    BaseActivity_MembersInjector.injectEventBus(instance, eventBusProvider.get());
    BaseActivity_MembersInjector.injectDrawerProvider(instance, drawerProvider.get());
    BaseActivity_MembersInjector.injectPreferences(instance, preferencesProvider.get());
    injectRunThingsOnOtherThreads(instance, runThingsOnOtherThreadsProvider.get());
    injectMessageProcessor(instance, messageProcessorProvider.get());
  }

  @InjectedFieldSignature("org.owntracks.android.ui.preferences.connection.ConnectionActivity.runThingsOnOtherThreads")
  public static void injectRunThingsOnOtherThreads(ConnectionActivity instance,
      RunThingsOnOtherThreads runThingsOnOtherThreads) {
    instance.runThingsOnOtherThreads = runThingsOnOtherThreads;
  }

  @InjectedFieldSignature("org.owntracks.android.ui.preferences.connection.ConnectionActivity.messageProcessor")
  public static void injectMessageProcessor(ConnectionActivity instance,
      MessageProcessor messageProcessor) {
    instance.messageProcessor = messageProcessor;
  }
}
