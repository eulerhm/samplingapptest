// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.media;

import com.woocommerce.android.media.ProductImagesNotificationHandler;
import com.woocommerce.android.media.ProductImagesUploadWorker;
import com.woocommerce.android.ui.products.ProductDetailRepository;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MediaFileUploadHandler_Factory implements Factory<MediaFileUploadHandler> {
  private final Provider<ProductImagesNotificationHandler> notificationHandlerProvider;

  private final Provider<ProductImagesUploadWorker> workerProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<ProductDetailRepository> productDetailRepositoryProvider;

  private final Provider<CoroutineScope> appCoroutineScopeProvider;

  public MediaFileUploadHandler_Factory(
      Provider<ProductImagesNotificationHandler> notificationHandlerProvider,
      Provider<ProductImagesUploadWorker> workerProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<ProductDetailRepository> productDetailRepositoryProvider,
      Provider<CoroutineScope> appCoroutineScopeProvider) {
    this.notificationHandlerProvider = notificationHandlerProvider;
    this.workerProvider = workerProvider;
    this.resourceProvider = resourceProvider;
    this.productDetailRepositoryProvider = productDetailRepositoryProvider;
    this.appCoroutineScopeProvider = appCoroutineScopeProvider;
  }

  @Override
  public MediaFileUploadHandler get() {
    return newInstance(notificationHandlerProvider.get(), workerProvider.get(), resourceProvider.get(), productDetailRepositoryProvider.get(), appCoroutineScopeProvider.get());
  }

  public static MediaFileUploadHandler_Factory create(
      Provider<ProductImagesNotificationHandler> notificationHandlerProvider,
      Provider<ProductImagesUploadWorker> workerProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<ProductDetailRepository> productDetailRepositoryProvider,
      Provider<CoroutineScope> appCoroutineScopeProvider) {
    return new MediaFileUploadHandler_Factory(notificationHandlerProvider, workerProvider, resourceProvider, productDetailRepositoryProvider, appCoroutineScopeProvider);
  }

  public static MediaFileUploadHandler newInstance(
      ProductImagesNotificationHandler notificationHandler, ProductImagesUploadWorker worker,
      ResourceProvider resourceProvider, ProductDetailRepository productDetailRepository,
      CoroutineScope appCoroutineScope) {
    return new MediaFileUploadHandler(notificationHandler, worker, resourceProvider, productDetailRepository, appCoroutineScope);
  }
}
