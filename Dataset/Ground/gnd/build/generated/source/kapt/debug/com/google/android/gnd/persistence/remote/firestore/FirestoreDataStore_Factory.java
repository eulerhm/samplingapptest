// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.persistence.remote.firestore;

import com.google.android.gnd.persistence.remote.firestore.schema.GroundFirestore;
import com.google.android.gnd.rx.Schedulers;
import com.google.android.gnd.system.ApplicationErrorManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirestoreDataStore_Factory implements Factory<FirestoreDataStore> {
  private final Provider<ApplicationErrorManager> errorManagerProvider;

  private final Provider<GroundFirestore> dbProvider;

  private final Provider<Schedulers> schedulersProvider;

  public FirestoreDataStore_Factory(Provider<ApplicationErrorManager> errorManagerProvider,
      Provider<GroundFirestore> dbProvider, Provider<Schedulers> schedulersProvider) {
    this.errorManagerProvider = errorManagerProvider;
    this.dbProvider = dbProvider;
    this.schedulersProvider = schedulersProvider;
  }

  @Override
  public FirestoreDataStore get() {
    FirestoreDataStore instance = newInstance();
    FirestoreDataStore_MembersInjector.injectErrorManager(instance, errorManagerProvider.get());
    FirestoreDataStore_MembersInjector.injectDb(instance, dbProvider.get());
    FirestoreDataStore_MembersInjector.injectSchedulers(instance, schedulersProvider.get());
    return instance;
  }

  public static FirestoreDataStore_Factory create(
      Provider<ApplicationErrorManager> errorManagerProvider, Provider<GroundFirestore> dbProvider,
      Provider<Schedulers> schedulersProvider) {
    return new FirestoreDataStore_Factory(errorManagerProvider, dbProvider, schedulersProvider);
  }

  public static FirestoreDataStore newInstance() {
    return new FirestoreDataStore();
  }
}
