// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class ModalLayoutPickerFragmentBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final RecyclerView categoriesRecyclerView;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final RecyclerView layoutsRecyclerView;

  @NonNull
  public final ModalLayoutPickerBottomToolbarBinding modalLayoutPickerBottomToolbar;

  @NonNull
  public final ModalLayoutPickerCategoriesSkeletonBinding modalLayoutPickerCategoriesSkeleton;

  @NonNull
  public final ModalLayoutPickerErrorBinding modalLayoutPickerError;

  @NonNull
  public final ModalLayoutPickerHeaderSectionBinding modalLayoutPickerHeaderSection;

  @NonNull
  public final ModalLayoutPickerLayoutsSkeletonBinding modalLayoutPickerLayoutsSkeleton;

  @NonNull
  public final ModalLayoutPickerTitlebarBinding modalLayoutPickerTitlebar;

  @NonNull
  public final MaterialToolbar toolbar;

  private ModalLayoutPickerFragmentBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull RecyclerView categoriesRecyclerView,
      @NonNull CollapsingToolbarLayout collapsingToolbar, @NonNull RecyclerView layoutsRecyclerView,
      @NonNull ModalLayoutPickerBottomToolbarBinding modalLayoutPickerBottomToolbar,
      @NonNull ModalLayoutPickerCategoriesSkeletonBinding modalLayoutPickerCategoriesSkeleton,
      @NonNull ModalLayoutPickerErrorBinding modalLayoutPickerError,
      @NonNull ModalLayoutPickerHeaderSectionBinding modalLayoutPickerHeaderSection,
      @NonNull ModalLayoutPickerLayoutsSkeletonBinding modalLayoutPickerLayoutsSkeleton,
      @NonNull ModalLayoutPickerTitlebarBinding modalLayoutPickerTitlebar,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.categoriesRecyclerView = categoriesRecyclerView;
    this.collapsingToolbar = collapsingToolbar;
    this.layoutsRecyclerView = layoutsRecyclerView;
    this.modalLayoutPickerBottomToolbar = modalLayoutPickerBottomToolbar;
    this.modalLayoutPickerCategoriesSkeleton = modalLayoutPickerCategoriesSkeleton;
    this.modalLayoutPickerError = modalLayoutPickerError;
    this.modalLayoutPickerHeaderSection = modalLayoutPickerHeaderSection;
    this.modalLayoutPickerLayoutsSkeleton = modalLayoutPickerLayoutsSkeleton;
    this.modalLayoutPickerTitlebar = modalLayoutPickerTitlebar;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ModalLayoutPickerFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ModalLayoutPickerFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.modal_layout_picker_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ModalLayoutPickerFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.categoriesRecyclerView;
      RecyclerView categoriesRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (categoriesRecyclerView == null) {
        break missingId;
      }

      id = R.id.collapsing_toolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.layoutsRecyclerView;
      RecyclerView layoutsRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (layoutsRecyclerView == null) {
        break missingId;
      }

      id = R.id.modal_layout_picker_bottom_toolbar;
      View modalLayoutPickerBottomToolbar = ViewBindings.findChildViewById(rootView, id);
      if (modalLayoutPickerBottomToolbar == null) {
        break missingId;
      }
      ModalLayoutPickerBottomToolbarBinding binding_modalLayoutPickerBottomToolbar = ModalLayoutPickerBottomToolbarBinding.bind(modalLayoutPickerBottomToolbar);

      id = R.id.modal_layout_picker_categories_skeleton;
      View modalLayoutPickerCategoriesSkeleton = ViewBindings.findChildViewById(rootView, id);
      if (modalLayoutPickerCategoriesSkeleton == null) {
        break missingId;
      }
      ModalLayoutPickerCategoriesSkeletonBinding binding_modalLayoutPickerCategoriesSkeleton = ModalLayoutPickerCategoriesSkeletonBinding.bind(modalLayoutPickerCategoriesSkeleton);

      id = R.id.modal_layout_picker_error;
      View modalLayoutPickerError = ViewBindings.findChildViewById(rootView, id);
      if (modalLayoutPickerError == null) {
        break missingId;
      }
      ModalLayoutPickerErrorBinding binding_modalLayoutPickerError = ModalLayoutPickerErrorBinding.bind(modalLayoutPickerError);

      id = R.id.modal_layout_picker_header_section;
      View modalLayoutPickerHeaderSection = ViewBindings.findChildViewById(rootView, id);
      if (modalLayoutPickerHeaderSection == null) {
        break missingId;
      }
      ModalLayoutPickerHeaderSectionBinding binding_modalLayoutPickerHeaderSection = ModalLayoutPickerHeaderSectionBinding.bind(modalLayoutPickerHeaderSection);

      id = R.id.modal_layout_picker_layouts_skeleton;
      View modalLayoutPickerLayoutsSkeleton = ViewBindings.findChildViewById(rootView, id);
      if (modalLayoutPickerLayoutsSkeleton == null) {
        break missingId;
      }
      ModalLayoutPickerLayoutsSkeletonBinding binding_modalLayoutPickerLayoutsSkeleton = ModalLayoutPickerLayoutsSkeletonBinding.bind(modalLayoutPickerLayoutsSkeleton);

      id = R.id.modal_layout_picker_titlebar;
      View modalLayoutPickerTitlebar = ViewBindings.findChildViewById(rootView, id);
      if (modalLayoutPickerTitlebar == null) {
        break missingId;
      }
      ModalLayoutPickerTitlebarBinding binding_modalLayoutPickerTitlebar = ModalLayoutPickerTitlebarBinding.bind(modalLayoutPickerTitlebar);

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ModalLayoutPickerFragmentBinding((CoordinatorLayout) rootView, appBarLayout,
          categoriesRecyclerView, collapsingToolbar, layoutsRecyclerView,
          binding_modalLayoutPickerBottomToolbar, binding_modalLayoutPickerCategoriesSkeleton,
          binding_modalLayoutPickerError, binding_modalLayoutPickerHeaderSection,
          binding_modalLayoutPickerLayoutsSkeleton, binding_modalLayoutPickerTitlebar, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
