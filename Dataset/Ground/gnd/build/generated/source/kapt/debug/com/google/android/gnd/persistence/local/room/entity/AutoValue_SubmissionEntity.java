package com.google.android.gnd.persistence.local.room.entity;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Embedded;
import androidx.room.PrimaryKey;
import com.google.android.gnd.persistence.local.room.models.EntityState;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_SubmissionEntity extends SubmissionEntity {

  @PrimaryKey
  @ColumnInfo(name = "id")
  @NonNull
  private final String id;

  @ColumnInfo(name = "feature_id")
  @NonNull
  private final String featureId;

  @ColumnInfo(name = "task_id")
  @NonNull
  private final String taskId;

  @ColumnInfo(name = "state")
  @NonNull
  private final EntityState state;

  @ColumnInfo(name = "responses")
  @Nullable
  private final String responses;

  @NonNull
  @Embedded(prefix = "created_")
  private final AuditInfoEntity created;

  @NonNull
  @Embedded(prefix = "modified_")
  private final AuditInfoEntity lastModified;

  private AutoValue_SubmissionEntity(
      String id,
      String featureId,
      String taskId,
      EntityState state,
      @Nullable String responses,
      AuditInfoEntity created,
      AuditInfoEntity lastModified) {
    this.id = id;
    this.featureId = featureId;
    this.taskId = taskId;
    this.state = state;
    this.responses = responses;
    this.created = created;
    this.lastModified = lastModified;
  }

  @PrimaryKey
  @ColumnInfo(name = "id")
  @NonNull
  @Override
  public String getId() {
    return id;
  }

  @ColumnInfo(name = "feature_id")
  @NonNull
  @Override
  public String getFeatureId() {
    return featureId;
  }

  @ColumnInfo(name = "task_id")
  @NonNull
  @Override
  public String getTaskId() {
    return taskId;
  }

  @ColumnInfo(name = "state")
  @NonNull
  @Override
  public EntityState getState() {
    return state;
  }

  @ColumnInfo(name = "responses")
  @Nullable
  @Override
  public String getResponses() {
    return responses;
  }

  @NonNull
  @Embedded(prefix = "created_")
  @Override
  public AuditInfoEntity getCreated() {
    return created;
  }

  @NonNull
  @Embedded(prefix = "modified_")
  @Override
  public AuditInfoEntity getLastModified() {
    return lastModified;
  }

  @Override
  public String toString() {
    return "SubmissionEntity{"
        + "id=" + id + ", "
        + "featureId=" + featureId + ", "
        + "taskId=" + taskId + ", "
        + "state=" + state + ", "
        + "responses=" + responses + ", "
        + "created=" + created + ", "
        + "lastModified=" + lastModified
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof SubmissionEntity) {
      SubmissionEntity that = (SubmissionEntity) o;
      return this.id.equals(that.getId())
          && this.featureId.equals(that.getFeatureId())
          && this.taskId.equals(that.getTaskId())
          && this.state.equals(that.getState())
          && (this.responses == null ? that.getResponses() == null : this.responses.equals(that.getResponses()))
          && this.created.equals(that.getCreated())
          && this.lastModified.equals(that.getLastModified());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= id.hashCode();
    h$ *= 1000003;
    h$ ^= featureId.hashCode();
    h$ *= 1000003;
    h$ ^= taskId.hashCode();
    h$ *= 1000003;
    h$ ^= state.hashCode();
    h$ *= 1000003;
    h$ ^= (responses == null) ? 0 : responses.hashCode();
    h$ *= 1000003;
    h$ ^= created.hashCode();
    h$ *= 1000003;
    h$ ^= lastModified.hashCode();
    return h$;
  }

  @Override
  public SubmissionEntity.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends SubmissionEntity.Builder {
    private String id;
    private String featureId;
    private String taskId;
    private EntityState state;
    private String responses;
    private AuditInfoEntity created;
    private AuditInfoEntity lastModified;
    Builder() {
    }
    private Builder(SubmissionEntity source) {
      this.id = source.getId();
      this.featureId = source.getFeatureId();
      this.taskId = source.getTaskId();
      this.state = source.getState();
      this.responses = source.getResponses();
      this.created = source.getCreated();
      this.lastModified = source.getLastModified();
    }
    @Override
    public SubmissionEntity.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public SubmissionEntity.Builder setFeatureId(String featureId) {
      if (featureId == null) {
        throw new NullPointerException("Null featureId");
      }
      this.featureId = featureId;
      return this;
    }
    @Override
    public SubmissionEntity.Builder setTaskId(String taskId) {
      if (taskId == null) {
        throw new NullPointerException("Null taskId");
      }
      this.taskId = taskId;
      return this;
    }
    @Override
    public SubmissionEntity.Builder setState(EntityState state) {
      if (state == null) {
        throw new NullPointerException("Null state");
      }
      this.state = state;
      return this;
    }
    @Override
    public SubmissionEntity.Builder setResponses(@Nullable String responses) {
      this.responses = responses;
      return this;
    }
    @Override
    public SubmissionEntity.Builder setCreated(AuditInfoEntity created) {
      if (created == null) {
        throw new NullPointerException("Null created");
      }
      this.created = created;
      return this;
    }
    @Override
    public SubmissionEntity.Builder setLastModified(AuditInfoEntity lastModified) {
      if (lastModified == null) {
        throw new NullPointerException("Null lastModified");
      }
      this.lastModified = lastModified;
      return this;
    }
    @Override
    public SubmissionEntity build() {
      String missing = "";
      if (this.id == null) {
        missing += " id";
      }
      if (this.featureId == null) {
        missing += " featureId";
      }
      if (this.taskId == null) {
        missing += " taskId";
      }
      if (this.state == null) {
        missing += " state";
      }
      if (this.created == null) {
        missing += " created";
      }
      if (this.lastModified == null) {
        missing += " lastModified";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_SubmissionEntity(
          this.id,
          this.featureId,
          this.taskId,
          this.state,
          this.responses,
          this.created,
          this.lastModified);
    }
  }

}
