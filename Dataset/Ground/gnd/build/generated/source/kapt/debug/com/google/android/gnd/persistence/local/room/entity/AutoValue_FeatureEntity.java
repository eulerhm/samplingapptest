package com.google.android.gnd.persistence.local.room.entity;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Embedded;
import androidx.room.PrimaryKey;
import com.google.android.gnd.persistence.local.room.models.Coordinates;
import com.google.android.gnd.persistence.local.room.models.EntityState;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_FeatureEntity extends FeatureEntity {

  @NonNull
  @PrimaryKey
  @ColumnInfo(name = "id")
  private final String id;

  @NonNull
  @ColumnInfo(name = "survey_id")
  private final String surveyId;

  @NonNull
  @ColumnInfo(name = "job_id")
  private final String jobId;

  @Nullable
  @ColumnInfo(name = "geo_json")
  private final String geoJson;

  @Nullable
  @ColumnInfo(name = "polygon_vertices")
  private final String polygonVertices;

  @NonNull
  @ColumnInfo(name = "state")
  private final EntityState state;

  @Nullable
  @Embedded
  private final Coordinates location;

  @NonNull
  @Embedded(prefix = "created_")
  private final AuditInfoEntity created;

  @NonNull
  @Embedded(prefix = "modified_")
  private final AuditInfoEntity lastModified;

  private AutoValue_FeatureEntity(
      String id,
      String surveyId,
      String jobId,
      @Nullable String geoJson,
      @Nullable String polygonVertices,
      EntityState state,
      @Nullable Coordinates location,
      AuditInfoEntity created,
      AuditInfoEntity lastModified) {
    this.id = id;
    this.surveyId = surveyId;
    this.jobId = jobId;
    this.geoJson = geoJson;
    this.polygonVertices = polygonVertices;
    this.state = state;
    this.location = location;
    this.created = created;
    this.lastModified = lastModified;
  }

  @NonNull
  @PrimaryKey
  @ColumnInfo(name = "id")
  @Override
  public String getId() {
    return id;
  }

  @NonNull
  @ColumnInfo(name = "survey_id")
  @Override
  public String getSurveyId() {
    return surveyId;
  }

  @NonNull
  @ColumnInfo(name = "job_id")
  @Override
  public String getJobId() {
    return jobId;
  }

  @Nullable
  @ColumnInfo(name = "geo_json")
  @Override
  public String getGeoJson() {
    return geoJson;
  }

  @Nullable
  @ColumnInfo(name = "polygon_vertices")
  @Override
  public String getPolygonVertices() {
    return polygonVertices;
  }

  @NonNull
  @ColumnInfo(name = "state")
  @Override
  public EntityState getState() {
    return state;
  }

  @Nullable
  @Embedded
  @Override
  public Coordinates getLocation() {
    return location;
  }

  @NonNull
  @Embedded(prefix = "created_")
  @Override
  public AuditInfoEntity getCreated() {
    return created;
  }

  @NonNull
  @Embedded(prefix = "modified_")
  @Override
  public AuditInfoEntity getLastModified() {
    return lastModified;
  }

  @Override
  public String toString() {
    return "FeatureEntity{"
        + "id=" + id + ", "
        + "surveyId=" + surveyId + ", "
        + "jobId=" + jobId + ", "
        + "geoJson=" + geoJson + ", "
        + "polygonVertices=" + polygonVertices + ", "
        + "state=" + state + ", "
        + "location=" + location + ", "
        + "created=" + created + ", "
        + "lastModified=" + lastModified
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof FeatureEntity) {
      FeatureEntity that = (FeatureEntity) o;
      return this.id.equals(that.getId())
          && this.surveyId.equals(that.getSurveyId())
          && this.jobId.equals(that.getJobId())
          && (this.geoJson == null ? that.getGeoJson() == null : this.geoJson.equals(that.getGeoJson()))
          && (this.polygonVertices == null ? that.getPolygonVertices() == null : this.polygonVertices.equals(that.getPolygonVertices()))
          && this.state.equals(that.getState())
          && (this.location == null ? that.getLocation() == null : this.location.equals(that.getLocation()))
          && this.created.equals(that.getCreated())
          && this.lastModified.equals(that.getLastModified());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= id.hashCode();
    h$ *= 1000003;
    h$ ^= surveyId.hashCode();
    h$ *= 1000003;
    h$ ^= jobId.hashCode();
    h$ *= 1000003;
    h$ ^= (geoJson == null) ? 0 : geoJson.hashCode();
    h$ *= 1000003;
    h$ ^= (polygonVertices == null) ? 0 : polygonVertices.hashCode();
    h$ *= 1000003;
    h$ ^= state.hashCode();
    h$ *= 1000003;
    h$ ^= (location == null) ? 0 : location.hashCode();
    h$ *= 1000003;
    h$ ^= created.hashCode();
    h$ *= 1000003;
    h$ ^= lastModified.hashCode();
    return h$;
  }

  @Override
  public FeatureEntity.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends FeatureEntity.Builder {
    private String id;
    private String surveyId;
    private String jobId;
    private String geoJson;
    private String polygonVertices;
    private EntityState state;
    private Coordinates location;
    private AuditInfoEntity created;
    private AuditInfoEntity lastModified;
    Builder() {
    }
    private Builder(FeatureEntity source) {
      this.id = source.getId();
      this.surveyId = source.getSurveyId();
      this.jobId = source.getJobId();
      this.geoJson = source.getGeoJson();
      this.polygonVertices = source.getPolygonVertices();
      this.state = source.getState();
      this.location = source.getLocation();
      this.created = source.getCreated();
      this.lastModified = source.getLastModified();
    }
    @Override
    public FeatureEntity.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public FeatureEntity.Builder setSurveyId(String surveyId) {
      if (surveyId == null) {
        throw new NullPointerException("Null surveyId");
      }
      this.surveyId = surveyId;
      return this;
    }
    @Override
    public FeatureEntity.Builder setJobId(String jobId) {
      if (jobId == null) {
        throw new NullPointerException("Null jobId");
      }
      this.jobId = jobId;
      return this;
    }
    @Override
    public FeatureEntity.Builder setGeoJson(@Nullable String geoJson) {
      this.geoJson = geoJson;
      return this;
    }
    @Override
    public FeatureEntity.Builder setPolygonVertices(@Nullable String polygonVertices) {
      this.polygonVertices = polygonVertices;
      return this;
    }
    @Override
    public FeatureEntity.Builder setState(EntityState state) {
      if (state == null) {
        throw new NullPointerException("Null state");
      }
      this.state = state;
      return this;
    }
    @Override
    public FeatureEntity.Builder setLocation(@Nullable Coordinates location) {
      this.location = location;
      return this;
    }
    @Override
    public FeatureEntity.Builder setCreated(AuditInfoEntity created) {
      if (created == null) {
        throw new NullPointerException("Null created");
      }
      this.created = created;
      return this;
    }
    @Override
    public FeatureEntity.Builder setLastModified(AuditInfoEntity lastModified) {
      if (lastModified == null) {
        throw new NullPointerException("Null lastModified");
      }
      this.lastModified = lastModified;
      return this;
    }
    @Override
    public FeatureEntity build() {
      String missing = "";
      if (this.id == null) {
        missing += " id";
      }
      if (this.surveyId == null) {
        missing += " surveyId";
      }
      if (this.jobId == null) {
        missing += " jobId";
      }
      if (this.state == null) {
        missing += " state";
      }
      if (this.created == null) {
        missing += " created";
      }
      if (this.lastModified == null) {
        missing += " lastModified";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_FeatureEntity(
          this.id,
          this.surveyId,
          this.jobId,
          this.geoJson,
          this.polygonVertices,
          this.state,
          this.location,
          this.created,
          this.lastModified);
    }
  }

}
