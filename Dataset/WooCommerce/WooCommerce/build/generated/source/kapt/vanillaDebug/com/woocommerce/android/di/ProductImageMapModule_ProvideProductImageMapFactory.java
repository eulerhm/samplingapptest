// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.di;

import com.woocommerce.android.tools.ProductImageMap;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.util.CoroutineDispatchers;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import org.wordpress.android.fluxc.store.WCProductStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductImageMapModule_ProvideProductImageMapFactory implements Factory<ProductImageMap> {
  private final ProductImageMapModule module;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<WCProductStore> productStoreProvider;

  private final Provider<CoroutineScope> appCoroutineScopeProvider;

  private final Provider<CoroutineDispatchers> coroutineDispatchersProvider;

  public ProductImageMapModule_ProvideProductImageMapFactory(ProductImageMapModule module,
      Provider<SelectedSite> selectedSiteProvider, Provider<WCProductStore> productStoreProvider,
      Provider<CoroutineScope> appCoroutineScopeProvider,
      Provider<CoroutineDispatchers> coroutineDispatchersProvider) {
    this.module = module;
    this.selectedSiteProvider = selectedSiteProvider;
    this.productStoreProvider = productStoreProvider;
    this.appCoroutineScopeProvider = appCoroutineScopeProvider;
    this.coroutineDispatchersProvider = coroutineDispatchersProvider;
  }

  @Override
  public ProductImageMap get() {
    return provideProductImageMap(module, selectedSiteProvider.get(), productStoreProvider.get(), appCoroutineScopeProvider.get(), coroutineDispatchersProvider.get());
  }

  public static ProductImageMapModule_ProvideProductImageMapFactory create(
      ProductImageMapModule module, Provider<SelectedSite> selectedSiteProvider,
      Provider<WCProductStore> productStoreProvider,
      Provider<CoroutineScope> appCoroutineScopeProvider,
      Provider<CoroutineDispatchers> coroutineDispatchersProvider) {
    return new ProductImageMapModule_ProvideProductImageMapFactory(module, selectedSiteProvider, productStoreProvider, appCoroutineScopeProvider, coroutineDispatchersProvider);
  }

  public static ProductImageMap provideProductImageMap(ProductImageMapModule instance,
      SelectedSite selectedSite, WCProductStore productStore, CoroutineScope appCoroutineScope,
      CoroutineDispatchers coroutineDispatchers) {
    return Preconditions.checkNotNullFromProvides(instance.provideProductImageMap(selectedSite, productStore, appCoroutineScope, coroutineDispatchers));
  }
}
