// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RefundFeeListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SwitchMaterial issueRefundFeeLineSwitch;

  @NonNull
  public final View issueRefundFeesDivider;

  @NonNull
  public final MaterialTextView issueRefundFeesName;

  @NonNull
  public final MaterialTextView issueRefundFeesPrice;

  private RefundFeeListItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull SwitchMaterial issueRefundFeeLineSwitch, @NonNull View issueRefundFeesDivider,
      @NonNull MaterialTextView issueRefundFeesName,
      @NonNull MaterialTextView issueRefundFeesPrice) {
    this.rootView = rootView;
    this.issueRefundFeeLineSwitch = issueRefundFeeLineSwitch;
    this.issueRefundFeesDivider = issueRefundFeesDivider;
    this.issueRefundFeesName = issueRefundFeesName;
    this.issueRefundFeesPrice = issueRefundFeesPrice;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RefundFeeListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RefundFeeListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.refund_fee_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RefundFeeListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.issueRefund_feeLineSwitch;
      SwitchMaterial issueRefundFeeLineSwitch = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundFeeLineSwitch == null) {
        break missingId;
      }

      id = R.id.issueRefund_feesDivider;
      View issueRefundFeesDivider = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundFeesDivider == null) {
        break missingId;
      }

      id = R.id.issueRefund_feesName;
      MaterialTextView issueRefundFeesName = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundFeesName == null) {
        break missingId;
      }

      id = R.id.issueRefund_feesPrice;
      MaterialTextView issueRefundFeesPrice = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundFeesPrice == null) {
        break missingId;
      }

      return new RefundFeeListItemBinding((ConstraintLayout) rootView, issueRefundFeeLineSwitch,
          issueRefundFeesDivider, issueRefundFeesName, issueRefundFeesPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
