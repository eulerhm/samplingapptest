// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.checkbox.MaterialCheckBox;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import com.woocommerce.android.widgets.WCElevatedLinearLayout;
import com.woocommerce.android.widgets.WCMaterialOutlinedEditTextView;
import com.woocommerce.android.widgets.WCMaterialOutlinedSpinnerView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ShippingCustomsListItemBinding implements ViewBinding {
  @NonNull
  private final WCElevatedLinearLayout rootView;

  @NonNull
  public final View bottomDivider;

  @NonNull
  public final MaterialTextView contentSectionTitle;

  @NonNull
  public final WCMaterialOutlinedEditTextView contentsTypeDescription;

  @NonNull
  public final WCMaterialOutlinedSpinnerView contentsTypeSpinner;

  @NonNull
  public final LinearLayout detailsLayout;

  @NonNull
  public final View divider1;

  @NonNull
  public final View divider2;

  @NonNull
  public final AppCompatImageView errorView;

  @NonNull
  public final AppCompatImageView expandIcon;

  @NonNull
  public final RecyclerView itemsList;

  @NonNull
  public final MaterialTextView itnDescription;

  @NonNull
  public final WCMaterialOutlinedEditTextView itnEditText;

  @NonNull
  public final MaterialTextView packageId;

  @NonNull
  public final MaterialTextView packageName;

  @NonNull
  public final WCMaterialOutlinedEditTextView restrictionTypeDescription;

  @NonNull
  public final WCMaterialOutlinedSpinnerView restrictionTypeSpinner;

  @NonNull
  public final MaterialCheckBox returnCheckbox;

  @NonNull
  public final LinearLayout titleLayout;

  private ShippingCustomsListItemBinding(@NonNull WCElevatedLinearLayout rootView,
      @NonNull View bottomDivider, @NonNull MaterialTextView contentSectionTitle,
      @NonNull WCMaterialOutlinedEditTextView contentsTypeDescription,
      @NonNull WCMaterialOutlinedSpinnerView contentsTypeSpinner,
      @NonNull LinearLayout detailsLayout, @NonNull View divider1, @NonNull View divider2,
      @NonNull AppCompatImageView errorView, @NonNull AppCompatImageView expandIcon,
      @NonNull RecyclerView itemsList, @NonNull MaterialTextView itnDescription,
      @NonNull WCMaterialOutlinedEditTextView itnEditText, @NonNull MaterialTextView packageId,
      @NonNull MaterialTextView packageName,
      @NonNull WCMaterialOutlinedEditTextView restrictionTypeDescription,
      @NonNull WCMaterialOutlinedSpinnerView restrictionTypeSpinner,
      @NonNull MaterialCheckBox returnCheckbox, @NonNull LinearLayout titleLayout) {
    this.rootView = rootView;
    this.bottomDivider = bottomDivider;
    this.contentSectionTitle = contentSectionTitle;
    this.contentsTypeDescription = contentsTypeDescription;
    this.contentsTypeSpinner = contentsTypeSpinner;
    this.detailsLayout = detailsLayout;
    this.divider1 = divider1;
    this.divider2 = divider2;
    this.errorView = errorView;
    this.expandIcon = expandIcon;
    this.itemsList = itemsList;
    this.itnDescription = itnDescription;
    this.itnEditText = itnEditText;
    this.packageId = packageId;
    this.packageName = packageName;
    this.restrictionTypeDescription = restrictionTypeDescription;
    this.restrictionTypeSpinner = restrictionTypeSpinner;
    this.returnCheckbox = returnCheckbox;
    this.titleLayout = titleLayout;
  }

  @Override
  @NonNull
  public WCElevatedLinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ShippingCustomsListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ShippingCustomsListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.shipping_customs_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ShippingCustomsListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_divider;
      View bottomDivider = ViewBindings.findChildViewById(rootView, id);
      if (bottomDivider == null) {
        break missingId;
      }

      id = R.id.content_section_title;
      MaterialTextView contentSectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (contentSectionTitle == null) {
        break missingId;
      }

      id = R.id.contents_type_description;
      WCMaterialOutlinedEditTextView contentsTypeDescription = ViewBindings.findChildViewById(rootView, id);
      if (contentsTypeDescription == null) {
        break missingId;
      }

      id = R.id.contents_type_spinner;
      WCMaterialOutlinedSpinnerView contentsTypeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (contentsTypeSpinner == null) {
        break missingId;
      }

      id = R.id.details_layout;
      LinearLayout detailsLayout = ViewBindings.findChildViewById(rootView, id);
      if (detailsLayout == null) {
        break missingId;
      }

      id = R.id.divider_1;
      View divider1 = ViewBindings.findChildViewById(rootView, id);
      if (divider1 == null) {
        break missingId;
      }

      id = R.id.divider_2;
      View divider2 = ViewBindings.findChildViewById(rootView, id);
      if (divider2 == null) {
        break missingId;
      }

      id = R.id.error_view;
      AppCompatImageView errorView = ViewBindings.findChildViewById(rootView, id);
      if (errorView == null) {
        break missingId;
      }

      id = R.id.expand_icon;
      AppCompatImageView expandIcon = ViewBindings.findChildViewById(rootView, id);
      if (expandIcon == null) {
        break missingId;
      }

      id = R.id.items_list;
      RecyclerView itemsList = ViewBindings.findChildViewById(rootView, id);
      if (itemsList == null) {
        break missingId;
      }

      id = R.id.itn_description;
      MaterialTextView itnDescription = ViewBindings.findChildViewById(rootView, id);
      if (itnDescription == null) {
        break missingId;
      }

      id = R.id.itn_edit_text;
      WCMaterialOutlinedEditTextView itnEditText = ViewBindings.findChildViewById(rootView, id);
      if (itnEditText == null) {
        break missingId;
      }

      id = R.id.package_id;
      MaterialTextView packageId = ViewBindings.findChildViewById(rootView, id);
      if (packageId == null) {
        break missingId;
      }

      id = R.id.package_name;
      MaterialTextView packageName = ViewBindings.findChildViewById(rootView, id);
      if (packageName == null) {
        break missingId;
      }

      id = R.id.restriction_type_description;
      WCMaterialOutlinedEditTextView restrictionTypeDescription = ViewBindings.findChildViewById(rootView, id);
      if (restrictionTypeDescription == null) {
        break missingId;
      }

      id = R.id.restriction_type_spinner;
      WCMaterialOutlinedSpinnerView restrictionTypeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (restrictionTypeSpinner == null) {
        break missingId;
      }

      id = R.id.return_checkbox;
      MaterialCheckBox returnCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (returnCheckbox == null) {
        break missingId;
      }

      id = R.id.title_layout;
      LinearLayout titleLayout = ViewBindings.findChildViewById(rootView, id);
      if (titleLayout == null) {
        break missingId;
      }

      return new ShippingCustomsListItemBinding((WCElevatedLinearLayout) rootView, bottomDivider,
          contentSectionTitle, contentsTypeDescription, contentsTypeSpinner, detailsLayout,
          divider1, divider2, errorView, expandIcon, itemsList, itnDescription, itnEditText,
          packageId, packageName, restrictionTypeDescription, restrictionTypeSpinner,
          returnCheckbox, titleLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
