// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class ModalLayoutPickerBottomToolbarBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton createBlankPageButton;

  @NonNull
  public final LinearLayout createOrRetryContainer;

  @NonNull
  public final MaterialButton createPageButton;

  @NonNull
  public final MaterialButton previewButton;

  @NonNull
  public final MaterialButton retryButton;

  private ModalLayoutPickerBottomToolbarBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton createBlankPageButton, @NonNull LinearLayout createOrRetryContainer,
      @NonNull MaterialButton createPageButton, @NonNull MaterialButton previewButton,
      @NonNull MaterialButton retryButton) {
    this.rootView = rootView;
    this.createBlankPageButton = createBlankPageButton;
    this.createOrRetryContainer = createOrRetryContainer;
    this.createPageButton = createPageButton;
    this.previewButton = previewButton;
    this.retryButton = retryButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ModalLayoutPickerBottomToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ModalLayoutPickerBottomToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.modal_layout_picker_bottom_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ModalLayoutPickerBottomToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.createBlankPageButton;
      MaterialButton createBlankPageButton = ViewBindings.findChildViewById(rootView, id);
      if (createBlankPageButton == null) {
        break missingId;
      }

      id = R.id.createOrRetryContainer;
      LinearLayout createOrRetryContainer = ViewBindings.findChildViewById(rootView, id);
      if (createOrRetryContainer == null) {
        break missingId;
      }

      id = R.id.createPageButton;
      MaterialButton createPageButton = ViewBindings.findChildViewById(rootView, id);
      if (createPageButton == null) {
        break missingId;
      }

      id = R.id.previewButton;
      MaterialButton previewButton = ViewBindings.findChildViewById(rootView, id);
      if (previewButton == null) {
        break missingId;
      }

      id = R.id.retryButton;
      MaterialButton retryButton = ViewBindings.findChildViewById(rootView, id);
      if (retryButton == null) {
        break missingId;
      }

      return new ModalLayoutPickerBottomToolbarBinding((LinearLayout) rootView,
          createBlankPageButton, createOrRetryContainer, createPageButton, previewButton,
          retryButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
