// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.cardreader.onboarding;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.cardreader.CardReaderTracker;
import com.woocommerce.android.ui.common.UserEligibilityFetcher;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CardReaderOnboardingViewModel_Factory implements Factory<CardReaderOnboardingViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CardReaderOnboardingChecker> cardReaderCheckerProvider;

  private final Provider<CardReaderTracker> cardReaderTrackerProvider;

  private final Provider<UserEligibilityFetcher> userEligibilityFetcherProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  public CardReaderOnboardingViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CardReaderOnboardingChecker> cardReaderCheckerProvider,
      Provider<CardReaderTracker> cardReaderTrackerProvider,
      Provider<UserEligibilityFetcher> userEligibilityFetcherProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider) {
    this.savedStateProvider = savedStateProvider;
    this.cardReaderCheckerProvider = cardReaderCheckerProvider;
    this.cardReaderTrackerProvider = cardReaderTrackerProvider;
    this.userEligibilityFetcherProvider = userEligibilityFetcherProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.appPrefsWrapperProvider = appPrefsWrapperProvider;
  }

  @Override
  public CardReaderOnboardingViewModel get() {
    return newInstance(savedStateProvider.get(), cardReaderCheckerProvider.get(), cardReaderTrackerProvider.get(), userEligibilityFetcherProvider.get(), selectedSiteProvider.get(), appPrefsWrapperProvider.get());
  }

  public static CardReaderOnboardingViewModel_Factory create(
      Provider<SavedStateHandle> savedStateProvider,
      Provider<CardReaderOnboardingChecker> cardReaderCheckerProvider,
      Provider<CardReaderTracker> cardReaderTrackerProvider,
      Provider<UserEligibilityFetcher> userEligibilityFetcherProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider) {
    return new CardReaderOnboardingViewModel_Factory(savedStateProvider, cardReaderCheckerProvider, cardReaderTrackerProvider, userEligibilityFetcherProvider, selectedSiteProvider, appPrefsWrapperProvider);
  }

  public static CardReaderOnboardingViewModel newInstance(SavedStateHandle savedState,
      CardReaderOnboardingChecker cardReaderChecker, CardReaderTracker cardReaderTracker,
      UserEligibilityFetcher userEligibilityFetcher, SelectedSite selectedSite,
      AppPrefsWrapper appPrefsWrapper) {
    return new CardReaderOnboardingViewModel(savedState, cardReaderChecker, cardReaderTracker, userEligibilityFetcher, selectedSite, appPrefsWrapper);
  }
}
