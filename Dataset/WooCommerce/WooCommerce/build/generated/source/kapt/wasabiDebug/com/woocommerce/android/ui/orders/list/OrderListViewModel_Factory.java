// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.orders.list;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.orders.filters.domain.GetSelectedOrderFiltersCount;
import com.woocommerce.android.ui.orders.filters.domain.GetWCOrderListDescriptorWithFilters;
import com.woocommerce.android.util.CoroutineDispatchers;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.store.ListStore;
import org.wordpress.android.fluxc.store.WCOrderFetcher;
import org.wordpress.android.fluxc.store.WCOrderStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrderListViewModel_Factory implements Factory<OrderListViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<OrderListRepository> orderListRepositoryProvider;

  private final Provider<WCOrderStore> orderStoreProvider;

  private final Provider<ListStore> listStoreProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<Dispatcher> dispatcherProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<WCOrderFetcher> fetcherProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  private final Provider<GetWCOrderListDescriptorWithFilters> getWCOrderListDescriptorWithFiltersProvider;

  private final Provider<GetSelectedOrderFiltersCount> getSelectedOrderFiltersCountProvider;

  public OrderListViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<OrderListRepository> orderListRepositoryProvider,
      Provider<WCOrderStore> orderStoreProvider, Provider<ListStore> listStoreProvider,
      Provider<NetworkStatus> networkStatusProvider, Provider<Dispatcher> dispatcherProvider,
      Provider<SelectedSite> selectedSiteProvider, Provider<WCOrderFetcher> fetcherProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<GetWCOrderListDescriptorWithFilters> getWCOrderListDescriptorWithFiltersProvider,
      Provider<GetSelectedOrderFiltersCount> getSelectedOrderFiltersCountProvider) {
    this.savedStateProvider = savedStateProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.orderListRepositoryProvider = orderListRepositoryProvider;
    this.orderStoreProvider = orderStoreProvider;
    this.listStoreProvider = listStoreProvider;
    this.networkStatusProvider = networkStatusProvider;
    this.dispatcherProvider = dispatcherProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.fetcherProvider = fetcherProvider;
    this.resourceProvider = resourceProvider;
    this.appPrefsWrapperProvider = appPrefsWrapperProvider;
    this.getWCOrderListDescriptorWithFiltersProvider = getWCOrderListDescriptorWithFiltersProvider;
    this.getSelectedOrderFiltersCountProvider = getSelectedOrderFiltersCountProvider;
  }

  @Override
  public OrderListViewModel get() {
    return newInstance(savedStateProvider.get(), dispatchersProvider.get(), orderListRepositoryProvider.get(), orderStoreProvider.get(), listStoreProvider.get(), networkStatusProvider.get(), dispatcherProvider.get(), selectedSiteProvider.get(), fetcherProvider.get(), resourceProvider.get(), appPrefsWrapperProvider.get(), getWCOrderListDescriptorWithFiltersProvider.get(), getSelectedOrderFiltersCountProvider.get());
  }

  public static OrderListViewModel_Factory create(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<OrderListRepository> orderListRepositoryProvider,
      Provider<WCOrderStore> orderStoreProvider, Provider<ListStore> listStoreProvider,
      Provider<NetworkStatus> networkStatusProvider, Provider<Dispatcher> dispatcherProvider,
      Provider<SelectedSite> selectedSiteProvider, Provider<WCOrderFetcher> fetcherProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<GetWCOrderListDescriptorWithFilters> getWCOrderListDescriptorWithFiltersProvider,
      Provider<GetSelectedOrderFiltersCount> getSelectedOrderFiltersCountProvider) {
    return new OrderListViewModel_Factory(savedStateProvider, dispatchersProvider, orderListRepositoryProvider, orderStoreProvider, listStoreProvider, networkStatusProvider, dispatcherProvider, selectedSiteProvider, fetcherProvider, resourceProvider, appPrefsWrapperProvider, getWCOrderListDescriptorWithFiltersProvider, getSelectedOrderFiltersCountProvider);
  }

  public static OrderListViewModel newInstance(SavedStateHandle savedState,
      CoroutineDispatchers dispatchers, OrderListRepository orderListRepository,
      WCOrderStore orderStore, ListStore listStore, NetworkStatus networkStatus,
      Dispatcher dispatcher, SelectedSite selectedSite, WCOrderFetcher fetcher,
      ResourceProvider resourceProvider, AppPrefsWrapper appPrefsWrapper,
      GetWCOrderListDescriptorWithFilters getWCOrderListDescriptorWithFilters,
      GetSelectedOrderFiltersCount getSelectedOrderFiltersCount) {
    return new OrderListViewModel(savedState, dispatchers, orderListRepository, orderStore, listStore, networkStatus, dispatcher, selectedSite, fetcher, resourceProvider, appPrefsWrapper, getWCOrderListDescriptorWithFilters, getSelectedOrderFiltersCount);
  }
}
