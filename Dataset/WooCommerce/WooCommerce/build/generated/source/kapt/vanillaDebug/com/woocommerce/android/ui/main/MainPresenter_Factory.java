// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.main;

import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.tools.ProductImageMap;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.cardreader.ClearCardReaderDataAction;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.store.AccountStore;
import org.wordpress.android.fluxc.store.WCOrderStore;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainPresenter_Factory implements Factory<MainPresenter> {
  private final Provider<Dispatcher> dispatcherProvider;

  private final Provider<AccountStore> accountStoreProvider;

  private final Provider<WooCommerceStore> wooCommerceStoreProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<ProductImageMap> productImageMapProvider;

  private final Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  private final Provider<WCOrderStore> wcOrderStoreProvider;

  private final Provider<ClearCardReaderDataAction> clearCardReaderDataActionProvider;

  public MainPresenter_Factory(Provider<Dispatcher> dispatcherProvider,
      Provider<AccountStore> accountStoreProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<ProductImageMap> productImageMapProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<WCOrderStore> wcOrderStoreProvider,
      Provider<ClearCardReaderDataAction> clearCardReaderDataActionProvider) {
    this.dispatcherProvider = dispatcherProvider;
    this.accountStoreProvider = accountStoreProvider;
    this.wooCommerceStoreProvider = wooCommerceStoreProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.productImageMapProvider = productImageMapProvider;
    this.appPrefsWrapperProvider = appPrefsWrapperProvider;
    this.wcOrderStoreProvider = wcOrderStoreProvider;
    this.clearCardReaderDataActionProvider = clearCardReaderDataActionProvider;
  }

  @Override
  public MainPresenter get() {
    return newInstance(dispatcherProvider.get(), accountStoreProvider.get(), wooCommerceStoreProvider.get(), selectedSiteProvider.get(), productImageMapProvider.get(), appPrefsWrapperProvider.get(), wcOrderStoreProvider.get(), clearCardReaderDataActionProvider.get());
  }

  public static MainPresenter_Factory create(Provider<Dispatcher> dispatcherProvider,
      Provider<AccountStore> accountStoreProvider,
      Provider<WooCommerceStore> wooCommerceStoreProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<ProductImageMap> productImageMapProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<WCOrderStore> wcOrderStoreProvider,
      Provider<ClearCardReaderDataAction> clearCardReaderDataActionProvider) {
    return new MainPresenter_Factory(dispatcherProvider, accountStoreProvider, wooCommerceStoreProvider, selectedSiteProvider, productImageMapProvider, appPrefsWrapperProvider, wcOrderStoreProvider, clearCardReaderDataActionProvider);
  }

  public static MainPresenter newInstance(Dispatcher dispatcher, AccountStore accountStore,
      WooCommerceStore wooCommerceStore, SelectedSite selectedSite, ProductImageMap productImageMap,
      AppPrefsWrapper appPrefsWrapper, WCOrderStore wcOrderStore,
      ClearCardReaderDataAction clearCardReaderDataAction) {
    return new MainPresenter(dispatcher, accountStore, wooCommerceStore, selectedSite, productImageMap, appPrefsWrapper, wcOrderStore, clearCardReaderDataAction);
  }
}
