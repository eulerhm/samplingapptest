// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.Override;
import org.wordpress.android.R;

public final class ModalLayoutPickerHeaderSectionBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ModalLayoutPickerSubtitleRowBinding modalLayoutPickerSubtitleRow;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ModalLayoutPickerTitleRowBinding modalLayoutPickerTitleRow;

  private ModalLayoutPickerHeaderSectionBinding(@NonNull View rootView,
      @Nullable ModalLayoutPickerSubtitleRowBinding modalLayoutPickerSubtitleRow,
      @Nullable ModalLayoutPickerTitleRowBinding modalLayoutPickerTitleRow) {
    this.rootView = rootView;
    this.modalLayoutPickerSubtitleRow = modalLayoutPickerSubtitleRow;
    this.modalLayoutPickerTitleRow = modalLayoutPickerTitleRow;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static ModalLayoutPickerHeaderSectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ModalLayoutPickerHeaderSectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.modal_layout_picker_header_section, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ModalLayoutPickerHeaderSectionBinding bind(@NonNull View rootView) {
    View modalLayoutPickerSubtitleRow = ViewBindings.findChildViewById(rootView, R.id.modal_layout_picker_subtitle_row);
    ModalLayoutPickerSubtitleRowBinding binding_modalLayoutPickerSubtitleRow = modalLayoutPickerSubtitleRow != null
        ? ModalLayoutPickerSubtitleRowBinding.bind(modalLayoutPickerSubtitleRow)
        : null;

    View modalLayoutPickerTitleRow = ViewBindings.findChildViewById(rootView, R.id.modal_layout_picker_title_row);
    ModalLayoutPickerTitleRowBinding binding_modalLayoutPickerTitleRow = modalLayoutPickerTitleRow != null
        ? ModalLayoutPickerTitleRowBinding.bind(modalLayoutPickerTitleRow)
        : null;

    return new ModalLayoutPickerHeaderSectionBinding(rootView, binding_modalLayoutPickerSubtitleRow,
        binding_modalLayoutPickerTitleRow);
  }
}
