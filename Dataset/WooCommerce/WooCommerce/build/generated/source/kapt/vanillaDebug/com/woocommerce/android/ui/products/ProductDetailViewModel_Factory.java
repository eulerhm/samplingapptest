// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.products;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefs;
import com.woocommerce.android.media.MediaFilesRepository;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.ui.media.MediaFileUploadHandler;
import com.woocommerce.android.ui.products.addons.AddonRepository;
import com.woocommerce.android.ui.products.categories.ProductCategoriesRepository;
import com.woocommerce.android.ui.products.tags.ProductTagsRepository;
import com.woocommerce.android.ui.products.variations.VariationRepository;
import com.woocommerce.android.util.CoroutineDispatchers;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductDetailViewModel_Factory implements Factory<ProductDetailViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<ParameterRepository> parameterRepositoryProvider;

  private final Provider<ProductDetailRepository> productRepositoryProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<ResourceProvider> resourcesProvider;

  private final Provider<ProductCategoriesRepository> productCategoriesRepositoryProvider;

  private final Provider<ProductTagsRepository> productTagsRepositoryProvider;

  private final Provider<MediaFilesRepository> mediaFilesRepositoryProvider;

  private final Provider<VariationRepository> variationRepositoryProvider;

  private final Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider;

  private final Provider<AppPrefs> prefsProvider;

  private final Provider<AddonRepository> addonRepositoryProvider;

  public ProductDetailViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<ParameterRepository> parameterRepositoryProvider,
      Provider<ProductDetailRepository> productRepositoryProvider,
      Provider<NetworkStatus> networkStatusProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<ResourceProvider> resourcesProvider,
      Provider<ProductCategoriesRepository> productCategoriesRepositoryProvider,
      Provider<ProductTagsRepository> productTagsRepositoryProvider,
      Provider<MediaFilesRepository> mediaFilesRepositoryProvider,
      Provider<VariationRepository> variationRepositoryProvider,
      Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider,
      Provider<AppPrefs> prefsProvider, Provider<AddonRepository> addonRepositoryProvider) {
    this.savedStateProvider = savedStateProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.parameterRepositoryProvider = parameterRepositoryProvider;
    this.productRepositoryProvider = productRepositoryProvider;
    this.networkStatusProvider = networkStatusProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.resourcesProvider = resourcesProvider;
    this.productCategoriesRepositoryProvider = productCategoriesRepositoryProvider;
    this.productTagsRepositoryProvider = productTagsRepositoryProvider;
    this.mediaFilesRepositoryProvider = mediaFilesRepositoryProvider;
    this.variationRepositoryProvider = variationRepositoryProvider;
    this.mediaFileUploadHandlerProvider = mediaFileUploadHandlerProvider;
    this.prefsProvider = prefsProvider;
    this.addonRepositoryProvider = addonRepositoryProvider;
  }

  @Override
  public ProductDetailViewModel get() {
    return newInstance(savedStateProvider.get(), dispatchersProvider.get(), parameterRepositoryProvider.get(), productRepositoryProvider.get(), networkStatusProvider.get(), currencyFormatterProvider.get(), resourcesProvider.get(), productCategoriesRepositoryProvider.get(), productTagsRepositoryProvider.get(), mediaFilesRepositoryProvider.get(), variationRepositoryProvider.get(), mediaFileUploadHandlerProvider.get(), prefsProvider.get(), addonRepositoryProvider.get());
  }

  public static ProductDetailViewModel_Factory create(Provider<SavedStateHandle> savedStateProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<ParameterRepository> parameterRepositoryProvider,
      Provider<ProductDetailRepository> productRepositoryProvider,
      Provider<NetworkStatus> networkStatusProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<ResourceProvider> resourcesProvider,
      Provider<ProductCategoriesRepository> productCategoriesRepositoryProvider,
      Provider<ProductTagsRepository> productTagsRepositoryProvider,
      Provider<MediaFilesRepository> mediaFilesRepositoryProvider,
      Provider<VariationRepository> variationRepositoryProvider,
      Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider,
      Provider<AppPrefs> prefsProvider, Provider<AddonRepository> addonRepositoryProvider) {
    return new ProductDetailViewModel_Factory(savedStateProvider, dispatchersProvider, parameterRepositoryProvider, productRepositoryProvider, networkStatusProvider, currencyFormatterProvider, resourcesProvider, productCategoriesRepositoryProvider, productTagsRepositoryProvider, mediaFilesRepositoryProvider, variationRepositoryProvider, mediaFileUploadHandlerProvider, prefsProvider, addonRepositoryProvider);
  }

  public static ProductDetailViewModel newInstance(SavedStateHandle savedState,
      CoroutineDispatchers dispatchers, ParameterRepository parameterRepository,
      ProductDetailRepository productRepository, NetworkStatus networkStatus,
      CurrencyFormatter currencyFormatter, ResourceProvider resources,
      ProductCategoriesRepository productCategoriesRepository,
      ProductTagsRepository productTagsRepository, MediaFilesRepository mediaFilesRepository,
      VariationRepository variationRepository, MediaFileUploadHandler mediaFileUploadHandler,
      AppPrefs prefs, AddonRepository addonRepository) {
    return new ProductDetailViewModel(savedState, dispatchers, parameterRepository, productRepository, networkStatus, currencyFormatter, resources, productCategoriesRepository, productTagsRepository, mediaFilesRepository, variationRepository, mediaFileUploadHandler, prefs, addonRepository);
  }
}
