// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.system;

import com.google.android.gnd.system.rx.RxFusedLocationProviderClient;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocationManager_Factory implements Factory<LocationManager> {
  private final Provider<PermissionsManager> permissionsManagerProvider;

  private final Provider<SettingsManager> settingsManagerProvider;

  private final Provider<RxFusedLocationProviderClient> locationClientProvider;

  public LocationManager_Factory(Provider<PermissionsManager> permissionsManagerProvider,
      Provider<SettingsManager> settingsManagerProvider,
      Provider<RxFusedLocationProviderClient> locationClientProvider) {
    this.permissionsManagerProvider = permissionsManagerProvider;
    this.settingsManagerProvider = settingsManagerProvider;
    this.locationClientProvider = locationClientProvider;
  }

  @Override
  public LocationManager get() {
    return newInstance(permissionsManagerProvider.get(), settingsManagerProvider.get(), locationClientProvider.get());
  }

  public static LocationManager_Factory create(
      Provider<PermissionsManager> permissionsManagerProvider,
      Provider<SettingsManager> settingsManagerProvider,
      Provider<RxFusedLocationProviderClient> locationClientProvider) {
    return new LocationManager_Factory(permissionsManagerProvider, settingsManagerProvider, locationClientProvider);
  }

  public static LocationManager newInstance(PermissionsManager permissionsManager,
      SettingsManager settingsManager, RxFusedLocationProviderClient locationClient) {
    return new LocationManager(permissionsManager, settingsManager, locationClient);
  }
}
