// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.products;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.ui.media.MediaFileUploadHandler;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductImagesViewModel_Factory implements Factory<ProductImagesViewModel> {
  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<SavedStateHandle> savedStateProvider;

  public ProductImagesViewModel_Factory(Provider<NetworkStatus> networkStatusProvider,
      Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider,
      Provider<ResourceProvider> resourceProvider, Provider<SavedStateHandle> savedStateProvider) {
    this.networkStatusProvider = networkStatusProvider;
    this.mediaFileUploadHandlerProvider = mediaFileUploadHandlerProvider;
    this.resourceProvider = resourceProvider;
    this.savedStateProvider = savedStateProvider;
  }

  @Override
  public ProductImagesViewModel get() {
    return newInstance(networkStatusProvider.get(), mediaFileUploadHandlerProvider.get(), resourceProvider.get(), savedStateProvider.get());
  }

  public static ProductImagesViewModel_Factory create(Provider<NetworkStatus> networkStatusProvider,
      Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider,
      Provider<ResourceProvider> resourceProvider, Provider<SavedStateHandle> savedStateProvider) {
    return new ProductImagesViewModel_Factory(networkStatusProvider, mediaFileUploadHandlerProvider, resourceProvider, savedStateProvider);
  }

  public static ProductImagesViewModel newInstance(NetworkStatus networkStatus,
      MediaFileUploadHandler mediaFileUploadHandler, ResourceProvider resourceProvider,
      SavedStateHandle savedState) {
    return new ProductImagesViewModel(networkStatus, mediaFileUploadHandler, resourceProvider, savedState);
  }
}
