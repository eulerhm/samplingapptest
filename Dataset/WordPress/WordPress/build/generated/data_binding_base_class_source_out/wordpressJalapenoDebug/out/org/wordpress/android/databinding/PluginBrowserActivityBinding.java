// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class PluginBrowserActivityBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appbarMain;

  @NonNull
  public final RelativeLayout featuredPluginsContainer;

  @NonNull
  public final RecyclerView featuredPluginsRecycler;

  @NonNull
  public final FrameLayout fragmentContainer;

  @NonNull
  public final RelativeLayout installedPluginsContainer;

  @NonNull
  public final RecyclerView installedPluginsRecycler;

  @NonNull
  public final RelativeLayout newPluginsContainer;

  @NonNull
  public final RecyclerView newPluginsRecycler;

  @NonNull
  public final RelativeLayout popularPluginsContainer;

  @NonNull
  public final RecyclerView popularPluginsRecycler;

  @NonNull
  public final ProgressBar progress;

  @NonNull
  public final NestedScrollView scrollView;

  @NonNull
  public final MaterialTextView textAllFeatured;

  @NonNull
  public final MaterialTextView textAllNew;

  @NonNull
  public final MaterialTextView textAllPopular;

  @NonNull
  public final TextView textFeatured;

  @NonNull
  public final MaterialTextView textInstalled;

  @NonNull
  public final MaterialTextView textManage;

  @NonNull
  public final MaterialTextView textNew;

  @NonNull
  public final MaterialTextView textPopular;

  @NonNull
  public final MaterialToolbar toolbarMain;

  private PluginBrowserActivityBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appbarMain, @NonNull RelativeLayout featuredPluginsContainer,
      @NonNull RecyclerView featuredPluginsRecycler, @NonNull FrameLayout fragmentContainer,
      @NonNull RelativeLayout installedPluginsContainer,
      @NonNull RecyclerView installedPluginsRecycler, @NonNull RelativeLayout newPluginsContainer,
      @NonNull RecyclerView newPluginsRecycler, @NonNull RelativeLayout popularPluginsContainer,
      @NonNull RecyclerView popularPluginsRecycler, @NonNull ProgressBar progress,
      @NonNull NestedScrollView scrollView, @NonNull MaterialTextView textAllFeatured,
      @NonNull MaterialTextView textAllNew, @NonNull MaterialTextView textAllPopular,
      @NonNull TextView textFeatured, @NonNull MaterialTextView textInstalled,
      @NonNull MaterialTextView textManage, @NonNull MaterialTextView textNew,
      @NonNull MaterialTextView textPopular, @NonNull MaterialToolbar toolbarMain) {
    this.rootView = rootView;
    this.appbarMain = appbarMain;
    this.featuredPluginsContainer = featuredPluginsContainer;
    this.featuredPluginsRecycler = featuredPluginsRecycler;
    this.fragmentContainer = fragmentContainer;
    this.installedPluginsContainer = installedPluginsContainer;
    this.installedPluginsRecycler = installedPluginsRecycler;
    this.newPluginsContainer = newPluginsContainer;
    this.newPluginsRecycler = newPluginsRecycler;
    this.popularPluginsContainer = popularPluginsContainer;
    this.popularPluginsRecycler = popularPluginsRecycler;
    this.progress = progress;
    this.scrollView = scrollView;
    this.textAllFeatured = textAllFeatured;
    this.textAllNew = textAllNew;
    this.textAllPopular = textAllPopular;
    this.textFeatured = textFeatured;
    this.textInstalled = textInstalled;
    this.textManage = textManage;
    this.textNew = textNew;
    this.textPopular = textPopular;
    this.toolbarMain = toolbarMain;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PluginBrowserActivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PluginBrowserActivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.plugin_browser_activity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PluginBrowserActivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appbar_main;
      AppBarLayout appbarMain = ViewBindings.findChildViewById(rootView, id);
      if (appbarMain == null) {
        break missingId;
      }

      id = R.id.featured_plugins_container;
      RelativeLayout featuredPluginsContainer = ViewBindings.findChildViewById(rootView, id);
      if (featuredPluginsContainer == null) {
        break missingId;
      }

      id = R.id.featured_plugins_recycler;
      RecyclerView featuredPluginsRecycler = ViewBindings.findChildViewById(rootView, id);
      if (featuredPluginsRecycler == null) {
        break missingId;
      }

      id = R.id.fragment_container;
      FrameLayout fragmentContainer = ViewBindings.findChildViewById(rootView, id);
      if (fragmentContainer == null) {
        break missingId;
      }

      id = R.id.installed_plugins_container;
      RelativeLayout installedPluginsContainer = ViewBindings.findChildViewById(rootView, id);
      if (installedPluginsContainer == null) {
        break missingId;
      }

      id = R.id.installed_plugins_recycler;
      RecyclerView installedPluginsRecycler = ViewBindings.findChildViewById(rootView, id);
      if (installedPluginsRecycler == null) {
        break missingId;
      }

      id = R.id.new_plugins_container;
      RelativeLayout newPluginsContainer = ViewBindings.findChildViewById(rootView, id);
      if (newPluginsContainer == null) {
        break missingId;
      }

      id = R.id.new_plugins_recycler;
      RecyclerView newPluginsRecycler = ViewBindings.findChildViewById(rootView, id);
      if (newPluginsRecycler == null) {
        break missingId;
      }

      id = R.id.popular_plugins_container;
      RelativeLayout popularPluginsContainer = ViewBindings.findChildViewById(rootView, id);
      if (popularPluginsContainer == null) {
        break missingId;
      }

      id = R.id.popular_plugins_recycler;
      RecyclerView popularPluginsRecycler = ViewBindings.findChildViewById(rootView, id);
      if (popularPluginsRecycler == null) {
        break missingId;
      }

      id = R.id.progress;
      ProgressBar progress = ViewBindings.findChildViewById(rootView, id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.scroll_view;
      NestedScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.text_all_featured;
      MaterialTextView textAllFeatured = ViewBindings.findChildViewById(rootView, id);
      if (textAllFeatured == null) {
        break missingId;
      }

      id = R.id.text_all_new;
      MaterialTextView textAllNew = ViewBindings.findChildViewById(rootView, id);
      if (textAllNew == null) {
        break missingId;
      }

      id = R.id.text_all_popular;
      MaterialTextView textAllPopular = ViewBindings.findChildViewById(rootView, id);
      if (textAllPopular == null) {
        break missingId;
      }

      id = R.id.text_featured;
      TextView textFeatured = ViewBindings.findChildViewById(rootView, id);
      if (textFeatured == null) {
        break missingId;
      }

      id = R.id.text_installed;
      MaterialTextView textInstalled = ViewBindings.findChildViewById(rootView, id);
      if (textInstalled == null) {
        break missingId;
      }

      id = R.id.text_manage;
      MaterialTextView textManage = ViewBindings.findChildViewById(rootView, id);
      if (textManage == null) {
        break missingId;
      }

      id = R.id.text_new;
      MaterialTextView textNew = ViewBindings.findChildViewById(rootView, id);
      if (textNew == null) {
        break missingId;
      }

      id = R.id.text_popular;
      MaterialTextView textPopular = ViewBindings.findChildViewById(rootView, id);
      if (textPopular == null) {
        break missingId;
      }

      id = R.id.toolbar_main;
      MaterialToolbar toolbarMain = ViewBindings.findChildViewById(rootView, id);
      if (toolbarMain == null) {
        break missingId;
      }

      return new PluginBrowserActivityBinding((CoordinatorLayout) rootView, appbarMain,
          featuredPluginsContainer, featuredPluginsRecycler, fragmentContainer,
          installedPluginsContainer, installedPluginsRecycler, newPluginsContainer,
          newPluginsRecycler, popularPluginsContainer, popularPluginsRecycler, progress, scrollView,
          textAllFeatured, textAllNew, textAllPopular, textFeatured, textInstalled, textManage,
          textNew, textPopular, toolbarMain);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
