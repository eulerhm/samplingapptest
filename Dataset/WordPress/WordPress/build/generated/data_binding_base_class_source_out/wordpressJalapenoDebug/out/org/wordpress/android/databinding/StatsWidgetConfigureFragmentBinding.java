// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;

public final class StatsWidgetConfigureFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton addWidgetButton;

  @NonNull
  public final LinearLayout colorContainer;

  @NonNull
  public final MaterialTextView colorTitle;

  @NonNull
  public final MaterialTextView colorValue;

  @NonNull
  public final LinearLayout dataTypeContainer;

  @NonNull
  public final MaterialTextView dataTypeTitle;

  @NonNull
  public final MaterialTextView dataTypeValue;

  @NonNull
  public final LinearLayout siteContainer;

  @NonNull
  public final MaterialTextView siteTitle;

  @NonNull
  public final MaterialTextView siteValue;

  private StatsWidgetConfigureFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton addWidgetButton, @NonNull LinearLayout colorContainer,
      @NonNull MaterialTextView colorTitle, @NonNull MaterialTextView colorValue,
      @NonNull LinearLayout dataTypeContainer, @NonNull MaterialTextView dataTypeTitle,
      @NonNull MaterialTextView dataTypeValue, @NonNull LinearLayout siteContainer,
      @NonNull MaterialTextView siteTitle, @NonNull MaterialTextView siteValue) {
    this.rootView = rootView;
    this.addWidgetButton = addWidgetButton;
    this.colorContainer = colorContainer;
    this.colorTitle = colorTitle;
    this.colorValue = colorValue;
    this.dataTypeContainer = dataTypeContainer;
    this.dataTypeTitle = dataTypeTitle;
    this.dataTypeValue = dataTypeValue;
    this.siteContainer = siteContainer;
    this.siteTitle = siteTitle;
    this.siteValue = siteValue;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static StatsWidgetConfigureFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static StatsWidgetConfigureFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.stats_widget_configure_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static StatsWidgetConfigureFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_widget_button;
      MaterialButton addWidgetButton = ViewBindings.findChildViewById(rootView, id);
      if (addWidgetButton == null) {
        break missingId;
      }

      id = R.id.color_container;
      LinearLayout colorContainer = ViewBindings.findChildViewById(rootView, id);
      if (colorContainer == null) {
        break missingId;
      }

      id = R.id.color_title;
      MaterialTextView colorTitle = ViewBindings.findChildViewById(rootView, id);
      if (colorTitle == null) {
        break missingId;
      }

      id = R.id.color_value;
      MaterialTextView colorValue = ViewBindings.findChildViewById(rootView, id);
      if (colorValue == null) {
        break missingId;
      }

      id = R.id.data_type_container;
      LinearLayout dataTypeContainer = ViewBindings.findChildViewById(rootView, id);
      if (dataTypeContainer == null) {
        break missingId;
      }

      id = R.id.data_type_title;
      MaterialTextView dataTypeTitle = ViewBindings.findChildViewById(rootView, id);
      if (dataTypeTitle == null) {
        break missingId;
      }

      id = R.id.data_type_value;
      MaterialTextView dataTypeValue = ViewBindings.findChildViewById(rootView, id);
      if (dataTypeValue == null) {
        break missingId;
      }

      id = R.id.site_container;
      LinearLayout siteContainer = ViewBindings.findChildViewById(rootView, id);
      if (siteContainer == null) {
        break missingId;
      }

      id = R.id.site_title;
      MaterialTextView siteTitle = ViewBindings.findChildViewById(rootView, id);
      if (siteTitle == null) {
        break missingId;
      }

      id = R.id.site_value;
      MaterialTextView siteValue = ViewBindings.findChildViewById(rootView, id);
      if (siteValue == null) {
        break missingId;
      }

      return new StatsWidgetConfigureFragmentBinding((ConstraintLayout) rootView, addWidgetButton,
          colorContainer, colorTitle, colorValue, dataTypeContainer, dataTypeTitle, dataTypeValue,
          siteContainer, siteTitle, siteValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
