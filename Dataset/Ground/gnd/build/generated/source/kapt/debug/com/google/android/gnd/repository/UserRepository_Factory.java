// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.repository;

import com.google.android.gnd.persistence.local.LocalDataStore;
import com.google.android.gnd.persistence.local.LocalValueStore;
import com.google.android.gnd.rx.Schedulers;
import com.google.android.gnd.system.auth.AuthenticationManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserRepository_Factory implements Factory<UserRepository> {
  private final Provider<AuthenticationManager> authenticationManagerProvider;

  private final Provider<LocalDataStore> localDataStoreProvider;

  private final Provider<LocalValueStore> localValueStoreProvider;

  private final Provider<Schedulers> schedulersProvider;

  public UserRepository_Factory(Provider<AuthenticationManager> authenticationManagerProvider,
      Provider<LocalDataStore> localDataStoreProvider,
      Provider<LocalValueStore> localValueStoreProvider, Provider<Schedulers> schedulersProvider) {
    this.authenticationManagerProvider = authenticationManagerProvider;
    this.localDataStoreProvider = localDataStoreProvider;
    this.localValueStoreProvider = localValueStoreProvider;
    this.schedulersProvider = schedulersProvider;
  }

  @Override
  public UserRepository get() {
    return newInstance(authenticationManagerProvider.get(), localDataStoreProvider.get(), localValueStoreProvider.get(), schedulersProvider.get());
  }

  public static UserRepository_Factory create(
      Provider<AuthenticationManager> authenticationManagerProvider,
      Provider<LocalDataStore> localDataStoreProvider,
      Provider<LocalValueStore> localValueStoreProvider, Provider<Schedulers> schedulersProvider) {
    return new UserRepository_Factory(authenticationManagerProvider, localDataStoreProvider, localValueStoreProvider, schedulersProvider);
  }

  public static UserRepository newInstance(AuthenticationManager authenticationManager,
      LocalDataStore localDataStore, LocalValueStore localValueStore, Schedulers schedulers) {
    return new UserRepository(authenticationManager, localDataStore, localValueStore, schedulers);
  }
}
