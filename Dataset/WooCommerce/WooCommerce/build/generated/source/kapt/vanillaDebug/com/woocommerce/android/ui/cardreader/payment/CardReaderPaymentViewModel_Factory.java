// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.cardreader.payment;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.cardreader.CardReaderManager;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.cardreader.CardReaderTracker;
import com.woocommerce.android.ui.cardreader.CardReaderTrackingInfoKeeper;
import com.woocommerce.android.ui.orders.details.OrderDetailRepository;
import com.woocommerce.android.util.CoroutineDispatchers;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.store.WooCommerceStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CardReaderPaymentViewModel_Factory implements Factory<CardReaderPaymentViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<CardReaderManager> cardReaderManagerProvider;

  private final Provider<OrderDetailRepository> orderRepositoryProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  private final Provider<CardReaderPaymentCollectibilityChecker> paymentCollectibilityCheckerProvider;

  private final Provider<CardReaderInteracRefundableChecker> interacRefundableCheckerProvider;

  private final Provider<CardReaderTracker> trackerProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<CardReaderPaymentErrorMapper> errorMapperProvider;

  private final Provider<CardReaderInteracRefundErrorMapper> interacRefundErrorMapperProvider;

  private final Provider<WooCommerceStore> wooStoreProvider;

  private final Provider<CoroutineDispatchers> dispatchersProvider;

  private final Provider<CardReaderTrackingInfoKeeper> cardReaderTrackingInfoKeeperProvider;

  public CardReaderPaymentViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<CardReaderManager> cardReaderManagerProvider,
      Provider<OrderDetailRepository> orderRepositoryProvider,
      Provider<ResourceProvider> resourceProvider, Provider<SelectedSite> selectedSiteProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<CardReaderPaymentCollectibilityChecker> paymentCollectibilityCheckerProvider,
      Provider<CardReaderInteracRefundableChecker> interacRefundableCheckerProvider,
      Provider<CardReaderTracker> trackerProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<CardReaderPaymentErrorMapper> errorMapperProvider,
      Provider<CardReaderInteracRefundErrorMapper> interacRefundErrorMapperProvider,
      Provider<WooCommerceStore> wooStoreProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<CardReaderTrackingInfoKeeper> cardReaderTrackingInfoKeeperProvider) {
    this.savedStateProvider = savedStateProvider;
    this.cardReaderManagerProvider = cardReaderManagerProvider;
    this.orderRepositoryProvider = orderRepositoryProvider;
    this.resourceProvider = resourceProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.appPrefsWrapperProvider = appPrefsWrapperProvider;
    this.paymentCollectibilityCheckerProvider = paymentCollectibilityCheckerProvider;
    this.interacRefundableCheckerProvider = interacRefundableCheckerProvider;
    this.trackerProvider = trackerProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.errorMapperProvider = errorMapperProvider;
    this.interacRefundErrorMapperProvider = interacRefundErrorMapperProvider;
    this.wooStoreProvider = wooStoreProvider;
    this.dispatchersProvider = dispatchersProvider;
    this.cardReaderTrackingInfoKeeperProvider = cardReaderTrackingInfoKeeperProvider;
  }

  @Override
  public CardReaderPaymentViewModel get() {
    return newInstance(savedStateProvider.get(), cardReaderManagerProvider.get(), orderRepositoryProvider.get(), resourceProvider.get(), selectedSiteProvider.get(), appPrefsWrapperProvider.get(), paymentCollectibilityCheckerProvider.get(), interacRefundableCheckerProvider.get(), trackerProvider.get(), currencyFormatterProvider.get(), errorMapperProvider.get(), interacRefundErrorMapperProvider.get(), wooStoreProvider.get(), dispatchersProvider.get(), cardReaderTrackingInfoKeeperProvider.get());
  }

  public static CardReaderPaymentViewModel_Factory create(
      Provider<SavedStateHandle> savedStateProvider,
      Provider<CardReaderManager> cardReaderManagerProvider,
      Provider<OrderDetailRepository> orderRepositoryProvider,
      Provider<ResourceProvider> resourceProvider, Provider<SelectedSite> selectedSiteProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<CardReaderPaymentCollectibilityChecker> paymentCollectibilityCheckerProvider,
      Provider<CardReaderInteracRefundableChecker> interacRefundableCheckerProvider,
      Provider<CardReaderTracker> trackerProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<CardReaderPaymentErrorMapper> errorMapperProvider,
      Provider<CardReaderInteracRefundErrorMapper> interacRefundErrorMapperProvider,
      Provider<WooCommerceStore> wooStoreProvider,
      Provider<CoroutineDispatchers> dispatchersProvider,
      Provider<CardReaderTrackingInfoKeeper> cardReaderTrackingInfoKeeperProvider) {
    return new CardReaderPaymentViewModel_Factory(savedStateProvider, cardReaderManagerProvider, orderRepositoryProvider, resourceProvider, selectedSiteProvider, appPrefsWrapperProvider, paymentCollectibilityCheckerProvider, interacRefundableCheckerProvider, trackerProvider, currencyFormatterProvider, errorMapperProvider, interacRefundErrorMapperProvider, wooStoreProvider, dispatchersProvider, cardReaderTrackingInfoKeeperProvider);
  }

  public static CardReaderPaymentViewModel newInstance(SavedStateHandle savedState,
      CardReaderManager cardReaderManager, OrderDetailRepository orderRepository,
      ResourceProvider resourceProvider, SelectedSite selectedSite, AppPrefsWrapper appPrefsWrapper,
      CardReaderPaymentCollectibilityChecker paymentCollectibilityChecker,
      CardReaderInteracRefundableChecker interacRefundableChecker, CardReaderTracker tracker,
      CurrencyFormatter currencyFormatter, CardReaderPaymentErrorMapper errorMapper,
      CardReaderInteracRefundErrorMapper interacRefundErrorMapper, WooCommerceStore wooStore,
      CoroutineDispatchers dispatchers, CardReaderTrackingInfoKeeper cardReaderTrackingInfoKeeper) {
    return new CardReaderPaymentViewModel(savedState, cardReaderManager, orderRepository, resourceProvider, selectedSite, appPrefsWrapper, paymentCollectibilityChecker, interacRefundableChecker, tracker, currencyFormatter, errorMapper, interacRefundErrorMapper, wooStore, dispatchers, cardReaderTrackingInfoKeeper);
  }
}
