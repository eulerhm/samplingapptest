// Generated by data binding compiler. Do not edit!
package com.google.samples.apps.iosched.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Guideline;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.flexbox.FlexboxLayout;
import com.google.samples.apps.iosched.R;
import com.google.samples.apps.iosched.ui.speaker.SpeakerViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ItemSpeakerInfoBinding extends ViewDataBinding {
  @NonNull
  public final Guideline guidelineEnd;

  @NonNull
  public final Guideline guidelineStart;

  @NonNull
  public final TextView speakerBio;

  @NonNull
  public final Button speakerLinkGithub;

  @NonNull
  public final Button speakerLinkLinkedin;

  @NonNull
  public final Button speakerLinkTwitter;

  @NonNull
  public final Button speakerLinkWebsite;

  @NonNull
  public final FlexboxLayout speakerLinks;

  @NonNull
  public final TextView speakerName;

  @Bindable
  protected SpeakerViewModel mViewModel;

  protected ItemSpeakerInfoBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Guideline guidelineEnd, Guideline guidelineStart, TextView speakerBio,
      Button speakerLinkGithub, Button speakerLinkLinkedin, Button speakerLinkTwitter,
      Button speakerLinkWebsite, FlexboxLayout speakerLinks, TextView speakerName) {
    super(_bindingComponent, _root, _localFieldCount);
    this.guidelineEnd = guidelineEnd;
    this.guidelineStart = guidelineStart;
    this.speakerBio = speakerBio;
    this.speakerLinkGithub = speakerLinkGithub;
    this.speakerLinkLinkedin = speakerLinkLinkedin;
    this.speakerLinkTwitter = speakerLinkTwitter;
    this.speakerLinkWebsite = speakerLinkWebsite;
    this.speakerLinks = speakerLinks;
    this.speakerName = speakerName;
  }

  public abstract void setViewModel(@Nullable SpeakerViewModel viewModel);

  @Nullable
  public SpeakerViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static ItemSpeakerInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_speaker_info, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ItemSpeakerInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ItemSpeakerInfoBinding>inflateInternal(inflater, R.layout.item_speaker_info, root, attachToRoot, component);
  }

  @NonNull
  public static ItemSpeakerInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_speaker_info, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ItemSpeakerInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ItemSpeakerInfoBinding>inflateInternal(inflater, R.layout.item_speaker_info, null, false, component);
  }

  public static ItemSpeakerInfoBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ItemSpeakerInfoBinding bind(@NonNull View view, @Nullable Object component) {
    return (ItemSpeakerInfoBinding)bind(component, view, R.layout.item_speaker_info);
  }
}
