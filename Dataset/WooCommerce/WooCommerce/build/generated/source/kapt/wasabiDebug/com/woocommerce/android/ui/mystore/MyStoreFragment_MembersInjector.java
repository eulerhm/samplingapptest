// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.mystore;

import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.base.UIMessageResolver;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.util.DateUtils;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyStoreFragment_MembersInjector implements MembersInjector<MyStoreFragment> {
  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<UIMessageResolver> uiMessageResolverProvider;

  private final Provider<DateUtils> dateUtilsProvider;

  private final Provider<MyStoreStatsUsageTracksEventEmitter> usageTracksEventEmitterProvider;

  public MyStoreFragment_MembersInjector(Provider<SelectedSite> selectedSiteProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<UIMessageResolver> uiMessageResolverProvider, Provider<DateUtils> dateUtilsProvider,
      Provider<MyStoreStatsUsageTracksEventEmitter> usageTracksEventEmitterProvider) {
    this.selectedSiteProvider = selectedSiteProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.uiMessageResolverProvider = uiMessageResolverProvider;
    this.dateUtilsProvider = dateUtilsProvider;
    this.usageTracksEventEmitterProvider = usageTracksEventEmitterProvider;
  }

  public static MembersInjector<MyStoreFragment> create(Provider<SelectedSite> selectedSiteProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<UIMessageResolver> uiMessageResolverProvider, Provider<DateUtils> dateUtilsProvider,
      Provider<MyStoreStatsUsageTracksEventEmitter> usageTracksEventEmitterProvider) {
    return new MyStoreFragment_MembersInjector(selectedSiteProvider, currencyFormatterProvider, uiMessageResolverProvider, dateUtilsProvider, usageTracksEventEmitterProvider);
  }

  @Override
  public void injectMembers(MyStoreFragment instance) {
    injectSelectedSite(instance, selectedSiteProvider.get());
    injectCurrencyFormatter(instance, currencyFormatterProvider.get());
    injectUiMessageResolver(instance, uiMessageResolverProvider.get());
    injectDateUtils(instance, dateUtilsProvider.get());
    injectUsageTracksEventEmitter(instance, usageTracksEventEmitterProvider.get());
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.mystore.MyStoreFragment.selectedSite")
  public static void injectSelectedSite(MyStoreFragment instance, SelectedSite selectedSite) {
    instance.selectedSite = selectedSite;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.mystore.MyStoreFragment.currencyFormatter")
  public static void injectCurrencyFormatter(MyStoreFragment instance,
      CurrencyFormatter currencyFormatter) {
    instance.currencyFormatter = currencyFormatter;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.mystore.MyStoreFragment.uiMessageResolver")
  public static void injectUiMessageResolver(MyStoreFragment instance,
      UIMessageResolver uiMessageResolver) {
    instance.uiMessageResolver = uiMessageResolver;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.mystore.MyStoreFragment.dateUtils")
  public static void injectDateUtils(MyStoreFragment instance, DateUtils dateUtils) {
    instance.dateUtils = dateUtils;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.mystore.MyStoreFragment.usageTracksEventEmitter")
  public static void injectUsageTracksEventEmitter(MyStoreFragment instance,
      MyStoreStatsUsageTracksEventEmitter usageTracksEventEmitter) {
    instance.usageTracksEventEmitter = usageTracksEventEmitter;
  }
}
