// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.main;

import com.automattic.android.tracks.crashlogging.CrashLogging;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.base.UIMessageResolver;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.wordpress.android.login.LoginAnalyticsListener;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<MainContract.Presenter> presenterProvider;

  private final Provider<LoginAnalyticsListener> loginAnalyticsListenerProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<UIMessageResolver> uiMessageResolverProvider;

  private final Provider<CrashLogging> crashLoggingProvider;

  public MainActivity_MembersInjector(Provider<MainContract.Presenter> presenterProvider,
      Provider<LoginAnalyticsListener> loginAnalyticsListenerProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<UIMessageResolver> uiMessageResolverProvider,
      Provider<CrashLogging> crashLoggingProvider) {
    this.presenterProvider = presenterProvider;
    this.loginAnalyticsListenerProvider = loginAnalyticsListenerProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.uiMessageResolverProvider = uiMessageResolverProvider;
    this.crashLoggingProvider = crashLoggingProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<MainContract.Presenter> presenterProvider,
      Provider<LoginAnalyticsListener> loginAnalyticsListenerProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<UIMessageResolver> uiMessageResolverProvider,
      Provider<CrashLogging> crashLoggingProvider) {
    return new MainActivity_MembersInjector(presenterProvider, loginAnalyticsListenerProvider, selectedSiteProvider, uiMessageResolverProvider, crashLoggingProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectPresenter(instance, presenterProvider.get());
    injectLoginAnalyticsListener(instance, loginAnalyticsListenerProvider.get());
    injectSelectedSite(instance, selectedSiteProvider.get());
    injectUiMessageResolver(instance, uiMessageResolverProvider.get());
    injectCrashLogging(instance, crashLoggingProvider.get());
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.main.MainActivity.presenter")
  public static void injectPresenter(MainActivity instance, MainContract.Presenter presenter) {
    instance.presenter = presenter;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.main.MainActivity.loginAnalyticsListener")
  public static void injectLoginAnalyticsListener(MainActivity instance,
      LoginAnalyticsListener loginAnalyticsListener) {
    instance.loginAnalyticsListener = loginAnalyticsListener;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.main.MainActivity.selectedSite")
  public static void injectSelectedSite(MainActivity instance, SelectedSite selectedSite) {
    instance.selectedSite = selectedSite;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.main.MainActivity.uiMessageResolver")
  public static void injectUiMessageResolver(MainActivity instance,
      UIMessageResolver uiMessageResolver) {
    instance.uiMessageResolver = uiMessageResolver;
  }

  @InjectedFieldSignature("com.woocommerce.android.ui.main.MainActivity.crashLogging")
  public static void injectCrashLogging(MainActivity instance, CrashLogging crashLogging) {
    instance.crashLogging = crashLogging;
  }
}
