// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RefundByItemsShippingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View issueRefundDividerBelowShipping;

  @NonNull
  public final View issueRefundDividerBelowShippingTaxes;

  @NonNull
  public final MaterialTextView issueRefundLblShippingRefundTotal;

  @NonNull
  public final MaterialTextView issueRefundLblShippingSubtotal;

  @NonNull
  public final MaterialTextView issueRefundLblShippingTax;

  @NonNull
  public final RecyclerView issueRefundShippingLines;

  @NonNull
  public final LinearLayout issueRefundShippingShippingRefundSection;

  @NonNull
  public final MaterialTextView issueRefundShippingSubtotal;

  @NonNull
  public final LinearLayout issueRefundShippingSubtotalSection;

  @NonNull
  public final MaterialTextView issueRefundShippingTax;

  @NonNull
  public final LinearLayout issueRefundShippingTaxesSection;

  @NonNull
  public final MaterialTextView issueRefundShippingTotal;

  private RefundByItemsShippingBinding(@NonNull LinearLayout rootView,
      @NonNull View issueRefundDividerBelowShipping,
      @NonNull View issueRefundDividerBelowShippingTaxes,
      @NonNull MaterialTextView issueRefundLblShippingRefundTotal,
      @NonNull MaterialTextView issueRefundLblShippingSubtotal,
      @NonNull MaterialTextView issueRefundLblShippingTax,
      @NonNull RecyclerView issueRefundShippingLines,
      @NonNull LinearLayout issueRefundShippingShippingRefundSection,
      @NonNull MaterialTextView issueRefundShippingSubtotal,
      @NonNull LinearLayout issueRefundShippingSubtotalSection,
      @NonNull MaterialTextView issueRefundShippingTax,
      @NonNull LinearLayout issueRefundShippingTaxesSection,
      @NonNull MaterialTextView issueRefundShippingTotal) {
    this.rootView = rootView;
    this.issueRefundDividerBelowShipping = issueRefundDividerBelowShipping;
    this.issueRefundDividerBelowShippingTaxes = issueRefundDividerBelowShippingTaxes;
    this.issueRefundLblShippingRefundTotal = issueRefundLblShippingRefundTotal;
    this.issueRefundLblShippingSubtotal = issueRefundLblShippingSubtotal;
    this.issueRefundLblShippingTax = issueRefundLblShippingTax;
    this.issueRefundShippingLines = issueRefundShippingLines;
    this.issueRefundShippingShippingRefundSection = issueRefundShippingShippingRefundSection;
    this.issueRefundShippingSubtotal = issueRefundShippingSubtotal;
    this.issueRefundShippingSubtotalSection = issueRefundShippingSubtotalSection;
    this.issueRefundShippingTax = issueRefundShippingTax;
    this.issueRefundShippingTaxesSection = issueRefundShippingTaxesSection;
    this.issueRefundShippingTotal = issueRefundShippingTotal;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RefundByItemsShippingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RefundByItemsShippingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.refund_by_items_shipping, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RefundByItemsShippingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.issueRefund_dividerBelowShipping;
      View issueRefundDividerBelowShipping = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundDividerBelowShipping == null) {
        break missingId;
      }

      id = R.id.issueRefund_dividerBelowShippingTaxes;
      View issueRefundDividerBelowShippingTaxes = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundDividerBelowShippingTaxes == null) {
        break missingId;
      }

      id = R.id.issueRefund_lblShippingRefundTotal;
      MaterialTextView issueRefundLblShippingRefundTotal = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundLblShippingRefundTotal == null) {
        break missingId;
      }

      id = R.id.issueRefund_lblShippingSubtotal;
      MaterialTextView issueRefundLblShippingSubtotal = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundLblShippingSubtotal == null) {
        break missingId;
      }

      id = R.id.issueRefund_lblShippingTax;
      MaterialTextView issueRefundLblShippingTax = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundLblShippingTax == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingLines;
      RecyclerView issueRefundShippingLines = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingLines == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingShippingRefundSection;
      LinearLayout issueRefundShippingShippingRefundSection = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingShippingRefundSection == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingSubtotal;
      MaterialTextView issueRefundShippingSubtotal = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingSubtotal == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingSubtotalSection;
      LinearLayout issueRefundShippingSubtotalSection = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingSubtotalSection == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingTax;
      MaterialTextView issueRefundShippingTax = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingTax == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingTaxesSection;
      LinearLayout issueRefundShippingTaxesSection = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingTaxesSection == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingTotal;
      MaterialTextView issueRefundShippingTotal = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingTotal == null) {
        break missingId;
      }

      return new RefundByItemsShippingBinding((LinearLayout) rootView,
          issueRefundDividerBelowShipping, issueRefundDividerBelowShippingTaxes,
          issueRefundLblShippingRefundTotal, issueRefundLblShippingSubtotal,
          issueRefundLblShippingTax, issueRefundShippingLines,
          issueRefundShippingShippingRefundSection, issueRefundShippingSubtotal,
          issueRefundShippingSubtotalSection, issueRefundShippingTax,
          issueRefundShippingTaxesSection, issueRefundShippingTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
