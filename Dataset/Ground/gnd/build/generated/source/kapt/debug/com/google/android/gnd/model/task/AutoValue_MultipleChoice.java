package com.google.android.gnd.model.task;

import com.google.common.collect.ImmutableList;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_MultipleChoice extends MultipleChoice {

  private final ImmutableList<Option> options;

  private final MultipleChoice.Cardinality cardinality;

  private AutoValue_MultipleChoice(
      ImmutableList<Option> options,
      MultipleChoice.Cardinality cardinality) {
    this.options = options;
    this.cardinality = cardinality;
  }

  @Override
  public ImmutableList<Option> getOptions() {
    return options;
  }

  @Override
  public MultipleChoice.Cardinality getCardinality() {
    return cardinality;
  }

  @Override
  public String toString() {
    return "MultipleChoice{"
        + "options=" + options + ", "
        + "cardinality=" + cardinality
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof MultipleChoice) {
      MultipleChoice that = (MultipleChoice) o;
      return this.options.equals(that.getOptions())
          && this.cardinality.equals(that.getCardinality());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= options.hashCode();
    h$ *= 1000003;
    h$ ^= cardinality.hashCode();
    return h$;
  }

  private static final long serialVersionUID = 1L;

  static final class Builder extends MultipleChoice.Builder {
    private ImmutableList<Option> options;
    private MultipleChoice.Cardinality cardinality;
    Builder() {
    }
    @Override
    public MultipleChoice.Builder setOptions(ImmutableList<Option> options) {
      if (options == null) {
        throw new NullPointerException("Null options");
      }
      this.options = options;
      return this;
    }
    @Override
    public MultipleChoice.Builder setCardinality(MultipleChoice.Cardinality cardinality) {
      if (cardinality == null) {
        throw new NullPointerException("Null cardinality");
      }
      this.cardinality = cardinality;
      return this;
    }
    @Override
    public MultipleChoice build() {
      String missing = "";
      if (this.options == null) {
        missing += " options";
      }
      if (this.cardinality == null) {
        missing += " cardinality";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_MultipleChoice(
          this.options,
          this.cardinality);
    }
  }

}
