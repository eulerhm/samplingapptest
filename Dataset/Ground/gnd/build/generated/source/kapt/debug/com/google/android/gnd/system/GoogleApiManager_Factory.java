// Generated by Dagger (https://dagger.dev).
package com.google.android.gnd.system;

import android.content.Context;
import com.google.android.gms.common.GoogleApiAvailability;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GoogleApiManager_Factory implements Factory<GoogleApiManager> {
  private final Provider<Context> contextProvider;

  private final Provider<GoogleApiAvailability> googleApiAvailabilityProvider;

  private final Provider<ActivityStreams> activityStreamsProvider;

  public GoogleApiManager_Factory(Provider<Context> contextProvider,
      Provider<GoogleApiAvailability> googleApiAvailabilityProvider,
      Provider<ActivityStreams> activityStreamsProvider) {
    this.contextProvider = contextProvider;
    this.googleApiAvailabilityProvider = googleApiAvailabilityProvider;
    this.activityStreamsProvider = activityStreamsProvider;
  }

  @Override
  public GoogleApiManager get() {
    return newInstance(contextProvider.get(), googleApiAvailabilityProvider.get(), activityStreamsProvider.get());
  }

  public static GoogleApiManager_Factory create(Provider<Context> contextProvider,
      Provider<GoogleApiAvailability> googleApiAvailabilityProvider,
      Provider<ActivityStreams> activityStreamsProvider) {
    return new GoogleApiManager_Factory(contextProvider, googleApiAvailabilityProvider, activityStreamsProvider);
  }

  public static GoogleApiManager newInstance(Context context,
      GoogleApiAvailability googleApiAvailability, ActivityStreams activityStreams) {
    return new GoogleApiManager(context, googleApiAvailability, activityStreams);
  }
}
