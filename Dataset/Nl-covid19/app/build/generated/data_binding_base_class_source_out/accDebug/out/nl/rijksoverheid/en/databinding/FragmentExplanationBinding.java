// Generated by data binding compiler. Do not edit!
package nl.rijksoverheid.en.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.core.widget.NestedScrollView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.airbnb.lottie.LottieAnimationView;
import com.google.android.material.appbar.AppBarLayout;
import java.lang.Deprecated;
import java.lang.Object;
import nl.rijksoverheid.en.R;
import nl.rijksoverheid.en.onboarding.ExplanationFragment;

public abstract class FragmentExplanationBinding extends ViewDataBinding {
  @NonNull
  public final AppBarLayout appbar;

  @NonNull
  public final TextView description;

  @NonNull
  public final TextView example;

  @NonNull
  public final TextView headline;

  @NonNull
  public final LottieAnimationView illustration;

  @NonNull
  public final Button next;

  @NonNull
  public final NestedScrollView scrollContainer;

  @NonNull
  public final Toolbar toolbar;

  @Bindable
  protected ExplanationFragment.ViewState mViewState;

  @Bindable
  protected View.OnClickListener mNextButtonClickListener;

  protected FragmentExplanationBinding(Object _bindingComponent, View _root, int _localFieldCount,
      AppBarLayout appbar, TextView description, TextView example, TextView headline,
      LottieAnimationView illustration, Button next, NestedScrollView scrollContainer,
      Toolbar toolbar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.appbar = appbar;
    this.description = description;
    this.example = example;
    this.headline = headline;
    this.illustration = illustration;
    this.next = next;
    this.scrollContainer = scrollContainer;
    this.toolbar = toolbar;
  }

  public abstract void setViewState(@Nullable ExplanationFragment.ViewState viewState);

  @Nullable
  public ExplanationFragment.ViewState getViewState() {
    return mViewState;
  }

  public abstract void setNextButtonClickListener(
      @Nullable View.OnClickListener nextButtonClickListener);

  @Nullable
  public View.OnClickListener getNextButtonClickListener() {
    return mNextButtonClickListener;
  }

  @NonNull
  public static FragmentExplanationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_explanation, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentExplanationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentExplanationBinding>inflateInternal(inflater, R.layout.fragment_explanation, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentExplanationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_explanation, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentExplanationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentExplanationBinding>inflateInternal(inflater, R.layout.fragment_explanation, null, false, component);
  }

  public static FragmentExplanationBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentExplanationBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentExplanationBinding)bind(component, view, R.layout.fragment_explanation);
  }
}
