// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RefundShippingListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View issueRefundShippingDivider;

  @NonNull
  public final FrameLayout issueRefundShippingIconFrame;

  @NonNull
  public final SwitchMaterial issueRefundShippingLineSwitch;

  @NonNull
  public final MaterialTextView issueRefundShippingName;

  @NonNull
  public final MaterialTextView issueRefundShippingPrice;

  private RefundShippingListItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull View issueRefundShippingDivider, @NonNull FrameLayout issueRefundShippingIconFrame,
      @NonNull SwitchMaterial issueRefundShippingLineSwitch,
      @NonNull MaterialTextView issueRefundShippingName,
      @NonNull MaterialTextView issueRefundShippingPrice) {
    this.rootView = rootView;
    this.issueRefundShippingDivider = issueRefundShippingDivider;
    this.issueRefundShippingIconFrame = issueRefundShippingIconFrame;
    this.issueRefundShippingLineSwitch = issueRefundShippingLineSwitch;
    this.issueRefundShippingName = issueRefundShippingName;
    this.issueRefundShippingPrice = issueRefundShippingPrice;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RefundShippingListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RefundShippingListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.refund_shipping_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RefundShippingListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.issueRefund_shippingDivider;
      View issueRefundShippingDivider = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingDivider == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingIconFrame;
      FrameLayout issueRefundShippingIconFrame = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingIconFrame == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingLineSwitch;
      SwitchMaterial issueRefundShippingLineSwitch = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingLineSwitch == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingName;
      MaterialTextView issueRefundShippingName = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingName == null) {
        break missingId;
      }

      id = R.id.issueRefund_shippingPrice;
      MaterialTextView issueRefundShippingPrice = ViewBindings.findChildViewById(rootView, id);
      if (issueRefundShippingPrice == null) {
        break missingId;
      }

      return new RefundShippingListItemBinding((ConstraintLayout) rootView,
          issueRefundShippingDivider, issueRefundShippingIconFrame, issueRefundShippingLineSwitch,
          issueRefundShippingName, issueRefundShippingPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
