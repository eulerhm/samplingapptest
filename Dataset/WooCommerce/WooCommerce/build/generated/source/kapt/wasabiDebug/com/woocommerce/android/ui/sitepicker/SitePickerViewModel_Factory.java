// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.sitepicker;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.AppPrefsWrapper;
import com.woocommerce.android.analytics.AnalyticsTrackerWrapper;
import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.ui.common.UserEligibilityFetcher;
import com.woocommerce.android.ui.login.UnifiedLoginTracker;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SitePickerViewModel_Factory implements Factory<SitePickerViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  private final Provider<SitePickerRepository> repositoryProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<AppPrefsWrapper> appPrefsWrapperProvider;

  private final Provider<UnifiedLoginTracker> unifiedLoginTrackerProvider;

  private final Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider;

  private final Provider<UserEligibilityFetcher> userEligibilityFetcherProvider;

  public SitePickerViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<SitePickerRepository> repositoryProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<UnifiedLoginTracker> unifiedLoginTrackerProvider,
      Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider,
      Provider<UserEligibilityFetcher> userEligibilityFetcherProvider) {
    this.savedStateProvider = savedStateProvider;
    this.selectedSiteProvider = selectedSiteProvider;
    this.repositoryProvider = repositoryProvider;
    this.resourceProvider = resourceProvider;
    this.appPrefsWrapperProvider = appPrefsWrapperProvider;
    this.unifiedLoginTrackerProvider = unifiedLoginTrackerProvider;
    this.analyticsTrackerWrapperProvider = analyticsTrackerWrapperProvider;
    this.userEligibilityFetcherProvider = userEligibilityFetcherProvider;
  }

  @Override
  public SitePickerViewModel get() {
    return newInstance(savedStateProvider.get(), selectedSiteProvider.get(), repositoryProvider.get(), resourceProvider.get(), appPrefsWrapperProvider.get(), unifiedLoginTrackerProvider.get(), analyticsTrackerWrapperProvider.get(), userEligibilityFetcherProvider.get());
  }

  public static SitePickerViewModel_Factory create(Provider<SavedStateHandle> savedStateProvider,
      Provider<SelectedSite> selectedSiteProvider,
      Provider<SitePickerRepository> repositoryProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<AppPrefsWrapper> appPrefsWrapperProvider,
      Provider<UnifiedLoginTracker> unifiedLoginTrackerProvider,
      Provider<AnalyticsTrackerWrapper> analyticsTrackerWrapperProvider,
      Provider<UserEligibilityFetcher> userEligibilityFetcherProvider) {
    return new SitePickerViewModel_Factory(savedStateProvider, selectedSiteProvider, repositoryProvider, resourceProvider, appPrefsWrapperProvider, unifiedLoginTrackerProvider, analyticsTrackerWrapperProvider, userEligibilityFetcherProvider);
  }

  public static SitePickerViewModel newInstance(SavedStateHandle savedState,
      SelectedSite selectedSite, SitePickerRepository repository, ResourceProvider resourceProvider,
      AppPrefsWrapper appPrefsWrapper, UnifiedLoginTracker unifiedLoginTracker,
      AnalyticsTrackerWrapper analyticsTrackerWrapper,
      UserEligibilityFetcher userEligibilityFetcher) {
    return new SitePickerViewModel(savedState, selectedSite, repository, resourceProvider, appPrefsWrapper, unifiedLoginTracker, analyticsTrackerWrapper, userEligibilityFetcher);
  }
}
