// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;
import org.wordpress.android.widgets.WPTextView;

public final class ActivityLogItemDetailBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final ImageView activityActorIcon;

  @NonNull
  public final WPTextView activityActorName;

  @NonNull
  public final WPTextView activityActorRole;

  @NonNull
  public final WPTextView activityCreatedDate;

  @NonNull
  public final WPTextView activityCreatedTime;

  @NonNull
  public final LinearLayout activityDownloadBackupButton;

  @NonNull
  public final ImageView activityJetpackActorIcon;

  @NonNull
  public final WPTextView activityMessage;

  @NonNull
  public final LinearLayout activityRestoreButton;

  @NonNull
  public final WPTextView activityType;

  @NonNull
  public final WPTextView multisiteMessage;

  @NonNull
  public final NestedScrollView nestedScrollView;

  private ActivityLogItemDetailBinding(@NonNull NestedScrollView rootView,
      @NonNull ImageView activityActorIcon, @NonNull WPTextView activityActorName,
      @NonNull WPTextView activityActorRole, @NonNull WPTextView activityCreatedDate,
      @NonNull WPTextView activityCreatedTime, @NonNull LinearLayout activityDownloadBackupButton,
      @NonNull ImageView activityJetpackActorIcon, @NonNull WPTextView activityMessage,
      @NonNull LinearLayout activityRestoreButton, @NonNull WPTextView activityType,
      @NonNull WPTextView multisiteMessage, @NonNull NestedScrollView nestedScrollView) {
    this.rootView = rootView;
    this.activityActorIcon = activityActorIcon;
    this.activityActorName = activityActorName;
    this.activityActorRole = activityActorRole;
    this.activityCreatedDate = activityCreatedDate;
    this.activityCreatedTime = activityCreatedTime;
    this.activityDownloadBackupButton = activityDownloadBackupButton;
    this.activityJetpackActorIcon = activityJetpackActorIcon;
    this.activityMessage = activityMessage;
    this.activityRestoreButton = activityRestoreButton;
    this.activityType = activityType;
    this.multisiteMessage = multisiteMessage;
    this.nestedScrollView = nestedScrollView;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLogItemDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLogItemDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_log_item_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLogItemDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activityActorIcon;
      ImageView activityActorIcon = ViewBindings.findChildViewById(rootView, id);
      if (activityActorIcon == null) {
        break missingId;
      }

      id = R.id.activityActorName;
      WPTextView activityActorName = ViewBindings.findChildViewById(rootView, id);
      if (activityActorName == null) {
        break missingId;
      }

      id = R.id.activityActorRole;
      WPTextView activityActorRole = ViewBindings.findChildViewById(rootView, id);
      if (activityActorRole == null) {
        break missingId;
      }

      id = R.id.activityCreatedDate;
      WPTextView activityCreatedDate = ViewBindings.findChildViewById(rootView, id);
      if (activityCreatedDate == null) {
        break missingId;
      }

      id = R.id.activityCreatedTime;
      WPTextView activityCreatedTime = ViewBindings.findChildViewById(rootView, id);
      if (activityCreatedTime == null) {
        break missingId;
      }

      id = R.id.activityDownloadBackupButton;
      LinearLayout activityDownloadBackupButton = ViewBindings.findChildViewById(rootView, id);
      if (activityDownloadBackupButton == null) {
        break missingId;
      }

      id = R.id.activityJetpackActorIcon;
      ImageView activityJetpackActorIcon = ViewBindings.findChildViewById(rootView, id);
      if (activityJetpackActorIcon == null) {
        break missingId;
      }

      id = R.id.activityMessage;
      WPTextView activityMessage = ViewBindings.findChildViewById(rootView, id);
      if (activityMessage == null) {
        break missingId;
      }

      id = R.id.activityRestoreButton;
      LinearLayout activityRestoreButton = ViewBindings.findChildViewById(rootView, id);
      if (activityRestoreButton == null) {
        break missingId;
      }

      id = R.id.activityType;
      WPTextView activityType = ViewBindings.findChildViewById(rootView, id);
      if (activityType == null) {
        break missingId;
      }

      id = R.id.multisiteMessage;
      WPTextView multisiteMessage = ViewBindings.findChildViewById(rootView, id);
      if (multisiteMessage == null) {
        break missingId;
      }

      NestedScrollView nestedScrollView = (NestedScrollView) rootView;

      return new ActivityLogItemDetailBinding((NestedScrollView) rootView, activityActorIcon,
          activityActorName, activityActorRole, activityCreatedDate, activityCreatedTime,
          activityDownloadBackupButton, activityJetpackActorIcon, activityMessage,
          activityRestoreButton, activityType, multisiteMessage, nestedScrollView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
