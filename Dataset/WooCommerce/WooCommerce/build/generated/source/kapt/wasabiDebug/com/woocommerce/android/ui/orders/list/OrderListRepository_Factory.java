// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.orders.list;

import com.woocommerce.android.tools.SelectedSite;
import com.woocommerce.android.util.CoroutineDispatchers;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.wordpress.android.fluxc.Dispatcher;
import org.wordpress.android.fluxc.store.WCGatewayStore;
import org.wordpress.android.fluxc.store.WCOrderStore;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrderListRepository_Factory implements Factory<OrderListRepository> {
  private final Provider<Dispatcher> dispatcherProvider;

  private final Provider<CoroutineDispatchers> coroutineDispatchersProvider;

  private final Provider<WCOrderStore> orderStoreProvider;

  private final Provider<WCGatewayStore> gatewayStoreProvider;

  private final Provider<SelectedSite> selectedSiteProvider;

  public OrderListRepository_Factory(Provider<Dispatcher> dispatcherProvider,
      Provider<CoroutineDispatchers> coroutineDispatchersProvider,
      Provider<WCOrderStore> orderStoreProvider, Provider<WCGatewayStore> gatewayStoreProvider,
      Provider<SelectedSite> selectedSiteProvider) {
    this.dispatcherProvider = dispatcherProvider;
    this.coroutineDispatchersProvider = coroutineDispatchersProvider;
    this.orderStoreProvider = orderStoreProvider;
    this.gatewayStoreProvider = gatewayStoreProvider;
    this.selectedSiteProvider = selectedSiteProvider;
  }

  @Override
  public OrderListRepository get() {
    return newInstance(dispatcherProvider.get(), coroutineDispatchersProvider.get(), orderStoreProvider.get(), gatewayStoreProvider.get(), selectedSiteProvider.get());
  }

  public static OrderListRepository_Factory create(Provider<Dispatcher> dispatcherProvider,
      Provider<CoroutineDispatchers> coroutineDispatchersProvider,
      Provider<WCOrderStore> orderStoreProvider, Provider<WCGatewayStore> gatewayStoreProvider,
      Provider<SelectedSite> selectedSiteProvider) {
    return new OrderListRepository_Factory(dispatcherProvider, coroutineDispatchersProvider, orderStoreProvider, gatewayStoreProvider, selectedSiteProvider);
  }

  public static OrderListRepository newInstance(Dispatcher dispatcher,
      CoroutineDispatchers coroutineDispatchers, WCOrderStore orderStore,
      WCGatewayStore gatewayStore, SelectedSite selectedSite) {
    return new OrderListRepository(dispatcher, coroutineDispatchers, orderStore, gatewayStore, selectedSite);
  }
}
