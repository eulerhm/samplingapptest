// Generated by Dagger (https://dagger.dev).
package com.woocommerce.android.ui.products.variations;

import androidx.lifecycle.SavedStateHandle;
import com.woocommerce.android.tools.NetworkStatus;
import com.woocommerce.android.ui.media.MediaFileUploadHandler;
import com.woocommerce.android.ui.products.ParameterRepository;
import com.woocommerce.android.ui.products.ProductDetailRepository;
import com.woocommerce.android.util.CurrencyFormatter;
import com.woocommerce.android.viewmodel.ResourceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VariationDetailViewModel_Factory implements Factory<VariationDetailViewModel> {
  private final Provider<SavedStateHandle> savedStateProvider;

  private final Provider<VariationDetailRepository> variationRepositoryProvider;

  private final Provider<ProductDetailRepository> productRepositoryProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  private final Provider<CurrencyFormatter> currencyFormatterProvider;

  private final Provider<ParameterRepository> parameterRepositoryProvider;

  private final Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider;

  private final Provider<ResourceProvider> resourcesProvider;

  public VariationDetailViewModel_Factory(Provider<SavedStateHandle> savedStateProvider,
      Provider<VariationDetailRepository> variationRepositoryProvider,
      Provider<ProductDetailRepository> productRepositoryProvider,
      Provider<NetworkStatus> networkStatusProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<ParameterRepository> parameterRepositoryProvider,
      Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider,
      Provider<ResourceProvider> resourcesProvider) {
    this.savedStateProvider = savedStateProvider;
    this.variationRepositoryProvider = variationRepositoryProvider;
    this.productRepositoryProvider = productRepositoryProvider;
    this.networkStatusProvider = networkStatusProvider;
    this.currencyFormatterProvider = currencyFormatterProvider;
    this.parameterRepositoryProvider = parameterRepositoryProvider;
    this.mediaFileUploadHandlerProvider = mediaFileUploadHandlerProvider;
    this.resourcesProvider = resourcesProvider;
  }

  @Override
  public VariationDetailViewModel get() {
    return newInstance(savedStateProvider.get(), variationRepositoryProvider.get(), productRepositoryProvider.get(), networkStatusProvider.get(), currencyFormatterProvider.get(), parameterRepositoryProvider.get(), mediaFileUploadHandlerProvider.get(), resourcesProvider.get());
  }

  public static VariationDetailViewModel_Factory create(
      Provider<SavedStateHandle> savedStateProvider,
      Provider<VariationDetailRepository> variationRepositoryProvider,
      Provider<ProductDetailRepository> productRepositoryProvider,
      Provider<NetworkStatus> networkStatusProvider,
      Provider<CurrencyFormatter> currencyFormatterProvider,
      Provider<ParameterRepository> parameterRepositoryProvider,
      Provider<MediaFileUploadHandler> mediaFileUploadHandlerProvider,
      Provider<ResourceProvider> resourcesProvider) {
    return new VariationDetailViewModel_Factory(savedStateProvider, variationRepositoryProvider, productRepositoryProvider, networkStatusProvider, currencyFormatterProvider, parameterRepositoryProvider, mediaFileUploadHandlerProvider, resourcesProvider);
  }

  public static VariationDetailViewModel newInstance(SavedStateHandle savedState,
      VariationDetailRepository variationRepository, ProductDetailRepository productRepository,
      NetworkStatus networkStatus, CurrencyFormatter currencyFormatter,
      ParameterRepository parameterRepository, MediaFileUploadHandler mediaFileUploadHandler,
      ResourceProvider resources) {
    return new VariationDetailViewModel(savedState, variationRepository, productRepository, networkStatus, currencyFormatter, parameterRepository, mediaFileUploadHandler, resources);
  }
}
