package com.google.android.gnd.model.job;

import com.google.android.gnd.model.feature.FeatureType;
import com.google.android.gnd.model.task.Task;
import com.google.common.collect.ImmutableList;
import java8.util.Optional;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_Job extends Job {

  private final String id;

  private final String name;

  private final Optional<Task> task;

  private final ImmutableList<FeatureType> userCanAdd;

  private AutoValue_Job(
      String id,
      String name,
      Optional<Task> task,
      ImmutableList<FeatureType> userCanAdd) {
    this.id = id;
    this.name = name;
    this.task = task;
    this.userCanAdd = userCanAdd;
  }

  @Override
  public String getId() {
    return id;
  }

  @Override
  public String getName() {
    return name;
  }

  @Override
  public Optional<Task> getTask() {
    return task;
  }

  @Override
  public ImmutableList<FeatureType> getUserCanAdd() {
    return userCanAdd;
  }

  @Override
  public String toString() {
    return "Job{"
        + "id=" + id + ", "
        + "name=" + name + ", "
        + "task=" + task + ", "
        + "userCanAdd=" + userCanAdd
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Job) {
      Job that = (Job) o;
      return this.id.equals(that.getId())
          && this.name.equals(that.getName())
          && this.task.equals(that.getTask())
          && this.userCanAdd.equals(that.getUserCanAdd());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= id.hashCode();
    h$ *= 1000003;
    h$ ^= name.hashCode();
    h$ *= 1000003;
    h$ ^= task.hashCode();
    h$ *= 1000003;
    h$ ^= userCanAdd.hashCode();
    return h$;
  }

  @Override
  public Job.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends Job.Builder {
    private String id;
    private String name;
    private Optional<Task> task;
    private ImmutableList<FeatureType> userCanAdd;
    Builder() {
    }
    private Builder(Job source) {
      this.id = source.getId();
      this.name = source.getName();
      this.task = source.getTask();
      this.userCanAdd = source.getUserCanAdd();
    }
    @Override
    public Job.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public Job.Builder setName(String name) {
      if (name == null) {
        throw new NullPointerException("Null name");
      }
      this.name = name;
      return this;
    }
    @Override
    public Job.Builder setTask(Optional<Task> task) {
      if (task == null) {
        throw new NullPointerException("Null task");
      }
      this.task = task;
      return this;
    }
    @Override
    public Job.Builder setUserCanAdd(ImmutableList<FeatureType> userCanAdd) {
      if (userCanAdd == null) {
        throw new NullPointerException("Null userCanAdd");
      }
      this.userCanAdd = userCanAdd;
      return this;
    }
    @Override
    public Job build() {
      String missing = "";
      if (this.id == null) {
        missing += " id";
      }
      if (this.name == null) {
        missing += " name";
      }
      if (this.task == null) {
        missing += " task";
      }
      if (this.userCanAdd == null) {
        missing += " userCanAdd";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_Job(
          this.id,
          this.name,
          this.task,
          this.userCanAdd);
    }
  }

}
