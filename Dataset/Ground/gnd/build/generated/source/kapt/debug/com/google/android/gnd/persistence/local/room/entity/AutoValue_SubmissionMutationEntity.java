package com.google.android.gnd.persistence.local.room.entity;

import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.PrimaryKey;
import com.google.android.gnd.persistence.local.room.models.MutationEntitySyncStatus;
import com.google.android.gnd.persistence.local.room.models.MutationEntityType;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_SubmissionMutationEntity extends SubmissionMutationEntity {

  @PrimaryKey(autoGenerate = true)
  @ColumnInfo(name = "id")
  @Nullable
  private final Long id;

  @ColumnInfo(name = "survey_id")
  private final String surveyId;

  @ColumnInfo(name = "type")
  private final MutationEntityType type;

  @ColumnInfo(name = "state")
  private final MutationEntitySyncStatus syncStatus;

  @ColumnInfo(name = "retry_count")
  private final long retryCount;

  @ColumnInfo(name = "last_error")
  @Nullable
  private final String lastError;

  @ColumnInfo(name = "user_id")
  private final String userId;

  @ColumnInfo(name = "client_timestamp")
  private final long clientTimestamp;

  @ColumnInfo(name = "task_id")
  private final String taskId;

  @ColumnInfo(name = "feature_id")
  private final String featureId;

  @ColumnInfo(name = "job_id")
  private final String jobId;

  @ColumnInfo(name = "submission_id")
  private final String submissionId;

  @Nullable
  @ColumnInfo(name = "response_deltas")
  private final String responseDeltas;

  private AutoValue_SubmissionMutationEntity(
      @Nullable Long id,
      String surveyId,
      MutationEntityType type,
      MutationEntitySyncStatus syncStatus,
      long retryCount,
      @Nullable String lastError,
      String userId,
      long clientTimestamp,
      String taskId,
      String featureId,
      String jobId,
      String submissionId,
      @Nullable String responseDeltas) {
    this.id = id;
    this.surveyId = surveyId;
    this.type = type;
    this.syncStatus = syncStatus;
    this.retryCount = retryCount;
    this.lastError = lastError;
    this.userId = userId;
    this.clientTimestamp = clientTimestamp;
    this.taskId = taskId;
    this.featureId = featureId;
    this.jobId = jobId;
    this.submissionId = submissionId;
    this.responseDeltas = responseDeltas;
  }

  @PrimaryKey(autoGenerate = true)
  @ColumnInfo(name = "id")
  @Nullable
  @Override
  public Long getId() {
    return id;
  }

  @ColumnInfo(name = "survey_id")
  @Override
  public String getSurveyId() {
    return surveyId;
  }

  @ColumnInfo(name = "type")
  @Override
  public MutationEntityType getType() {
    return type;
  }

  @ColumnInfo(name = "state")
  @Override
  public MutationEntitySyncStatus getSyncStatus() {
    return syncStatus;
  }

  @ColumnInfo(name = "retry_count")
  @Override
  public long getRetryCount() {
    return retryCount;
  }

  @ColumnInfo(name = "last_error")
  @Nullable
  @Override
  public String getLastError() {
    return lastError;
  }

  @ColumnInfo(name = "user_id")
  @Override
  public String getUserId() {
    return userId;
  }

  @ColumnInfo(name = "client_timestamp")
  @Override
  public long getClientTimestamp() {
    return clientTimestamp;
  }

  @ColumnInfo(name = "task_id")
  @Override
  public String getTaskId() {
    return taskId;
  }

  @ColumnInfo(name = "feature_id")
  @Override
  public String getFeatureId() {
    return featureId;
  }

  @ColumnInfo(name = "job_id")
  @Override
  public String getJobId() {
    return jobId;
  }

  @ColumnInfo(name = "submission_id")
  @Override
  public String getSubmissionId() {
    return submissionId;
  }

  @Nullable
  @ColumnInfo(name = "response_deltas")
  @Override
  public String getResponseDeltas() {
    return responseDeltas;
  }

  @Override
  public String toString() {
    return "SubmissionMutationEntity{"
        + "id=" + id + ", "
        + "surveyId=" + surveyId + ", "
        + "type=" + type + ", "
        + "syncStatus=" + syncStatus + ", "
        + "retryCount=" + retryCount + ", "
        + "lastError=" + lastError + ", "
        + "userId=" + userId + ", "
        + "clientTimestamp=" + clientTimestamp + ", "
        + "taskId=" + taskId + ", "
        + "featureId=" + featureId + ", "
        + "jobId=" + jobId + ", "
        + "submissionId=" + submissionId + ", "
        + "responseDeltas=" + responseDeltas
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof SubmissionMutationEntity) {
      SubmissionMutationEntity that = (SubmissionMutationEntity) o;
      return (this.id == null ? that.getId() == null : this.id.equals(that.getId()))
          && this.surveyId.equals(that.getSurveyId())
          && this.type.equals(that.getType())
          && this.syncStatus.equals(that.getSyncStatus())
          && this.retryCount == that.getRetryCount()
          && (this.lastError == null ? that.getLastError() == null : this.lastError.equals(that.getLastError()))
          && this.userId.equals(that.getUserId())
          && this.clientTimestamp == that.getClientTimestamp()
          && this.taskId.equals(that.getTaskId())
          && this.featureId.equals(that.getFeatureId())
          && this.jobId.equals(that.getJobId())
          && this.submissionId.equals(that.getSubmissionId())
          && (this.responseDeltas == null ? that.getResponseDeltas() == null : this.responseDeltas.equals(that.getResponseDeltas()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= (id == null) ? 0 : id.hashCode();
    h$ *= 1000003;
    h$ ^= surveyId.hashCode();
    h$ *= 1000003;
    h$ ^= type.hashCode();
    h$ *= 1000003;
    h$ ^= syncStatus.hashCode();
    h$ *= 1000003;
    h$ ^= (int) ((retryCount >>> 32) ^ retryCount);
    h$ *= 1000003;
    h$ ^= (lastError == null) ? 0 : lastError.hashCode();
    h$ *= 1000003;
    h$ ^= userId.hashCode();
    h$ *= 1000003;
    h$ ^= (int) ((clientTimestamp >>> 32) ^ clientTimestamp);
    h$ *= 1000003;
    h$ ^= taskId.hashCode();
    h$ *= 1000003;
    h$ ^= featureId.hashCode();
    h$ *= 1000003;
    h$ ^= jobId.hashCode();
    h$ *= 1000003;
    h$ ^= submissionId.hashCode();
    h$ *= 1000003;
    h$ ^= (responseDeltas == null) ? 0 : responseDeltas.hashCode();
    return h$;
  }

  static final class Builder extends SubmissionMutationEntity.Builder {
    private Long id;
    private String surveyId;
    private MutationEntityType type;
    private MutationEntitySyncStatus syncStatus;
    private Long retryCount;
    private String lastError;
    private String userId;
    private Long clientTimestamp;
    private String taskId;
    private String featureId;
    private String jobId;
    private String submissionId;
    private String responseDeltas;
    Builder() {
    }
    @Override
    public SubmissionMutationEntity.Builder setId(@Nullable Long id) {
      this.id = id;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setSurveyId(String surveyId) {
      if (surveyId == null) {
        throw new NullPointerException("Null surveyId");
      }
      this.surveyId = surveyId;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setType(MutationEntityType type) {
      if (type == null) {
        throw new NullPointerException("Null type");
      }
      this.type = type;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setSyncStatus(MutationEntitySyncStatus syncStatus) {
      if (syncStatus == null) {
        throw new NullPointerException("Null syncStatus");
      }
      this.syncStatus = syncStatus;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setRetryCount(long retryCount) {
      this.retryCount = retryCount;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setLastError(@Nullable String lastError) {
      this.lastError = lastError;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setUserId(String userId) {
      if (userId == null) {
        throw new NullPointerException("Null userId");
      }
      this.userId = userId;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setClientTimestamp(long clientTimestamp) {
      this.clientTimestamp = clientTimestamp;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setTaskId(String taskId) {
      if (taskId == null) {
        throw new NullPointerException("Null taskId");
      }
      this.taskId = taskId;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setFeatureId(String featureId) {
      if (featureId == null) {
        throw new NullPointerException("Null featureId");
      }
      this.featureId = featureId;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setJobId(String jobId) {
      if (jobId == null) {
        throw new NullPointerException("Null jobId");
      }
      this.jobId = jobId;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setSubmissionId(String submissionId) {
      if (submissionId == null) {
        throw new NullPointerException("Null submissionId");
      }
      this.submissionId = submissionId;
      return this;
    }
    @Override
    public SubmissionMutationEntity.Builder setResponseDeltas(String responseDeltas) {
      this.responseDeltas = responseDeltas;
      return this;
    }
    @Override
    public SubmissionMutationEntity build() {
      String missing = "";
      if (this.surveyId == null) {
        missing += " surveyId";
      }
      if (this.type == null) {
        missing += " type";
      }
      if (this.syncStatus == null) {
        missing += " syncStatus";
      }
      if (this.retryCount == null) {
        missing += " retryCount";
      }
      if (this.userId == null) {
        missing += " userId";
      }
      if (this.clientTimestamp == null) {
        missing += " clientTimestamp";
      }
      if (this.taskId == null) {
        missing += " taskId";
      }
      if (this.featureId == null) {
        missing += " featureId";
      }
      if (this.jobId == null) {
        missing += " jobId";
      }
      if (this.submissionId == null) {
        missing += " submissionId";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_SubmissionMutationEntity(
          this.id,
          this.surveyId,
          this.type,
          this.syncStatus,
          this.retryCount,
          this.lastError,
          this.userId,
          this.clientTimestamp,
          this.taskId,
          this.featureId,
          this.jobId,
          this.submissionId,
          this.responseDeltas);
    }
  }

}
