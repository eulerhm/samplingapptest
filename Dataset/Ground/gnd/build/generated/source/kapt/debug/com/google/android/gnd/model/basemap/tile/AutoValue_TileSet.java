package com.google.android.gnd.model.basemap.tile;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_TileSet extends TileSet {

  private final String url;

  private final String id;

  private final String path;

  private final TileSet.State state;

  private final int offlineAreaReferenceCount;

  private AutoValue_TileSet(
      String url,
      String id,
      String path,
      TileSet.State state,
      int offlineAreaReferenceCount) {
    this.url = url;
    this.id = id;
    this.path = path;
    this.state = state;
    this.offlineAreaReferenceCount = offlineAreaReferenceCount;
  }

  @Override
  public String getUrl() {
    return url;
  }

  @Override
  public String getId() {
    return id;
  }

  @Override
  public String getPath() {
    return path;
  }

  @Override
  public TileSet.State getState() {
    return state;
  }

  @Override
  public int getOfflineAreaReferenceCount() {
    return offlineAreaReferenceCount;
  }

  @Override
  public String toString() {
    return "TileSet{"
        + "url=" + url + ", "
        + "id=" + id + ", "
        + "path=" + path + ", "
        + "state=" + state + ", "
        + "offlineAreaReferenceCount=" + offlineAreaReferenceCount
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof TileSet) {
      TileSet that = (TileSet) o;
      return this.url.equals(that.getUrl())
          && this.id.equals(that.getId())
          && this.path.equals(that.getPath())
          && this.state.equals(that.getState())
          && this.offlineAreaReferenceCount == that.getOfflineAreaReferenceCount();
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= url.hashCode();
    h$ *= 1000003;
    h$ ^= id.hashCode();
    h$ *= 1000003;
    h$ ^= path.hashCode();
    h$ *= 1000003;
    h$ ^= state.hashCode();
    h$ *= 1000003;
    h$ ^= offlineAreaReferenceCount;
    return h$;
  }

  @Override
  public TileSet.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends TileSet.Builder {
    private String url;
    private String id;
    private String path;
    private TileSet.State state;
    private Integer offlineAreaReferenceCount;
    Builder() {
    }
    private Builder(TileSet source) {
      this.url = source.getUrl();
      this.id = source.getId();
      this.path = source.getPath();
      this.state = source.getState();
      this.offlineAreaReferenceCount = source.getOfflineAreaReferenceCount();
    }
    @Override
    public TileSet.Builder setUrl(String url) {
      if (url == null) {
        throw new NullPointerException("Null url");
      }
      this.url = url;
      return this;
    }
    @Override
    public TileSet.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public TileSet.Builder setPath(String path) {
      if (path == null) {
        throw new NullPointerException("Null path");
      }
      this.path = path;
      return this;
    }
    @Override
    public TileSet.Builder setState(TileSet.State state) {
      if (state == null) {
        throw new NullPointerException("Null state");
      }
      this.state = state;
      return this;
    }
    @Override
    public TileSet.Builder setOfflineAreaReferenceCount(int offlineAreaReferenceCount) {
      this.offlineAreaReferenceCount = offlineAreaReferenceCount;
      return this;
    }
    @Override
    public TileSet build() {
      String missing = "";
      if (this.url == null) {
        missing += " url";
      }
      if (this.id == null) {
        missing += " id";
      }
      if (this.path == null) {
        missing += " path";
      }
      if (this.state == null) {
        missing += " state";
      }
      if (this.offlineAreaReferenceCount == null) {
        missing += " offlineAreaReferenceCount";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_TileSet(
          this.url,
          this.id,
          this.path,
          this.state,
          this.offlineAreaReferenceCount);
    }
  }

}
