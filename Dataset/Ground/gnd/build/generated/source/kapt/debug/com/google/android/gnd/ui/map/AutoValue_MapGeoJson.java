package com.google.android.gnd.ui.map;

import androidx.annotation.Dimension;
import com.google.android.gnd.model.feature.Feature;
import com.google.android.gnd.model.job.Style;
import org.json.JSONObject;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_MapGeoJson extends MapGeoJson {

  private final String id;

  private final JSONObject geoJson;

  private final Style style;

  private final int strokeWidth;

  private final Feature feature;

  private AutoValue_MapGeoJson(
      String id,
      JSONObject geoJson,
      Style style,
      int strokeWidth,
      Feature feature) {
    this.id = id;
    this.geoJson = geoJson;
    this.style = style;
    this.strokeWidth = strokeWidth;
    this.feature = feature;
  }

  @Override
  public String getId() {
    return id;
  }

  @Override
  public JSONObject getGeoJson() {
    return geoJson;
  }

  @Override
  public Style getStyle() {
    return style;
  }

  @Dimension
  @Override
  public int getStrokeWidth() {
    return strokeWidth;
  }

  @Override
  public Feature getFeature() {
    return feature;
  }

  @Override
  public String toString() {
    return "MapGeoJson{"
        + "id=" + id + ", "
        + "geoJson=" + geoJson + ", "
        + "style=" + style + ", "
        + "strokeWidth=" + strokeWidth + ", "
        + "feature=" + feature
        + "}";
  }

  @Override
  public MapGeoJson.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends MapGeoJson.Builder {
    private String id;
    private JSONObject geoJson;
    private Style style;
    private Integer strokeWidth;
    private Feature feature;
    Builder() {
    }
    private Builder(MapGeoJson source) {
      this.id = source.getId();
      this.geoJson = source.getGeoJson();
      this.style = source.getStyle();
      this.strokeWidth = source.getStrokeWidth();
      this.feature = source.getFeature();
    }
    @Override
    public MapGeoJson.Builder setId(String id) {
      if (id == null) {
        throw new NullPointerException("Null id");
      }
      this.id = id;
      return this;
    }
    @Override
    public MapGeoJson.Builder setGeoJson(JSONObject geoJson) {
      if (geoJson == null) {
        throw new NullPointerException("Null geoJson");
      }
      this.geoJson = geoJson;
      return this;
    }
    @Override
    public MapGeoJson.Builder setStyle(Style style) {
      if (style == null) {
        throw new NullPointerException("Null style");
      }
      this.style = style;
      return this;
    }
    @Override
    public MapGeoJson.Builder setStrokeWidth(int strokeWidth) {
      this.strokeWidth = strokeWidth;
      return this;
    }
    @Override
    public MapGeoJson.Builder setFeature(Feature feature) {
      if (feature == null) {
        throw new NullPointerException("Null feature");
      }
      this.feature = feature;
      return this;
    }
    @Override
    public MapGeoJson build() {
      String missing = "";
      if (this.id == null) {
        missing += " id";
      }
      if (this.geoJson == null) {
        missing += " geoJson";
      }
      if (this.style == null) {
        missing += " style";
      }
      if (this.strokeWidth == null) {
        missing += " strokeWidth";
      }
      if (this.feature == null) {
        missing += " feature";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_MapGeoJson(
          this.id,
          this.geoJson,
          this.style,
          this.strokeWidth,
          this.feature);
    }
  }

}
