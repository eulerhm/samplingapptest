// Generated by view binder compiler. Do not edit!
package org.wordpress.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wordpress.android.R;
import org.wordpress.android.widgets.WPTextView;

public final class ActionableEmptyViewBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final ProgressBar actionableEmptyViewProgressBar;

  @NonNull
  public final ImageView bottomImage;

  @NonNull
  public final MaterialButton button;

  @NonNull
  public final ImageView image;

  @NonNull
  public final WPTextView subtitle;

  @NonNull
  public final WPTextView title;

  private ActionableEmptyViewBinding(@NonNull View rootView,
      @NonNull ProgressBar actionableEmptyViewProgressBar, @NonNull ImageView bottomImage,
      @NonNull MaterialButton button, @NonNull ImageView image, @NonNull WPTextView subtitle,
      @NonNull WPTextView title) {
    this.rootView = rootView;
    this.actionableEmptyViewProgressBar = actionableEmptyViewProgressBar;
    this.bottomImage = bottomImage;
    this.button = button;
    this.image = image;
    this.subtitle = subtitle;
    this.title = title;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static ActionableEmptyViewBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.actionable_empty_view, parent);
    return bind(parent);
  }

  @NonNull
  public static ActionableEmptyViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionable_empty_view_progress_bar;
      ProgressBar actionableEmptyViewProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (actionableEmptyViewProgressBar == null) {
        break missingId;
      }

      id = R.id.bottom_image;
      ImageView bottomImage = ViewBindings.findChildViewById(rootView, id);
      if (bottomImage == null) {
        break missingId;
      }

      id = R.id.button;
      MaterialButton button = ViewBindings.findChildViewById(rootView, id);
      if (button == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.subtitle;
      WPTextView subtitle = ViewBindings.findChildViewById(rootView, id);
      if (subtitle == null) {
        break missingId;
      }

      id = R.id.title;
      WPTextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      return new ActionableEmptyViewBinding(rootView, actionableEmptyViewProgressBar, bottomImage,
          button, image, subtitle, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
