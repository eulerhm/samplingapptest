// Generated by view binder compiler. Do not edit!
package com.woocommerce.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.woocommerce.android.R;
import com.woocommerce.android.widgets.WCElevatedConstraintLayout;
import com.woocommerce.android.widgets.WCEmptyView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentShippingCarrierRatesBinding implements ViewBinding {
  @NonNull
  private final WCElevatedConstraintLayout rootView;

  @NonNull
  public final RecyclerView carrierRates;

  @NonNull
  public final WCEmptyView emptyView;

  @NonNull
  public final ConstraintLayout infoBanner;

  @NonNull
  public final View infoBannerDivider;

  @NonNull
  public final ImageView infoBannerIcon;

  @NonNull
  public final MaterialTextView infoBannerMessage;

  private FragmentShippingCarrierRatesBinding(@NonNull WCElevatedConstraintLayout rootView,
      @NonNull RecyclerView carrierRates, @NonNull WCEmptyView emptyView,
      @NonNull ConstraintLayout infoBanner, @NonNull View infoBannerDivider,
      @NonNull ImageView infoBannerIcon, @NonNull MaterialTextView infoBannerMessage) {
    this.rootView = rootView;
    this.carrierRates = carrierRates;
    this.emptyView = emptyView;
    this.infoBanner = infoBanner;
    this.infoBannerDivider = infoBannerDivider;
    this.infoBannerIcon = infoBannerIcon;
    this.infoBannerMessage = infoBannerMessage;
  }

  @Override
  @NonNull
  public WCElevatedConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentShippingCarrierRatesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentShippingCarrierRatesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_shipping_carrier_rates, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentShippingCarrierRatesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.carrierRates;
      RecyclerView carrierRates = ViewBindings.findChildViewById(rootView, id);
      if (carrierRates == null) {
        break missingId;
      }

      id = R.id.emptyView;
      WCEmptyView emptyView = ViewBindings.findChildViewById(rootView, id);
      if (emptyView == null) {
        break missingId;
      }

      id = R.id.infoBanner;
      ConstraintLayout infoBanner = ViewBindings.findChildViewById(rootView, id);
      if (infoBanner == null) {
        break missingId;
      }

      id = R.id.infoBannerDivider;
      View infoBannerDivider = ViewBindings.findChildViewById(rootView, id);
      if (infoBannerDivider == null) {
        break missingId;
      }

      id = R.id.infoBannerIcon;
      ImageView infoBannerIcon = ViewBindings.findChildViewById(rootView, id);
      if (infoBannerIcon == null) {
        break missingId;
      }

      id = R.id.infoBannerMessage;
      MaterialTextView infoBannerMessage = ViewBindings.findChildViewById(rootView, id);
      if (infoBannerMessage == null) {
        break missingId;
      }

      return new FragmentShippingCarrierRatesBinding((WCElevatedConstraintLayout) rootView,
          carrierRates, emptyView, infoBanner, infoBannerDivider, infoBannerIcon,
          infoBannerMessage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
